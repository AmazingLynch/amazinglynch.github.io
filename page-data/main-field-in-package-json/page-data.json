{"componentChunkName":"component---src-templates-blog-post-js","path":"/main-field-in-package-json/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"298a27f4-c474-58ed-88e2-c592390ae11c","excerpt":"package.json是一个JavaScript的项目描述文件，其中main字段是非常重要的一个字段，它描述了程序的入口。本文将分析作为一个模块（不是应用）的main字段。 main vs module main字段是程序的入口，在[npm官网](The main field is a module ID that…","html":"<p>package.json是一个JavaScript的项目描述文件，其中main字段是非常重要的一个字段，它描述了程序的入口。本文将分析作为一个模块（不是应用）的main字段。</p>\n<!--more-->\n<h2>main vs module</h2>\n<p>main字段是程序的入口，在[npm官网](The main field is a module ID that is the primary entry point to your program. That is, if your package is named foo, and a user installs it, and then does require(“foo”), then your main module’s exports object will be returned.  This should be a module ID relative to the root of your package folder.  For m)有这么一段描述</p>\n<ul>\n<li>The main field is a module ID that is the primary entry point to your program. That is, if your package is named <strong><code class=\"language-text\">foo</code></strong>, and a user installs it, and then does <strong><code class=\"language-text\">require(\"foo\")</code></strong>, then your main module’s exports object will be returned</li>\n<li>This should be a module ID relative to the root of your package folder.</li>\n</ul>\n<p>main字段是commonJS规范的入口文件，对于客户端应用来说，如果使用webpack或者rollup这样的现代化打包器打包应用的话，其实优先考虑的是module字段，如果module字段没有值的话，才会使用main字段。具体看 <a href=\"https://github.com/rollup/rollup/wiki/pkg.module\">pkg.module</a></p>\n<h2>main的指向</h2>\n<p>在看一些开源代码库的实现的时候，关于main字段有一些不一样的理解。</p>\n<p>比如<a href=\"https://github.com/vuejs/vuex\">vuex</a>中package.json是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t...\n\t<span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/vuex.common.js\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/vuex.esm.js\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"unpkg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/vuex.js\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"jsdelivr\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/vuex.js\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"typings\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"types/index.d.ts\"</span>\n\t<span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"types/index.d.ts\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"types/helper.d.ts\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"types/vue.d.ts\"</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到这里的main指向了一个使用rollup打包的开发版本的commonjs格式的打包后的文件。module指向的是一个使用rollup打包的开发版本的esm格式的包。其他诸如jsdelivr, unpkg使用的都是开发rollup打包的umd格式的包。vuex的dist目录会被推送到github，当包的使用中使用<code class=\"language-text\">npm install</code>安装包的时候，dist目录也会存在与node_modules/vuex目录下。</p>\n<p>在另一个知名的包<a href=\"https://github.com/axios/axios/\">axios</a>的package.json里就和vuex有些区别</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t...\n\t<span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"./lib/adapters/http.js\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./lib/adapters/xhr.js\"</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"jsdelivr\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/axios.min.js\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"unpkg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist/axios/min.js\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这package.json没files字段，说明安装的时候，项目的所有文件夹和根目录下非配置文件都会被安装进去，其实也就只有两个文件夹（lib目录和dist目录）。</p>\n<p>axios由于一个前后端都可以使用的库，前后端发出请求的方式不一样，前端使用xhr对象，后端使用的是http库，所以这里有一个browser字段表示在浏览器端把某一个文件的导入换成另外一个文件。</p>\n<p>axios 的package.json没有module目录，说明如果模块被一个客户端应用使用的话，打包器的入口也是main指向的地址。这个main的地址指向了一个源文件，并不是打包后的文件。这里和之前的vuex有明显的不一样。</p>\n<h2>思考</h2>\n<p>一个包（模块）在一个应用中是如何被使用的？</p>\n<p>一般来说会有两种方式</p>\n<ol>\n<li>直接通过script标签引入</li>\n<li>通过require或者import方式引入，加上打包工具(webpack, rollup)</li>\n</ol>\n<p>第一种方式通常会使用一个dist目录的压缩版本的umd格式的包，使用cdn或者其他方式引入。此处不细讲。</p>\n<p>前面我们说到，打包工具一般会使用module/main 字段作为包的入口文件。这里先讨论main，main一般来说会有三种取值</p>\n<ol>\n<li>指向源代码文件 （如axios）</li>\n<li>指向打包后的开发版本（如vuex）</li>\n<li>指向打包后的生产版本</li>\n</ol>\n<p>先讨论第一种与第二中的区别</p>\n<p>如果使用源码作为入口文件的话，就需要使用者自行对这个模块进行打包处理，而由于使用webpack这类打包工具的时候，往往会配置babel-loader 把node_modules给exclude掉，这也就意味着不会对这个包进行转译。如果这个包里出现了es6或者更高级的特性的话，可能会在应用层上会出现不兼容的问题。而且对node_modules里的包进行处理，会导致编译速度变慢。</p>\n<p>所以如果是在客户端使用的包，包的开发者不应该使用源代码作为入口。如果包的目标运行环境只是在node端，由于node端不需要对源代码进行编译打包，所以可以将源文件作为入口文件。</p>\n<p>再讨论第二种与第三种的区别：</p>\n<p>我们看到vuex的module字段指向的是一个开发版本的编译包。开发版本和生产版本有什么区别呢？</p>\n<ol>\n<li>开发版本一般不会进行压缩，利于在包的使用者在开发过程中进行调试，保持源代码的可读性。</li>\n<li>开发版本一般会有一些警告信息。这些警告信息，一般源码是这样实现的，这些代码一样会被放到开发版本的包文件中。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果使用webpack的话，会使用<a href=\"https://webpack.js.org/plugins/define-plugin/\">DefinePlugin</a>来定义环境变量。如果在开发环境的话，NODE_ENV就是’development’了，那么警告信息就会被打印出来。</p>\n<p>所以可以看到vuex的module和main指向的不同模块格式的开发版本的包，这让你在开发的时候，有很好的开发体验，会有报错信息。</p>\n<p>等你将你的应用代码打包上线的时候，打包工具会将环境变量设置为production，那么那些所有的判断都为false了，所以就不会进入那些警告的逻辑了。同时，还会启用minify将代码进行压缩，会删除用不到的代码。所以生产版本就看不到警告了。</p>\n<h2>再看开源库</h2>\n<p>前面我们看了vuex和axios，看起来vuex的实现更加标准一些。axios的只有一个main字段（client 和server端公用一个入口），如果使用者不加转译的话，axios里如果用了一些目标浏览器不支持的新特性的话，就会出现兼容性问题。</p>\n<p>axios和vuex都将dist目录推送到github</p>\n<p>再看<a href=\"https://github.com/mobxjs/mobx/issues/1922\">mobx</a>的实现， mobx和axios一样可以在client,server端使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"umd:main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib/mobx.umd.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib/mobx.module.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"unpkg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib/mobx.umd.min.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"jsnext:main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib/mobx.module.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"typings\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib/mobx.esm.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  \t<span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token string\">\"LICENSE\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里main指向的是源码文件，其他的都是打包后的文件。而且还要知道的是mobx并没有把lib目录push到github，而只是把lib目录push到了npm上。</p>\n<p>参考：</p>\n<p><a href=\"https://jingsam.github.io/2018/03/12/npm-main.html\">关于package.json中main字段的指向问题</a></p>\n<p><a href=\"https://docs.npmjs.com/files/package.json\">npm doc</a></p>","frontmatter":{"title":"package.json里的main字段","date":"June 07, 2020","description":"package.json里的main字段，再平常不过了"}},"previous":{"fields":{"slug":"/source-code-of-koa/"},"frontmatter":{"title":"koa源码解析"}},"next":{"fields":{"slug":"/key-in-vue/"},"frontmatter":{"title":"Vue中的key"}}},"pageContext":{"id":"298a27f4-c474-58ed-88e2-c592390ae11c","previousPostId":"38ec0cec-3f05-55b7-a255-4ed3627c6e54","nextPostId":"0626f4ba-cde1-539f-9d6d-7dc15094cbd9"}},"staticQueryHashes":["2841359383","3257411868"]}