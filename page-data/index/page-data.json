{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"allMarkdownRemark":{"nodes":[{"excerpt":"尽管现在 rollup/webpack 功能已经很强大了，但是对于一个库的开发者来说，如何配置出一个最佳实践并不是一个简单的事情，因此社区中有很多机遇rollup/webpack…","fields":{"slug":"/bundler/"},"frontmatter":{"date":"August 14, 2022","title":"基于rollup/webpack的上层打包工具","description":"还在用rollup/webpack打包？快来试试这些好用的新工具吧"}},{"excerpt":"之前笔者写过一篇文章composition api 的参数传递 讲到过在 vue composition api 中应该如何处理动态的参数，建议读者在阅读本文前，先阅读之前的那篇文章。 起因在看到 vueuse 的issue…","fields":{"slug":"/reactive-params-in-composition-api/"},"frontmatter":{"date":"July 17, 2022","title":"如何处理composition api的动态参数","description":"compisition api 如何应对会变化的"}},{"excerpt":"在ts中经常会遇到一些未知的无法控制的类型，比如说从一个接口中获取数据的时候，返回的数据类型是没法控制的。比如如下代码 result 现在是 any 类型，这就导致了在 then…","fields":{"slug":"/unreliable-type-in-typescript/"},"frontmatter":{"date":"July 17, 2022","title":"如何处理ts中不可靠的类型","description":"从接口获取的数据类型应该怎么定义？"}},{"excerpt":"随着前端工程变得越来越复杂，各种构建工具也层出不穷，原生esm 的支持，同构应用需要在node 环境下运行代码，本文将以vue 框架入手，探讨库作者应该如何给不同场景提供不同的文件。 首先可以知道vue 是一个monorepo的架构，各个子包都使用同一份rollup…","fields":{"slug":"/vue-bundle/"},"frontmatter":{"date":"July 03, 2022","title":"vue如何打包分发代码","description":"日益复杂的前端环境，vue是如何打包分发代码？"}},{"excerpt":"对于库作者来说，你为什么要打包你的package这个问题听起来很刺耳，因为好像这个问题挺怪的，因为大家看到的实践就是，写库的时候，用rollup打包一下，然后把打包后的文件放到package.json里的module或者main…","fields":{"slug":"/why-bundle-your-package/"},"frontmatter":{"date":"May 03, 2022","title":"你为什么打包你的库","description":"不打包不行吗？"}},{"excerpt":"package.json里的module字段，作为前端开发者来说再熟悉不过了，今天笔者站在2022年的角度简单说下这个字段。 自从Node.js诞生以来，commonjs成为了模块规范。而在之后的ES规范中，JavaScript却重新定义了一个模块规范-ESM。ESM…","fields":{"slug":"/module-field-in-package-json/"},"frontmatter":{"date":"May 03, 2022","title":"package.json中的module字段","description":"module字段，你不知道的一些事"}},{"excerpt":"我们经常使用ssh来下载github/gitlab 仓库或者实现免密登录远程服务器。这篇文章会介绍一些关于ssh的细节。 非对称加密 使用非对称加密算法（比如RSA…","fields":{"slug":"/ssh/"},"frontmatter":{"date":"February 01, 2022","title":"ssh介绍","description":"哪怕是最常见的技术，也可以多了解一些"}},{"excerpt":"日常开发学习过程中，会遇到一些奇怪的问题。这些问题的背后要么隐藏了作者对工程项目的理解，要么由于历史原因久久搁置成为我们使用的绊脚石。 React:Add a “module” entry in package.json to export ES2015 version of…","fields":{"slug":"/watching-issues/"},"frontmatter":{"date":"January 31, 2022","title":"watching-issues.md","description":"从issue中观察学习"}},{"excerpt":"css-in-js是一个 css方案，在react中使用者非常多。喜欢他的人对其称赞不已，讨厌他的人对其嗤之以鼻。关于css-in-js这个技术方案的历史发展和优缺点在前文 已经有分析，本文不做过多讲解，本文将以styled-components探讨一下css-in-js…","fields":{"slug":"/css-in-js-under-the-hood/"},"frontmatter":{"date":"July 12, 2021","title":"css-in-js-under-the-hood","description":"css-in-js 底层到底是如何工作的呢？"}},{"excerpt":"最近在实现一个需求的时候，需要实时获取元素的宽度，写着觉得比较有意思，特此记录思考和分析的过程。 背景 最小的例子如下 在输入框输入内容，在中可以显示内容，在标签中能自动更新 标签的宽度。以下例子均以vue3为例。大部分内容可以兼容vue2，在Vue2中ref…","fields":{"slug":"/get-width-of-element/"},"frontmatter":{"date":"June 27, 2021","title":"动态获取元素的宽度","description":"简单的动态获取元素的宽度的需求会有哪些坑点呢？"}},{"excerpt":"看了下vueuse的实现，开拓了一下视野，不仅仅是学习到了composition api封装的模式，更有代码组织上的学问。 前提 首先我们需要思考的composition api和普通的函数有什么区别。区别在于在composition api…","fields":{"slug":"/patterns-in-composition-api/"},"frontmatter":{"date":"June 22, 2021","title":"Vue Composition Api中常见的几种模式","description":"写composition api的常用套路"}},{"excerpt":"对 vue3的composition api 进行了一些反思和总结，总结了一些经验和实践，特此记录。 逻辑抽离与关注点分离 Vue2 使用 options api，根据 类型将逻辑分成了 , , ,  几个部分，在vue…","fields":{"slug":"/rethink-vue-composition/"},"frontmatter":{"date":"June 14, 2021","title":"Rethink vue composition api","description":"对于composition api的一些反思"}},{"excerpt":"Composition api 提供了新的逻辑抽象的方式，在代码的组织，抽离方面对于开发者要求更高了，本文将探讨，如果将参数传递给 Composition api.  背景 以一个请求数据的composition api为例。 使用时，比如这里，我们使用 useFetch…","fields":{"slug":"/dynamic-params-in-composition-api/"},"frontmatter":{"date":"June 13, 2021","title":"composition api 的参数传递","description":"vue composition api 的参数传递有什么讲究？"}},{"excerpt":"React 和 Vue 都使用vdom 来描述ui，这使得基于他们来实现跨平台就显得十分简单。比如React 使用react-dom将ui渲染到 dom上，使用react-native 将 ui渲染到 android / iOS 这样的原生平台上。Vue…","fields":{"slug":"/renderer/"},"frontmatter":{"date":"June 12, 2021","title":"renderer","description":"介绍一下vue 和 react 的renderer设计"}},{"excerpt":"esbuild esbuild 的watch模式实现是一个优化版的轮训。不用os的 fs是因为 portability(这里存疑？) 具体是怎么优化的呢？ Watch mode in esbuild is implemented using polling instead of…","fields":{"slug":"/broken-ideas/"},"frontmatter":{"date":"June 04, 2021","title":"一些有意思的点滴","description":"遇到有意思的事情，就记录下来吧～"}},{"excerpt":"typescript的类型运算能够让我们在写代码时设计出更加完善，健壮的类型。这方面的教程不多，官网文档例子也有限，正好看到 社区中有一个 项目type-challenges ，可以帮助我们学习ts的类型，本文就算是记录针对该教程的一个学习过程吧。 实现Pick…","fields":{"slug":"/type-challenges/"},"frontmatter":{"date":"May 28, 2021","title":"type-challenges","description":"类型体操64式"}},{"excerpt":"最近stackblitz 提的WebContainers 着实在技术圈里火了一把，总结下来就是，这是一个在线的编辑器，WebContainers 技术可以做到在浏览器端执行node，可以直接利用Chrome DevTools调试，启动也比在本地快。stackblitz和code…","fields":{"slug":"/security-in-language/"},"frontmatter":{"date":"May 28, 2021","title":"从stackblitz看security","description":"我们说的安全，到底是什么？"}},{"excerpt":"看到标题，很多人要说了， 不就原生支持的  嘛，还有啥好封装的？或者说你要封装还不如直接使用 async , await 不就行了。如果你是这么想的，那么请继续阅读下去。  笔者最近在设计 API…","fields":{"slug":"/promise-in-another-way/"},"frontmatter":{"date":"May 15, 2021","title":"封装Promise，让他更好用一些","description":"最简单的api也能封装！"}},{"excerpt":"Vue与React有一个很大的区别在于组件更新的策略 ，Vue能够根据组件定义自行判断需不需要执行组件的更新而React在不进行任何优化的前提是，是无脑进行更新。如果开发者需要控制更新时机，可以通过自行的定义shouldComponentUpdate, React.memo…","fields":{"slug":"/component-update-in-vue3/"},"frontmatter":{"date":"March 07, 2021","title":"Vue3中的组件更新","description":"没有类似React的shouldComponentUpdate钩子，Vue是如何做到自动更新的？"}},{"excerpt":"近日，在写一个Vue3相关的东西，在使用watch的时候，遇到了一些问题，在查看文档已经翻看源码之后，对watch的实现和机制有了更深的理解，此处做一个记录。 背景是，想在vue3中想把给dom绑定事件抽离成一个 composition api…","fields":{"slug":"/watch-in-vue3/"},"frontmatter":{"date":"March 07, 2021","title":"Vue3中的watch执行时机","description":"watch的回调到底是在什么时候执行的"}},{"excerpt":"css-in-js 是web开发中css的一个解决方案，本文将做此方案进行简要的分析。 关注点分离 关注点分离（separation of concerns…","fields":{"slug":"/css-in-js-introduction/"},"frontmatter":{"date":"January 25, 2021","title":"css-in-js 介绍","description":"为什么css-in-js 能这么🔥呢？"}},{"excerpt":"vue2的代码中将vdom渲染成dom的方法封装在内部，如果要将vue渲染到其他一些平台，从代码组织上就很啰嗦。比如mp-vue就是直接从fork了一份vue的代码，然后修改渲染vdom的那部分代码。比如weex因为和vue有合作，所以代码是直接放在vue里的platform…","fields":{"slug":"/vue3-renderer/"},"frontmatter":{"date":"November 14, 2020","title":"vue3 中渲染器api的设计","description":"良好的API设计是将vue接入各种平台的基础"}},{"excerpt":"在webpack配置中输出的配置中，提供了几个占位符号，其中contenthash与chunkhash是令人比较费解的两个。 bundle, module, chunk module module 是最好理解的，我们通常会把webpack 描述为 module bundler…","fields":{"slug":"/chunkhash-contenthash-in-webpack/"},"frontmatter":{"date":"July 24, 2020","title":"webpack 中的contenthash与chunkhash","description":"webpack中的概念一定是不容易记住的，而且不好理解的，🐶🐶🐶"}},{"excerpt":"在Vue中使用slot-scope和render函数都可以做到自定义渲染，其实二者有很多相通之处，本文将通过几个例子来分析slot-scope和render 的灵活应用。 代码背景 本文一个需要实现自定义表格，每列的内容都希望可以自定义渲染，在业务组件business.vue…","fields":{"slug":"/scope-slots-and-render-in-vue/"},"frontmatter":{"date":"July 05, 2020","title":"Vue中的scope slot和render函数","description":"掌握scope slot和render函数，迈向自由编程"}},{"excerpt":"不管是Vue，还是React，key都作为一个特殊属性，那么这个属性到底有什么用呢？本文以vue为例子分析key的作用以及自己的一些思考。 困境 在一些博客中，经常会写到列表渲染要用key来区分不同列表项，而且最好不要用数组的索引作为key…","fields":{"slug":"/key-in-vue/"},"frontmatter":{"date":"July 05, 2020","title":"Vue中的key","description":"无论React还是Vue中，key都是非常重要的一个属性"}},{"excerpt":"package.json是一个JavaScript的项目描述文件，其中main字段是非常重要的一个字段，它描述了程序的入口。本文将分析作为一个模块（不是应用）的main字段。 main vs module main字段是程序的入口，在[npm官网](The main field…","fields":{"slug":"/main-field-in-package-json/"},"frontmatter":{"date":"June 07, 2020","title":"package.json里的main字段","description":"package.json里的main字段，再平常不过了"}},{"excerpt":"Koa是Node应用广泛的后端框架，它的“洋葱”模型被人津津乐道，Koa源码实现也非常简练，那就一起来看下Koa的源码吧。 工程化 npm prune会移除无关的包，所谓无关指的是没有在父包的依赖关系列表中列出的包。参考npm prune wrk是一个http…","fields":{"slug":"/source-code-of-koa/"},"frontmatter":{"date":"May 23, 2020","title":"koa源码解析","description":"简单强大的koa源码，非常值得一读的源码"}},{"excerpt":"背景 web 项目有时候需要更新迭代或者更新项目的配置文件，这时候需要重启 web 服务，然而不能简单粗暴的关机，这样会导致当前接受到的 socket 会处理失败。优雅的关机应该是拒绝新的 socket 连接，等待正在处理的 socket…","fields":{"slug":"/graceful-restart-or-stop/"},"frontmatter":{"date":"April 25, 2020","title":"如何优雅关机重启","description":null}},{"excerpt":"Vue 中的 Portal 技术 在 Vue 项目中，我们使用模板来声明 dom 嵌套关系，然而有时候一些组件需要脱离固定的层级关系，不再受制与层叠上下文，比如说 Modal 和 Dialog 这种组件就希望能够脱离当前模板所在的层叠上下文。 在 Vue…","fields":{"slug":"/portal-in-vue/"},"frontmatter":{"date":"July 27, 2019","title":"Vue中的Portal技术","description":"Portal是将组件渲染到任意位置的一种技术"}},{"excerpt":"package.json中的browser字段 有时候，我们想要写一个能够跑在浏览器上和node上的包，但是由于二者在执行环境上有微弱的区别，比如浏览器上请求数据是用XMLHttpRequest对象，但是node上用的确是http或者https…","fields":{"slug":"/browser-field-in-package-json/"},"frontmatter":{"date":"June 30, 2019","title":"package.json中的browser字段","description":"package.json中的browser字段，听过用过吗？"}},{"excerpt":"Redis是一个支持网络，可基于内存亦可持久化的日志型、key-value数据存储系统。支持string，list，set，zset(有序集合)，hash。而且操作都是原子性的（要么成功执行，要么完全不执行）。redis数据都是缓存在内存中的，和memcached…","fields":{"slug":"/intro-to-redis/"},"frontmatter":{"date":"December 06, 2017","title":"Redis 初体验","description":"初学者的角度看Redis"}},{"excerpt":"Promise一些细节 Promise是抽象异步处理对象以及对其进行各种操作的组件。\n在Promise之前我们一直使用回调的形式来处理异步。 这种方式的问题在于回调函数的参数基于约定，而且容易出现回调地狱问题。 Promise对象创建 promise…","fields":{"slug":"/more-about-promise/"},"frontmatter":{"date":"December 03, 2017","title":"Promise一些细节","description":"最常用的API，往往藏着你不知道的秘密"}},{"excerpt":"构建 web 应用 前面几章介绍了一些 Node 的基本知识，这里开始介绍如何用 Node 去构建一个 web 应用。包括请求的解析，数据上传，路由解析，中间件的知识，这些知识是 Node 中 HTTP…","fields":{"slug":"/building-web-application/"},"frontmatter":{"date":"December 02, 2017","title":"构建web应用","description":"使用Node.js 来构建应用是一件非常简单的事，本文在前文的基础上介绍如何在Node环境下构建一个web应用"}},{"excerpt":"在web领域，大多数编程语言需要专门的web服务器作为容器，如ASP、ASP.NET需要IIS作为服务器，PHP需要搭载Apache或Nginx环境，JSP需要Tomcat服务器等，但是Node只需要几行代码就可以构建服务器，无需额外的容器。Node提供net、dgram…","fields":{"slug":"/net-in-nodejs/"},"frontmatter":{"date":"November 25, 2017","title":"Node中的网络编程","description":"网络编程是一门语言经典的话题"}},{"excerpt":"Node不同于前端JavaScript，在前端只需做一些简单的字符串和DOM操作即可。而在后端，需要处理大量的图片，文件，以及操作数据库。需要处理大量的二进制数据，Buffer也就应运而生了。 Buffer结构 模块结构 Buffer模块性能部分由c…","fields":{"slug":"/buffer-in-nodejs/"},"frontmatter":{"date":"November 24, 2017","title":"Node中的Buffer","description":"Buffer是什么？"}},{"excerpt":"V8 V8的内存限制 在Node中通过JavaScript使用内存会发现只能使用部分内存（64位系统下约为1.4GB，32位系统下约为0.7GB）。这种限制下，会导致Node无法直接操作大内存对象。造成这种限制的主要原因在于Node基于V8构建，所以在Node…","fields":{"slug":"/memory-in-nodejs/"},"frontmatter":{"date":"November 24, 2017","title":"Node中的内存控制","description":"介绍一下内存控制的算法机制"}},{"excerpt":"异步初探 setTimeout和setInterval 如果把setInterval的事时间设置为0，cpu就会频繁运行吗？答案是否定的，实验证明，浏览器上大约200次/秒，Node环境下，大约为1000次/秒。然而，如果是while循环的话，浏览器上大约触发频率是40…","fields":{"slug":"/async-in-javascript/"},"frontmatter":{"date":"November 22, 2017","title":"你真的了解JavaScript中的异步吗","description":"异步是JavaScript中的一个重要概念，本文将对js中的异步编程做一个简单的介绍。"}},{"excerpt":"函数式编程 高阶函数：JavaScript…","fields":{"slug":"/async-programming/"},"frontmatter":{"date":"November 18, 2017","title":"异步编程","description":null}},{"excerpt":"提到Node，我们很容易想到异步IO，但是什么是异步IO？为什么要用异步IO？异步IO执行流程是怎么样的？你真的了解Node中的异步IO吗？ 导读 异步IO其实并不是一个新鲜的概念，它早就存在于操作系统中，但是由于使用异步的编程模式不太好理解，以至于一些高级语言典型如PHP…","fields":{"slug":"/asyncio-in-node/"},"frontmatter":{"date":"November 17, 2017","title":"NodeJS异步IO","description":"Node 引以为傲的单线程异步IO模型"}},{"excerpt":"CommonJS 规范 出发点 JavaScript 存在缺陷，导致在后端其无法用来开发大型应用 没有模块系统 标准库少。文件操作，I/O 流都没有标准 API 没有标准接口。与 web 服务器或者数据库的接口 缺乏包管理 具体规范 模块引用 require…","fields":{"slug":"/module-in-nodejs/"},"frontmatter":{"date":"November 16, 2017","title":"NodeJS模块机制","description":"给一个原本没有模块规范的语言引入模块，一定不是一个简单的事"}}]}},"pageContext":{}},"staticQueryHashes":["2841359383","3257411868"]}