{"componentChunkName":"component---src-templates-blog-post-js","path":"/type-challenges/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"409b357f-30cf-5de4-b49b-fab8d1c1101e","excerpt":"typescript的类型运算能够让我们在写代码时设计出更加完善，健壮的类型。这方面的教程不多，官网文档例子也有限，正好看到 社区中有一个 项目type-challenges ，可以帮助我们学习ts的类型，本文就算是记录针对该教程的一个学习过程吧。 实现Pick 原题 答案 Tuple to Object…","html":"<p>typescript的类型运算能够让我们在写代码时设计出更加完善，健壮的类型。这方面的教程不多，官网文档例子也有限，正好看到 社区中有一个 项目<a href=\"https://github.com/type-challenges/type-challenges\">type-challenges</a> ，可以帮助我们学习ts的类型，本文就算是记录针对该教程的一个学习过程吧。<!-- more --></p>\n<h3>实现Pick</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/4-easy-pick/README.zh-CN.md\">原题</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TodoPreview</span> <span class=\"token operator\">=</span> MyPick<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'completed'</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'Clean room'</span><span class=\"token punctuation\">,</span>\n    completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// solution</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyPick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h2>Tuple to Object</h2>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/11-easy-tuple-to-object/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tesla'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model 3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model X'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model Y'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span>\n\n<span class=\"token keyword\">const</span> result<span class=\"token operator\">:</span> TupleToObject<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> tuple<span class=\"token operator\">></span> <span class=\"token comment\">// expected { tesla: 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'}</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TupleToObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">readonly</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">P</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里要注意几个点。</p>\n<ol>\n<li>只有 <code class=\"language-text\">as const</code>修饰的数组才能获得值类型，否则，tuple的类型就是 <code class=\"language-text\">string[]</code>了</li>\n<li><code class=\"language-text\">extends</code> 后面可以加 readonly来修饰</li>\n<li>要记住 in 后面只能是一个 联合类型，P就是单个的类型</li>\n</ol>\n<h3>First Of Array</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/14-easy-first/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">arr1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">arr2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">head1</span> <span class=\"token operator\">=</span> First<span class=\"token operator\">&lt;</span>arr1<span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 'a'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">head2</span> <span class=\"token operator\">=</span> First<span class=\"token operator\">&lt;</span>arr2<span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 3</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">First<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>也可以使用infer来实现</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">First<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">infer</span></span> <span class=\"token constant\">U</span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<p>上面这两种解法，如果是一个空数组，则返回 <code class=\"language-text\">undefined</code>, 这一点题目里没有描述清楚，有时候或许也需要返回 <code class=\"language-text\">never</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">First<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Length of Tuple</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/18-easy-tuple-length/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">tesla</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tesla'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model 3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model X'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model Y'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">spaceX</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'FALCON 9'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FALCON HEAVY'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DRAGON'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'STARSHIP'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'HUMAN SPACEFLIGHT'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">teslaLength</span> <span class=\"token operator\">=</span> Length<span class=\"token operator\">&lt;</span>tesla<span class=\"token operator\">></span>  <span class=\"token comment\">// expected 4</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">spaceXLength</span> <span class=\"token operator\">=</span> Length<span class=\"token operator\">&lt;</span>spaceX<span class=\"token operator\">></span> <span class=\"token comment\">// expected 5</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Length<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>如果不在泛型上约束为数组的话，需要在结果处进行约束</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Length<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token string\">'length'</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'lenght'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<h3>Exclude</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/43-easy-exclude/README.md\">题目</a></p>\n<p>先看下Exclude的<a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#excludetype-excludedunion\">功能</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n     \n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n     \n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyExclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span></code></pre></div>\n<p><strong>extends这里的这个用法要留意下</strong></p>\n<h3>Awaited</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/189-easy-awaited/README.md\">题目</a></p>\n<p>If we have a type which is wrapped type like Promise. How we can get a type which is inside the wrapped type? For example if we have <code class=\"language-text\">Promise&lt;ExampleType></code> how to get ExampleType?</p>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AwaitedType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<h3>If</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/268-easy-if/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> If<span class=\"token operator\">&lt;</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token operator\">></span>  <span class=\"token comment\">// expected to be 'a'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> If<span class=\"token operator\">&lt;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 'b'</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">If<span class=\"token operator\">&lt;</span><span class=\"token constant\">V</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">F</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">V</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token constant\">F</span></code></pre></div>\n<p>这里要知道的是值类型，为true的时候，应该<code class=\"language-text\">v extends true</code> 这样写</p>\n<h3>Concat</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/533-easy-concat/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> Concat<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be [1, 2]</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">ype Concat<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><strong>这里<code class=\"language-text\">...</code>这个用法要学习一下</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">Q</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">Q</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Includes</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/898-easy-includes/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">isPillarMen</span> <span class=\"token operator\">=</span> Includes<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Kars'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Esidisi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wamuu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Santana'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dio'</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be `false`</span>\n</code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Includes<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></code></pre></div>\n<h3>ReturnType</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/2-medium-return-type/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">a</span> <span class=\"token operator\">=</span> MyReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> fn<span class=\"token operator\">></span> <span class=\"token comment\">// should be \"1 | 2\"</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">F</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<h3>实现Omit</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/3-medium-omit/README.zh-CN.md\">原题</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TodoPreview</span> <span class=\"token operator\">=</span> MyOmit<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">'description'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'title'</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>答案</p>\n<p>可以使用ts内置的Exclude工具</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyOmit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>另外，typescript4.1 提供了一个新能力<a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#key-remapping-in-mapped-types\">Key Remapping in Mapped Types</a>。根据文档</p>\n<blockquote>\n<p>lots of the time you want to be able to create new keys, or filter out keys, based on the inputs</p>\n</blockquote>\n<p>Filter out keys by producing never.</p>\n<p>因此这题还可以这样写</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyOmit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">K</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在issue里还看到了这种<a href=\"https://github.com/type-challenges/type-challenges/issues/1461\">解法</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyOmit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">infer</span></span> <span class=\"token constant\">R</span>\n        <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span>\n        <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">K</span></span>\n            <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span>\n            <span class=\"token operator\">:</span> <span class=\"token constant\">R</span>\n        <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n    <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n    <span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在ts类型运算中，不能用 &#x26;&#x26; ，只能用三元.</p>\n<h3>Readonly</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/8-medium-readonly-2/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> MyReadonly<span class=\"token operator\">&lt;</span>Todo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Hey\"</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> <span class=\"token string\">\"foobar\"</span>\n<span class=\"token punctuation\">}</span>\n\ntodo<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token comment\">// Error: cannot reassign a readonly property</span>\ntodo<span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> <span class=\"token string\">\"barFoo\"</span> <span class=\"token comment\">// Error: cannot reassign a readonly property</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>DeepReadonly</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/9-medium-deep-readonly/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">X</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n  x<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> \n    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    b<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span>\n  <span class=\"token punctuation\">}</span>\n  y<span class=\"token operator\">:</span> <span class=\"token string\">'hey'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Expected</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">readonly</span> x<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">readonly</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">readonly</span> b<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">readonly</span> y<span class=\"token operator\">:</span> <span class=\"token string\">'hey'</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">X</span><span class=\"token operator\">></span> <span class=\"token comment\">// should be same as `Expected`</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">?</span> DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果要考虑，更多类型的话，比如函数</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> \n\t<span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Function</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> \n    <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> \n      <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">:</span> DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span></code></pre></div>\n<h3>Tuple to Union</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/10-medium-tuple-to-union/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type Arr = ['1', '2', '3']\n\nconst a: TupleToUnion&lt;Arr> // expected to be '1' | '2' | '3'</code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TupleToUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Chainable Options</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/12-medium-chainable-options/README.md\">题目</a></p>\n<p>链式调用的类型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> Chainable\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> config\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type-challenges'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'Hello World'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// expect the type of result to be:</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Result</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Chainable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  option<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Key <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span><span class=\"token punctuation\">,</span> Value<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> Key<span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> Value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Chainable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> Key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Value<span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>结果要记住参数的类型，只有使用泛型。</p>\n<p>这里要知道的一个点是，option函数的第一个参数要作为值类型，这种应该使用泛型类型才能获取到值类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">foo</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token comment\">// good</span>\n  <span class=\"token comment\">// return [key + 'hello', value] // type error </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Last of Array</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/15-medium-last/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">arr1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">arr2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">tail1</span> <span class=\"token operator\">=</span> Last<span class=\"token operator\">&lt;</span>arr1<span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 'c'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">tail2</span> <span class=\"token operator\">=</span> Last<span class=\"token operator\">&lt;</span>arr2<span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 1</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Last<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<p>这里不能像之前那个求第一个元素那样了，因为最后一个是需要运算的，而类型是不支持值运算的</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// wrong</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Last<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Pop</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/16-medium-pop/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">arr1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">arr2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">re1</span> <span class=\"token operator\">=</span> Pop<span class=\"token operator\">&lt;</span>arr1<span class=\"token operator\">></span> <span class=\"token comment\">// expected to be ['a', 'b', 'c']</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">re2</span> <span class=\"token operator\">=</span> Pop<span class=\"token operator\">&lt;</span>arr2<span class=\"token operator\">></span> <span class=\"token comment\">// expected to be [3, 2]</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pop<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">infer</span> _<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<p>还可以使用Shift, Push, Unshift</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Shift<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Push<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Unshift<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">V</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>都很简单，这里要注意的就是要牢记，值类型。还有类型的 <code class=\"language-text\">...</code> 运算</p>\n<h3>Promise.all</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/20-medium-promise-all/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> promise1 <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> promise2 <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// expected to be `Promise&lt;[number, number, string]>`</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span> promise2<span class=\"token punctuation\">,</span> promise3<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">PromiseAll</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token keyword\">readonly</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre></div>\n<p>这里的知识点是<a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#variadic-tuple-types\">Variadic Tuple Types</a>，Array 或者 Tuple 可以使用扩展运算符。</p>\n<h3>Type Lookup</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/62-medium-type-lookup/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'cat'</span>\n  breeds<span class=\"token operator\">:</span> <span class=\"token string\">'Abyssinian'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Shorthair'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Curl'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Bengal'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'dog'</span>\n  breeds<span class=\"token operator\">:</span> <span class=\"token string\">'Hound'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Brittany'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Bulldog'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'Boxer'</span>\n  color<span class=\"token operator\">:</span> <span class=\"token string\">'brown'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'white'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'black'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyDogType</span> <span class=\"token operator\">=</span> LookUp<span class=\"token operator\">&lt;</span>Cat <span class=\"token operator\">|</span> Dog<span class=\"token punctuation\">,</span> <span class=\"token string\">'dog'</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be `Dog`</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">LookUp<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里要多理解一下</p>\n<h3>Trim Left</h3>\n<p><a href=\"\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">trimed</span> <span class=\"token operator\">=</span> TrimLeft<span class=\"token operator\">&lt;</span><span class=\"token string\">'  Hello World  '</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 'Hello World  '</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TrimLeft<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">' '</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">?</span> TrimLeft<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span></code></pre></div>\n<p>这里就是利用ts的<a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-3.html\">template string type</a></p>\n<p>可以参考这个例子</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">foo</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">V</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">*</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">V</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">*</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">test</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x1 <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*hello*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// \"hello\"</span>\n    <span class=\"token keyword\">let</span> x2 <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**hello**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// \"*hello*\"</span>\n    <span class=\"token keyword\">let</span> x3 <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">*</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">*</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// string</span>\n    <span class=\"token keyword\">let</span> x4 <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">*</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">*</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// `${number}`</span>\n    <span class=\"token keyword\">let</span> x5 <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">*</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">*</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"true\" | \"false\"</span>\n    <span class=\"token keyword\">let</span> x6 <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">*</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>t<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">*</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// `${T}`</span>\n    <span class=\"token keyword\">let</span> x7 <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">**</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">**</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// `*${string}*`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Trim</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/108-medium-trim/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">trimed</span> <span class=\"token operator\">=</span> Trim<span class=\"token operator\">&lt;</span><span class=\"token string\">'  Hello World  '</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 'Hello World'</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Trim<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n  <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">' '</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> Trim<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">' '</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token operator\">?</span> Trim<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">:</span> <span class=\"token constant\">T</span></code></pre></div>\n<p>这里用到 这个 extends后面的 空字符类型要用<code class=\"language-text\">${ }</code> ，不能直接用<code class=\"language-text\">' '</code>,  是因为这里是作为值类型？</p>\n<h3>Capitalize</h3>\n<p><a href=\"\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">capitalized</span> <span class=\"token operator\">=</span> Capitalized<span class=\"token operator\">&lt;</span><span class=\"token string\">'hello world'</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 'Hello world'</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Capitalized<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Uppercase<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<p>这里要注意的是 这里将字母大写，类型的运算，可以直接借助<code class=\"language-text\">Uppercase&lt;></code>进行泛型运算。</p>\n<p>这里，我就很好奇，这种 <code class=\"language-text\">Uppercase</code> 这种和值类型相关的转换的泛型的实现是怎么实现的。一看好家伙</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Convert string literal type to uppercase\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Uppercase<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> intrinsic<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Convert string literal type to lowercase\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Lowercase<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> intrinsic<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Convert first character of string literal type to uppercase\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Capitalize<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> intrinsic<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Convert first character of string literal type to lowercase\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Uncapitalize<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> intrinsic<span class=\"token punctuation\">;</span></code></pre></div>\n<p>貌似都不是通过正常手段算出来的，是编译器内部提供了实现逻辑。参考 <a href=\"https://github.com/microsoft/TypeScript/pull/40580\">pr</a>。原文中有这么一段话</p>\n<blockquote>\n<p>Note that the <code class=\"language-text\">Capitalize&lt;S></code> and <code class=\"language-text\">Uncapitalize&lt;S></code> intrinsic types could fairly easily be implemented in pure TypeScript using conditional types and template literal type inference, but it isn’t practical to do so at the moment because we use ESLint which hasn’t yet been updated to support template literal types (though we expect that to happen soon).</p>\n</blockquote>\n<p>目前不使用纯typescript 条件运算的原因竟然是因为eslint不支持 template literal types. 然后我就在想这个应该怎么实现呢？</p>\n<p><a href=\"https://dev.to/svehla/typescript-transform-case-strings-450b\">How to UPPER_CASE to camelCase in raw Typescript generics</a>提供了一些思路。大致就是利用 一个map</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">LetterMap</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span>\n  d<span class=\"token operator\">:</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span>\n  e<span class=\"token operator\">:</span> <span class=\"token string\">'E'</span>\n  <span class=\"token comment\">// ...</span>\n  h<span class=\"token operator\">:</span> <span class=\"token string\">'H'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 将首字母大写</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Upper<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">S</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> LetterMap\n    <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>LetterMap<span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token operator\">:</span>  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">S</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">S</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">Q</span></span> <span class=\"token operator\">=</span> Upper<span class=\"token operator\">&lt;</span><span class=\"token string\">'hello'</span><span class=\"token operator\">></span> <span class=\"token comment\">// Q is expected as 'Hello'</span></code></pre></div>\n<p>emm，很妙🐱</p>\n<h3>Replace</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/116-medium-replace/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">replaced</span> <span class=\"token operator\">=</span> Replace<span class=\"token operator\">&lt;</span><span class=\"token string\">'types are fun!'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fun'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'awesome'</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 'types are awesome!'</span>\n</code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Replace<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FROM</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TO</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">BEGIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">FROM</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">END</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BEGIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">TO</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">END</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">S</span></code></pre></div>\n<p>一遍就写过了，没什么好说的，理解思路吧。</p>\n<h3>ReplaceAll</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/119-medium-replaceall/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">replaced</span> <span class=\"token operator\">=</span> ReplaceAll<span class=\"token operator\">&lt;</span><span class=\"token string\">'t y p e s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 'types'</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReplaceAll<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FROM</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TO</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">BEGIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">FROM</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">END</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BEGIN</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">TO</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ReplaceAll<span class=\"token operator\">&lt;</span><span class=\"token constant\">END</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FROM</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TO</span><span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">S</span></code></pre></div>\n<p>和上面这个Replace的区别在于，递归处理。</p>\n<h3>Append Argument</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/191-medium-append-argument/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> AppendArgument<span class=\"token operator\">&lt;</span>Fn<span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> \n<span class=\"token comment\">// expected be (a: number, b: string, x: boolean) => number</span>\n</code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AppendArgument<span class=\"token operator\">&lt;</span>Fn <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Fn <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<p>也可以直接用Parameters, ReturnType</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AppendArgument<span class=\"token operator\">&lt;</span>Fn <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>Parameters<span class=\"token operator\">&lt;</span>Fn<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ReturnType<span class=\"token operator\">&lt;</span>Fn<span class=\"token operator\">></span></code></pre></div>\n<p>这里不能这样写</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AppendArgument<span class=\"token operator\">&lt;</span>Fn <span class=\"token keyword\">extends</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>Parameters<span class=\"token operator\">&lt;</span>Fn<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ReturnType<span class=\"token operator\">&lt;</span>Fn<span class=\"token operator\">></span></code></pre></div>\n<p>会报错，Function doesn’t satisfy (…args: any) => any,</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Parameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Function类型不能复制给这俩。可以看这个 <a href=\"https://github.com/microsoft/TypeScript/issues/34540\">issue</a></p>\n<p>原因是ts没有运行时，Function并不一定能执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nf <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token builtin\">Function</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// crashes</span></code></pre></div>\n<h3>Permutation</h3>\n<p><a href=\"\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">perm</span> <span class=\"token operator\">=</span> Permutation<span class=\"token operator\">&lt;</span><span class=\"token string\">'A'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'B'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'C'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['A', 'B', 'C'] | ['A', 'C', 'B'] | ['B', 'A', 'C'] | ['B', 'C', 'A'] | ['C', 'A', 'B'] | ['C', 'B', 'A']</span>\n</code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Permutation<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">never</span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">never</span></span>\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">:</span> Permutation<span class=\"token operator\">&lt;</span>Exclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>这个有点难，要多理解一下</p>\n<h3>Length of String</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/298-medium-length-of-string/README.md\">题目</a></p>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">LengthOfString<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span>\n<span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>string<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> LengthOfString<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>没写出来，这个实现太秀了。将字符串递归转化为元组，使用递归泛型存储变量。</p>\n<h3>Flatten</h3>\n<p><a href=\"\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">flatten</span> <span class=\"token operator\">=</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n <span class=\"token comment\">// [1, 2, 3, 4, 5]</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Flatten<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> Rest<span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">?</span> First <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>Flatten<span class=\"token operator\">&lt;</span>First<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Flatten<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Flatten<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">K</span></code></pre></div>\n<p>也可以利用泛型变量的递归</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Flatten<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> Rest<span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">?</span> First <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">?</span> Flatten<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>Rest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">:</span> Flatten<span class=\"token operator\">&lt;</span>Rest<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> First<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span></code></pre></div>\n<p>将结果存到泛型变量上时，只有在符合要求的时候才会往泛型上存。最后将泛型返回。</p>\n<h3>Append to object</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/527-medium-append-to-object/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Test</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> AppendToObject<span class=\"token operator\">&lt;</span>Test<span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be { id: '1', value: 4 }</span>\n</code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AppendToObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">K</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">V</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意这里，这里不能</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AppendToObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">V</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Absolute</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/529-medium-absolute/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Test</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> Absolute<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// expected to be \"100\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Absolute<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> bigint<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">T</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">T</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>可以利用模板字符串, 只有模板字符串有 值类型 模板。</p>\n<h3>String to Union</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/531-medium-string-to-union/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Test</span> <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> StringToUnion<span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// expected to be \"1\" | \"2\" | \"3\"</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">StringToUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> First<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> First <span class=\"token operator\">|</span> StringToUnion<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span>\n  <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<p>可使用递归泛型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">StringToUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> First<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> StringToUnion<span class=\"token operator\">&lt;</span>Rest<span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span> <span class=\"token operator\">|</span> First<span class=\"token operator\">></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">R</span></code></pre></div>\n<p>和前面那道 Flatten是一样的思路.</p>\n<h3>Merge</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/599-medium-merge/README.md\">题目</a></p>\n<p>Merge two types into a new type. Keys of the second type overrides keys of the first type.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  addr<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">Q</span></span> <span class=\"token operator\">=</span> Merged<span class=\"token operator\">&lt;</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T2</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected { name: string, age: string, addr: string }</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Merged<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">K</span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>CamelCase</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/610-medium-camelcase/README.md\">题目</a></p>\n<p><code class=\"language-text\">for-bar-baz</code> -> <code class=\"language-text\">forBarBaz</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CamelCaseFirst<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> First<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Uppercase<span class=\"token operator\">&lt;</span>First<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">S</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CamelCased<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> First<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>First<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>CamelCased<span class=\"token operator\">&lt;</span>CamelCaseFirst<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">>></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> First<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>First<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>CamelCased<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token operator\">:</span> <span class=\"token constant\">S</span></code></pre></div>\n<p>这个也比较简单, 这里我们手写了一个 <code class=\"language-text\">CamelCaseFirst</code>, 其实可以用<code class=\"language-text\">Capitalize</code>替代</p>\n<h3>KebabCase</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/612-medium-kebabcase/README.md\">题目</a></p>\n<p><code class=\"language-text\">FooBarBaz</code> -> <code class=\"language-text\">for-bar-baz</code></p>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">KebabCase<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> First<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> Rest <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">F</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token operator\">?</span> <span class=\"token constant\">F</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Capitalize<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span></span>\n      <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Lowercase<span class=\"token operator\">&lt;</span>First<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Lowercase<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>KebabCase<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Lowercase<span class=\"token operator\">&lt;</span>First<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>KebabCase<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Lowercase<span class=\"token operator\">&lt;</span>First<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>KebabCase<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">S</span></code></pre></div>\n<p>或者</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">KebabCase<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> First<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> Rest <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Uncapitalize<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span></span>\n    <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Lowercase<span class=\"token operator\">&lt;</span>First<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>KebabCase<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Lowercase<span class=\"token operator\">&lt;</span>First<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>KebabCase<span class=\"token operator\">&lt;</span>Uncapitalize<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">>></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">:</span> Uncapitalize<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span></code></pre></div>\n<p>前一个是一位 <code class=\"language-text\">Capitalize</code> 只能处理一个字符。所以多了一个 三元表达式用来获取第一个字符。其实 <code class=\"language-text\">Capitalize</code> 可以接收一个字符串。所以有了第二个答案。</p>\n<p>第二个答案条件是 <code class=\"language-text\">extends Uncapitalize&lt;Rest></code> ，条件不符合才加<code class=\"language-text\">-</code>, 这里不能反过来写，因为 Rest = <code class=\"language-text\">''</code>的话，可以满足 <code class=\"language-text\">Uncapitalize</code> 和<code class=\"language-text\">Capitalize</code> ，但是是不需要加 <code class=\"language-text\">-</code>的。如果换一下顺序会导致多一个 <code class=\"language-text\">-</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">S</span></span> <span class=\"token operator\">=</span> KebabCase<span class=\"token operator\">&lt;</span><span class=\"token string\">'ForBarBaz'</span><span class=\"token operator\">></span> <span class=\"token comment\">// for-bar-baz-</span>\n\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">KebabCase<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> First<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> Rest<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> Rest <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Capitalize<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span></span>\n    <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Lowercase<span class=\"token operator\">&lt;</span>First<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>KebabCase<span class=\"token operator\">&lt;</span>Uncapitalize<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">>></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Lowercase<span class=\"token operator\">&lt;</span>First<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>KebabCase<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">:</span> Uncapitalize<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span></code></pre></div>\n<h3>AnyOf</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/949-medium-anyof/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Sample1</span> <span class=\"token operator\">=</span> AnyOf<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// expected to be true.</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Sample2</span> <span class=\"token operator\">=</span> AnyOf<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// expected to be false.</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AnyOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> Rest<span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">?</span> First <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">|</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> AnyOf<span class=\"token operator\">&lt;</span>Rest<span class=\"token operator\">></span>\n    <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>这里千万要注意描述对象要用 <code class=\"language-text\">Record&lt;string, any></code>,或者 <code class=\"language-text\">{[key: string]: any }</code> 不能用 <code class=\"language-text\">{}</code>  ,这里应该是容易被误判断为空interface</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">S</span></span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>也可以使用索引</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">AnyOf<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>k<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">|</span> <span class=\"token string\">''</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></code></pre></div>\n<h3>IsNever</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/1042-medium-isnever/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token builtin\">never</span><span class=\"token operator\">></span>  <span class=\"token comment\">// expected to be true</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token keyword\">undefined</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">E</span></span> <span class=\"token operator\">=</span> IsNever<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be false</span></code></pre></div>\n<p>答案</p>\n<p>这题，我一开始是这么写的</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IsNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">never</span></span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></code></pre></div>\n<p>发现 <code class=\"language-text\">IsNever&lt;never></code>一直都是<code class=\"language-text\">never</code> 。然而 下面</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">S</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">never</span></span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> </code></pre></div>\n<p>S就是 true，难道是泛型参数不能传 never？？</p>\n<p>后面看了一下别人的解答，发现，都是 不直接 用never来判断</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IsNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">IsNever<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">never</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></code></pre></div>\n<h2>IsUnion</h2>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/1097-medium-isunion/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">case1</span> <span class=\"token operator\">=</span> IsUnion<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>  <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">case2</span> <span class=\"token operator\">=</span> IsUnion<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">|</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span>  <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">case3</span> <span class=\"token operator\">=</span> IsUnion<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token operator\">|</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>  <span class=\"token comment\">// false</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IsUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span>\n   <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">B</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">]</span>\n     <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n     <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n   <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里利用了 typescript的 <a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\">distributive conditional types</a>来区分联合类型</p>\n<p>这里要多研究 ～～</p>\n<h3>ReplaceKeys</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/1130-medium-replacekeys/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NodeA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'A'</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  flag<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NodeB</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'B'</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  flag<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NodeC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'C'</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  flag<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Nodes</span> <span class=\"token operator\">=</span> NodeA <span class=\"token operator\">|</span> NodeB <span class=\"token operator\">|</span> NodeC\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReplacedNodes</span> <span class=\"token operator\">=</span> ReplaceKeys<span class=\"token operator\">&lt;</span>Nodes<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'flag'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> flag<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token comment\">// {type: 'A', name: number, flag: string} | {type: 'B', id: number, flag: string} | {type: 'C', name: number, flag: string} // would replace name from string to number, replace flag from number to string.</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReplacedNotExistKeys</span> <span class=\"token operator\">=</span> ReplaceKeys<span class=\"token operator\">&lt;</span>Nodes<span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>aa<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token comment\">// {type: 'A', name: never} | NodeB | {type: 'C', name: never} // would replace name to never</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReplaceKeys<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Key<span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span> <span class=\"token keyword\">extends</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">>></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Key</span>\n    <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">V</span>\n      <span class=\"token operator\">?</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n    <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Remove Index Signature</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/1367-medium-remove-index-signature/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">typ\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> RemoveIndexSignature<span class=\"token operator\">&lt;</span>Foo<span class=\"token operator\">></span>  <span class=\"token comment\">// expected { foo(): void }</span></code></pre></div>\n<h3>Simple Vue</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/6-hard-simple-vue/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">SimpleVue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      firstname<span class=\"token operator\">:</span> <span class=\"token string\">'Type'</span><span class=\"token punctuation\">,</span>\n      lastname<span class=\"token operator\">:</span> <span class=\"token string\">'Challenges'</span><span class=\"token punctuation\">,</span>\n      amount<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fullname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstname <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastname\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fullname<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>题目分析，这里我们要定义<code class=\"language-text\">SimpleVue</code> 的类型，data 返回一个对象，这个对象之后可以在this中访问到。computed是一个对象函数，挂在this上，在其中可以访问data的返回值。methods 是一个对象函数可以访问data和computed里的数据</p>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Computed<span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">SimpleVue</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">D</span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token constant\">C</span> <span class=\"token operator\">&amp;</span> ThisType<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token constant\">M</span> <span class=\"token operator\">&amp;</span> ThisType<span class=\"token operator\">&lt;</span>Computed<span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">D</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></code></pre></div>\n<p>这里的 有几个点要注意，这种参数相互约束的一般都是使用泛型来实现的。</p>\n<p><code class=\"language-text\">ThisType</code> 这个用法要熟悉，可以看官网的<a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#thistypetype\">文档</a></p>\n<p><code class=\"language-text\">ThisType</code> 并不会返回一个什么类型，而是用来给上下文this定义类型。比入上文的例子中，在computed中可以使用this访问到data的返回值类型。在methods中可以访问到自己本身以及computed，data里的属性。这里很重要的一点是 methods中使用 自己既是结果类型又是This的类型。在methods中，还可以访问到computed里的属性，由于computed里是 key => function 的形式，我们要将其转化为. key => value type的形式。</p>\n<p>官网这个例子就很典型</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ObjectDescriptor<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">;</span>\n  methods<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">M</span> <span class=\"token operator\">&amp;</span> ThisType<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type of 'this' in methods is D &amp; M</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">makeObject</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>desc<span class=\"token operator\">:</span> ObjectDescriptor<span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">D</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">M</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> data<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">.</span>data <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> methods<span class=\"token operator\">:</span> object <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">.</span>methods <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>data<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>methods <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">D</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">makeObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span>dx<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> dy<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> dx<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Strongly typed this</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+=</span> dy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Strongly typed this</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Currying 1</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/17-hard-currying-1/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n<span class=\"token keyword\">const</span> three <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> curriedAdd <span class=\"token operator\">=</span> <span class=\"token function\">Currying</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> five <span class=\"token operator\">=</span> <span class=\"token function\">curriedAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>给 <code class=\"language-text\">Currying</code> 函数加类型，每次只能加一个参数</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CurryFn<span class=\"token operator\">&lt;</span>Args<span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Args <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> First<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> Rest<span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> First<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> CurryFn<span class=\"token operator\">&lt;</span>Rest<span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">R</span>\n  \n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> Currying<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n  CurryFn<span class=\"token operator\">&lt;</span>Parameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span></code></pre></div>\n<p>还可以这样写</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Unshift<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">U</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Head<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Curried<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span></span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Head<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">R</span>\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Head<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Curried<span class=\"token operator\">&lt;</span>Unshift<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">Currying</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">R</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Curried<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token operator\">></span></code></pre></div>\n<p>其实这里有几个点值得学习，其一是讲泛型简单化，其二是 <code class=\"language-text\">T['length'] extends 1</code>这种用法，第二种用法比第一种用法少递归了一步。</p>\n<h3>Union to Intersection</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/55-hard-union-to-intersection/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I</span></span> <span class=\"token operator\">=</span> Union2Intersection<span class=\"token operator\">&lt;</span><span class=\"token string\">'foo'</span> <span class=\"token operator\">|</span> <span class=\"token number\">42</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be 'foo' &amp; 42 &amp; true</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Union2Intersections<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">any</span></span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">I</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">I</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>\n<p>这个题目没啥思路，</p>\n<p>这里， <code class=\"language-text\">U extends any ? (arg: U) =>any :never</code>的结果是两个 函数类型的 联合类型，但是最后这一句，怎么就 变成交叉类型了。</p>\n<p>在<a href=\"https://github.com/type-challenges/type-challenges/issues/775\">issue</a>里可以看到解释</p>\n<ol>\n<li><code class=\"language-text\">U extends infer R ? (x: R) => any : never</code> will generate the union of functions like <code class=\"language-text\">(x: 'foo') => any | (x: 42) => any | (x: true) => any</code>.</li>\n<li><code class=\"language-text\">extends (x: infer V) => any ? V : never</code> will find the function that is superset of above union. The function that satisfy the condition is that <code class=\"language-text\">(x: 'foo' &amp; 42 &amp; true) => any</code></li>\n<li>you get the answer. It is the type of the argument of obtained function.</li>\n</ol>\n<p>Em，就很有意思</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SuperSet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">V</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T4</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> bar<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T5</span></span> <span class=\"token operator\">=</span> SuperSet<span class=\"token operator\">&lt;</span><span class=\"token constant\">T4</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>                               <span class=\"token comment\">// T5:     { foo: string; } | { bar: string; }</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T6</span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T4</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">V</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// T6:     { foo: string; } &amp; { bar: string; }</span></code></pre></div>\n<p>好家伙</p>\n<h3>Get Required</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/57-hard-get-required/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">I</span></span> <span class=\"token operator\">=</span> GetRequired<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> bar<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token comment\">// expected to be { foo: number }</span></code></pre></div>\n<p>答案</p>\n<p>利用后面的 <code class=\"language-text\">RequiredKeys</code>就很容易实现了</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">GetRequired<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> RequiredKeys<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Required keys</h3>\n<p><a href=\"https://github.com/type-challenges/type-challenges/blob/master/questions/89-hard-required-keys/README.md\">题目</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">=</span> RequiredKeys<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> bar<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected to be “foo”</span></code></pre></div>\n<p>答案</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">RequiredKeys<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Record<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里一定要注意</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">RequiredKeys<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Record<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RequiredKeys<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">K</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面两种写法，都会使得结果 结果 多一个 <code class=\"language-text\">undefined</code>, 因为有非必填项</p>\n<p>其实 除了keyof 还可以使用另一种形式</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">RequiredKeys<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">infer</span></span> <span class=\"token constant\">K</span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span>\n    <span class=\"token operator\">?</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span>\n      <span class=\"token operator\">?</span> <span class=\"token constant\">K</span>\n      <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n    <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n  <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span></code></pre></div>","frontmatter":{"title":"type-challenges","date":"May 28, 2021","description":"类型体操64式"}},"previous":{"fields":{"slug":"/security-in-language/"},"frontmatter":{"title":"从stackblitz看security"}},"next":{"fields":{"slug":"/broken-ideas/"},"frontmatter":{"title":"一些有意思的点滴"}}},"pageContext":{"id":"409b357f-30cf-5de4-b49b-fab8d1c1101e","previousPostId":"36c96ca8-0c8c-5903-a31d-c603ce15b434","nextPostId":"d849f754-3110-55ed-a7f6-c314896754e5"}},"staticQueryHashes":["2841359383","3257411868"]}