{"componentChunkName":"component---src-templates-blog-post-js","path":"/unreliable-type-in-typescript/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"337e35cc-9494-5ab0-8663-94a003e6b806","excerpt":"在ts中经常会遇到一些未知的无法控制的类型，比如说从一个接口中获取数据的时候，返回的数据类型是没法控制的。比如如下代码 result 现在是 any 类型，这就导致了在 then 函数中所有的代码都失去了类型保护。那有没有什么办法可以解决这种问题呢 直接指定 如上诉代码所示，既然result 是 any…","html":"<p>在ts中经常会遇到一些未知的无法控制的类型，比如说从一个接口中获取数据的时候，返回的数据类型是没法控制的。比如如下代码</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/somthing'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// result type here is any</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>result 现在是 any 类型，这就导致了在 then 函数中所有的代码都失去了类型保护。那有没有什么办法可以解决这种问题呢</p>\n<h2>直接指定</h2>\n<p>如上诉代码所示，既然result 是 any 类型，那么我们给他指定一个类型不就行了</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DataFromApi</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\tid<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/something'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">:</span> DataFromApi<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// result type here is DataFromApi</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>通过这种方式可以给result 变量加上类型。如果你觉得这种方式不够优雅，你还可以封装一个 请求方法，将类型通过 泛型传递过去。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">myFetch</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">DataFromApi</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\tid<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token generic-function\"><span class=\"token function\">myFetch</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>DataFromApi<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'/something'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// result type here is DataFromApi</span>\n\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>有的读者会有疑问，接口来的数据经常变化，那我是不是每次接口一变，就要去把接口类型改了和实际接口数据完全对齐呢？笔者认为，这是没有必要的，因为ts的类型只是编译时的约束，表达的是你期望他是什么类型，只有符合这个结构的数据才能让你的代码畅通无阻，所以这里的类型其实只要定义业务中需要的字段就可以了，没有必要完全对着接口真正的返回值来定义。</p>\n<p>前面说到这种方式的类型完全是编译时的类型，即使代码编译、类型检查没有错误，实际运行的时候也不一定没有错误，比如万一接口返回的数据没有name字段，业务代码就会报错，也就是说这种方式是没有运行时保护的</p>\n<h2>使用zod</h2>\n<p><a href=\"https://github.com/colinhacks/zod\">zod</a> 是一个 ts-first 的 schema 验证器，用zod来实现上面的功能。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> z <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'zod'</span>\n\n<span class=\"token keyword\">const</span> Data <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tid<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tname<span class=\"token operator\">:</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DataType</span> <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Data<span class=\"token operator\">></span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/something'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// now data is typed</span>\n\t\t<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> Data<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>可以看到我们定义了一个 返回结构的schema叫Data，在拿到接口返回的数据result 之后，我们使用 <code class=\"language-text\">Data.parse(result)</code> 就可以得到一个有 类型的 data 变量，任何不符合 schema 的 result 都会在parse时抛错，这就给代码加上了运行时的保护了，只有符合结构的的返回值才会执行后续的代码。</p>\n<p>这里笔者把zood实现的逻辑用ts简易的实现了一遍，主要是类型定义的部分</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">namespace</span> zood <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">TZoodString</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ZoodString'</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">TZoodNumber</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ZoodNumber'</span>\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">TZoodBoolean</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ZoodBoolean'</span>\n\t\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ZoodSchema</span> <span class=\"token punctuation\">{</span>\n\t\ttype<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IZoodString</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ZoodSchema</span> <span class=\"token punctuation\">{</span>\n\t\ttype<span class=\"token operator\">:</span> TZoodString\n\t\tlength<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\t\trule<span class=\"token operator\">?</span><span class=\"token operator\">:</span> RegExp\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IZoodNumber</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ZoodSchema</span> <span class=\"token punctuation\">{</span>\n\t\ttype<span class=\"token operator\">:</span> TZoodNumber\n\t\tmin<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\t\tmax<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\t\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IZoodBoolean</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ZoodSchema</span> <span class=\"token punctuation\">{</span>\n\t\ttype<span class=\"token operator\">:</span> TZoodBoolean\n\t\tnot<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">TZoodTypeMap</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tZoodString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\t\tZoodNumber<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\t\tZoodBoolean<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">SchemaType<span class=\"token operator\">&lt;</span>Schema <span class=\"token keyword\">extends</span> ZoodSchema<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Schema<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">type</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> TZoodTypeMap <span class=\"token operator\">?</span> TZoodTypeMap<span class=\"token punctuation\">[</span>Schema<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">type</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">type</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IZoodString<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\ttype<span class=\"token operator\">:</span> <span class=\"token string\">'ZoodString'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IZoodNumber<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\ttype<span class=\"token operator\">:</span> <span class=\"token string\">'ZoodNumber'</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IZoodBoolean <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\ttype<span class=\"token operator\">:</span> <span class=\"token string\">'ZoodBoolean'</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">type</span> <span class=\"token class-name\">ZoodLeteralType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">literal</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> ZoodLeteralType<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\ttype<span class=\"token operator\">:</span> val\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">{</span>\n\t\t\ttype<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">object</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function-variable function\">parse</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// do some check, throw error if not match</span>\n\t\t\t\t<span class=\"token comment\">// 1. check keys</span>\n\t\t\t\t<span class=\"token comment\">// 2. check types</span>\n\t\t\t\t<span class=\"token comment\">// 3. and so on</span>\n\t\t\t\t<span class=\"token keyword\">const</span> finalVal <span class=\"token operator\">=</span> val <span class=\"token keyword\">as</span> Record<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n\t\t\t\t<span class=\"token keyword\">return</span> finalVal <span class=\"token keyword\">as</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> SchemaType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">infer<span class=\"token operator\">&lt;</span>Schema<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Schema <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">parse</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>vals<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> formSchema <span class=\"token operator\">=</span> zood<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\ta<span class=\"token operator\">:</span> zood<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tb<span class=\"token operator\">:</span> zood<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tc<span class=\"token operator\">:</span> zood<span class=\"token punctuation\">.</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tz<span class=\"token operator\">:</span> zood<span class=\"token punctuation\">.</span><span class=\"token function\">literal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// now parsedData is { a: number, b: string, c: boolean, z: null }</span>\n<span class=\"token keyword\">const</span> parseData <span class=\"token operator\">=</span> formSchema<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\ta<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n\tb<span class=\"token operator\">:</span> <span class=\"token string\">'hell'</span><span class=\"token punctuation\">,</span>\n\tc<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  z<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// { a: number, b: string, c: boolean, z: null }</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">DataType</span> <span class=\"token operator\">=</span> zood<span class=\"token punctuation\">.</span>infer<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> formSchema<span class=\"token operator\">></span></code></pre></div>\n<p>不过需要注意的是，这里笔者没有支持链式调用，如果要支持的话， 将<code class=\"language-text\">zood.string</code>作为一个工厂函数返回一个实例就可以了。</p>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=hBk4nV7q6-w\">TypeScript tips and tricks with matt</a></li>\n</ul>","frontmatter":{"title":"如何处理ts中不可靠的类型","date":"July 17, 2022","description":"从接口获取的数据类型应该怎么定义？"}},"previous":{"fields":{"slug":"/vue-bundle/"},"frontmatter":{"title":"vue如何打包分发代码"}},"next":null},"pageContext":{"id":"337e35cc-9494-5ab0-8663-94a003e6b806","previousPostId":"cda5a50a-b9f7-559e-a9d0-ab2c50c57d36","nextPostId":null}},"staticQueryHashes":["2841359383","965855181"]}