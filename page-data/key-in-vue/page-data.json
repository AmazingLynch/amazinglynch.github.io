{"componentChunkName":"component---src-templates-blog-post-js","path":"/key-in-vue/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"0626f4ba-cde1-539f-9d6d-7dc15094cbd9","excerpt":"不管是Vue，还是React，key都作为一个特殊属性，那么这个属性到底有什么用呢？本文以vue为例子分析key的作用以及自己的一些思考。 困境 在一些博客中，经常会写到列表渲染要用key来区分不同列表项，而且最好不要用数组的索引作为key，因为这样会造成一些问题，推荐使用独一无二的id作为key…","html":"<p>不管是Vue，还是React，key都作为一个特殊属性，那么这个属性到底有什么用呢？本文以vue为例子分析key的作用以及自己的一些思考。<!--more--></p>\n<h2>困境</h2>\n<p>在一些博客中，经常会写到列表渲染要用key来区分不同列表项，而且最好不要用数组的索引作为key，因为这样会造成一些问题，推荐使用独一无二的id作为key，可以更加高效的渲染。</p>\n<p>为什么key这个属性会有这些问题和讲究呢？如果违背了，会出现什么问题呢？</p>\n<h2>初识</h2>\n<p>在<a href=\"https://cn.vuejs.org/v2/api/#key\">vue官网文档</a>上说到，说到key是用在Vue的diff算法中，在新旧nodes对比时辨识vnodes，如果不实用key，vue会使用一种最大程度减少动态元素并且尽可能尝试就地修改/复用相同类型元素的算法。使用key时，会基于key的变化重新排列元素顺序。</p>\n<p>这里有几个关键字，diff算法，对比辨识，就地复用/修改，基于key重排。在下面的深入部分将会讲到。</p>\n<h2>深入</h2>\n<p>先看一下代码上下文</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- App.vue --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Child</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(user, index) in users<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user.name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@delete</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>del(index)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>insert<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>insert<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> Child <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/Child.vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"App\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    Child\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"one\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"two\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"three\"</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'four'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- Child.vue --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>{{ name }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleClick<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>del<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>{{ count }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Child\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> String\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> i<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>可以在<a href=\"https://codesandbox.io/s/vue-key-yd5lp\">codesandbox</a>查看具体效果</p>\n<p>之后的讨论只在上面的代码基础上修改Child组件上key的值。</p>\n<p>首先将key绑定为下标索引值。渲染出来是没有毛病的，但是前面我们看到key作用的时间是在diff的时候，当数据发生变化的时候，vnode节点树就会重新生成，之后通过diff找到修改的地方，然后把修改的地方通过dom方法修改（diff算法可以看看<a href=\"https://github.com/vuejs/vue/blob/dev/src/core/vdom/patch.js\">vue源码</a>或者<a href=\"https://github.com/snabbdom/snabbdom\">snabbdom</a>，二者都采用了双端比较的算法，此处不讨论过多细节），所以，可以先可以在input里输入一些文字，这些文字是存在组件内部state的，然后，点击第二个Chlld的删除，此时却发现，只有外部的info显示更新了，而input里面的文字竟然没有更新</p>\n<p><img src=\"https://i.loli.net/2020/07/01/EJarH1Nf9ZL4uWe.png\" alt=\"https://i.loli.net/2020/07/01/EJarH1Nf9ZL4uWe.png\"></p>\n<p>这是为什么呢？让我们回想一下当点击删除的时候发生了什么。首先是数据更新，数据更新之后会触发重新生成vnode，然后进行diff，diff完之后会修改dom。这个diff过程就是key作用的地方，两次的vnode结果大概如下</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 前</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'app'</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'Child'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'one'</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'Child'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'two'</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'Child'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'three'</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'insert'</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 后</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'app'</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'Child'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'one'</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'Child'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'three'</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token string\">'insert'</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在贴一段diff的函数</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">updateChildren</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parentElm<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> removeOnly</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> oldStartIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">let</span> newStartIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">let</span> oldEndIdx <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span>oldEndIdx<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> newEndIdx <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span>newEndIdx<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> oldKeyToIdx<span class=\"token punctuation\">,</span> idxInOld<span class=\"token punctuation\">,</span> vnodeToMove<span class=\"token punctuation\">,</span> refElm\n\n    <span class=\"token comment\">// removeOnly is a special flag used only by &lt;transition-group></span>\n    <span class=\"token comment\">// to ensure removed elements stay in correct relative positions</span>\n    <span class=\"token comment\">// during leaving transitions</span>\n    <span class=\"token keyword\">const</span> canMove <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>removeOnly\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">checkDuplicateKeys</span><span class=\"token punctuation\">(</span>newCh<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>oldStartIdx <span class=\"token operator\">&lt;=</span> oldEndIdx <span class=\"token operator\">&amp;&amp;</span> newStartIdx <span class=\"token operator\">&lt;=</span> newEndIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span> <span class=\"token comment\">// Vnode has been moved left</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">)</span>\n        oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span>\n        newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newEndIdx<span class=\"token punctuation\">)</span>\n        oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n        newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>newEndIdx<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Vnode moved right</span>\n        <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldStartVnode<span class=\"token punctuation\">,</span> newEndVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newEndIdx<span class=\"token punctuation\">)</span>\n        canMove <span class=\"token operator\">&amp;&amp;</span> nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">,</span> nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        oldStartVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>oldStartIdx<span class=\"token punctuation\">]</span>\n        newEndVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>newEndIdx<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Vnode moved left</span>\n        <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>oldEndVnode<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">)</span>\n        canMove <span class=\"token operator\">&amp;&amp;</span> nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> oldEndVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">)</span>\n        oldEndVnode <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>oldEndIdx<span class=\"token punctuation\">]</span>\n        newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>oldKeyToIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> oldKeyToIdx <span class=\"token operator\">=</span> <span class=\"token function\">createKeyToOldIdx</span><span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span>\n        idxInOld <span class=\"token operator\">=</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">?</span> oldKeyToIdx<span class=\"token punctuation\">[</span>newStartVnode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span>\n          <span class=\"token operator\">:</span> <span class=\"token function\">findIdxInOld</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">,</span> oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>idxInOld<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// New element</span>\n          <span class=\"token function\">createElm</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> parentElm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          vnodeToMove <span class=\"token operator\">=</span> oldCh<span class=\"token punctuation\">[</span>idxInOld<span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sameVnode</span><span class=\"token punctuation\">(</span>vnodeToMove<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">patchVnode</span><span class=\"token punctuation\">(</span>vnodeToMove<span class=\"token punctuation\">,</span> newStartVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">)</span>\n            oldCh<span class=\"token punctuation\">[</span>idxInOld<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n            canMove <span class=\"token operator\">&amp;&amp;</span> nodeOps<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> vnodeToMove<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// same key but different element. treat as new element</span>\n            <span class=\"token function\">createElm</span><span class=\"token punctuation\">(</span>newStartVnode<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">,</span> parentElm<span class=\"token punctuation\">,</span> oldStartVnode<span class=\"token punctuation\">.</span>elm<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        newStartVnode <span class=\"token operator\">=</span> newCh<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>newStartIdx<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldStartIdx <span class=\"token operator\">></span> oldEndIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      refElm <span class=\"token operator\">=</span> <span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>newCh<span class=\"token punctuation\">[</span>newEndIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> newCh<span class=\"token punctuation\">[</span>newEndIdx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>elm\n      <span class=\"token function\">addVnodes</span><span class=\"token punctuation\">(</span>parentElm<span class=\"token punctuation\">,</span> refElm<span class=\"token punctuation\">,</span> newCh<span class=\"token punctuation\">,</span> newStartIdx<span class=\"token punctuation\">,</span> newEndIdx<span class=\"token punctuation\">,</span> insertedVnodeQueue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newStartIdx <span class=\"token operator\">></span> newEndIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">removeVnodes</span><span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">,</span> oldStartIdx<span class=\"token punctuation\">,</span> oldEndIdx<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的关键点在于sameVnode的实现，它决定了是复用元素还是根据vnode创建元素。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">sameVnode</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    a<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>\n        a<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">&amp;&amp;</span>\n        a<span class=\"token punctuation\">.</span>isComment <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>isComment <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">isDef</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token function\">sameInputType</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>isAsyncPlaceholder<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n        a<span class=\"token punctuation\">.</span>asyncFactory <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>asyncFactory <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token function\">isUndef</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>asyncFactory<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看到这里，应该可以知道，前后两次vnode的第二个Child节点，由于tag一样，key都是1，所以这里会复用原来的组件实例，然后调用patchVnode去更新，比如这里就是新vnode与旧版的vnode的name不一样，这些将会通过更新来实现。至于为什么input输入框里的内容没有变，原因是Child组件被复用了，input里的内容受到组件内部state的影响，既然组件没有被销毁，那么就说明了state没有被修改，<strong>这种情况的复用和修改一个组件的props效果是一样的，这也就是文档上所说的就地复用/修改</strong>。</p>\n<p>其实还可以通过count来观察到组件是否是新建的实例，每新建一个实例count就会加1，而key为index，删除了第二条元素，发现最后面的count还是之前的2。这说明了这个Child实例就是之前三个user渲染出来的第二项。</p>\n<p>如果key是user.id的话，删除任意一个元素，sameVnode由于key不相等，不会想之前那样简单复用了，而是根据key去找在旧的children里与当前key相等的元素进行复用，找不到就会创建新的实例，这种情况input 和 后面的count都准确渲染了</p>\n<p><img src=\"https://i.loli.net/2020/07/02/AZnW8yIF5qCv2JU.png\" alt=\"https://i.loli.net/2020/07/02/AZnW8yIF5qCv2JU.png\"></p>\n<p>如果不传key，每次sameVnode中比较<code class=\"language-text\">undefined === undefined</code>都是成立的，复用也会出现前面说到的和使用索引作为key一样的问题。</p>\n<p>按照上面的分析，可以很快的分析出插入时候的情况。插入是将第二个删除，插入第四个。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'four'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用索引作为key时，</p>\n<p><img src=\"https://i.loli.net/2020/07/02/TYtBVCvr7DkHEuG.png\" alt=\"https://i.loli.net/2020/07/02/TYtBVCvr7DkHEuG.png\"></p>\n<p>使用user.id作为key时</p>\n<p><img src=\"https://i.loli.net/2020/07/02/rdL29i5n8ywSCHX.png\" alt=\"https://i.loli.net/2020/07/02/rdL29i5n8ywSCHX.png\"></p>\n<p>可以看到这里count增加了，说明是创建了新的实例。</p>","frontmatter":{"title":"Vue中的key","date":"July 05, 2020","description":"无论React还是Vue中，key都是非常重要的一个属性"}},"previous":{"fields":{"slug":"/main-field-in-package-json/"},"frontmatter":{"title":"package.json里的main字段"}},"next":{"fields":{"slug":"/scope-slots-and-render-in-vue/"},"frontmatter":{"title":"Vue中的scope slot和render函数"}}},"pageContext":{"id":"0626f4ba-cde1-539f-9d6d-7dc15094cbd9","previousPostId":"298a27f4-c474-58ed-88e2-c592390ae11c","nextPostId":"bf1e32d0-9a3a-5f1c-b6ea-336b5b32cd45"}},"staticQueryHashes":["2841359383","965855181"]}