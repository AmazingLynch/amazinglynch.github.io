{"componentChunkName":"component---src-templates-blog-post-js","path":"/async-in-javascript/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"1cdd448b-c258-5c72-94cf-f09c259c904f","excerpt":"异步初探 setTimeout和setInterval 如果把setInterval的事时间设置为0，cpu就会频繁运行吗？答案是否定的，实验证明，浏览器上大约200次/秒，Node环境下，大约为1000次/秒。然而，如果是while循环的话，浏览器上大约触发频率是400万次/秒，Node环境下会达到40…","html":"<h2>异步初探</h2>\n<h3>setTimeout和setInterval</h3>\n<p>如果把setInterval的事时间设置为0，cpu就会频繁运行吗？答案是否定的，实验证明，浏览器上大约200次/秒，Node环境下，大约为1000次/秒。然而，如果是while循环的话，浏览器上大约触发频率是400万次/秒，Node环境下会达到400万次/秒。这是因为HTML规范推行的时延/间隔最小值是4毫秒。另外需要注意的是setTimeout和setInterval异步执行也会导致其定时精度不高。</p>\n<!--more-->\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span> <span class=\"token operator\">-</span> start <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>上诉代码原本想要500毫秒之后执行函数的，然而由于setTimout和setInterval的异步特性，需要等到JavaScript代码执行完之后才能执行，所以这里会在while循环出卡住1000毫秒</p>\n<p>由于setTimeout和setInterval的不精确性，更高精度的计时方案是</p>\n<ul>\n<li>process.nextTick()</li>\n<li>requestAnimationFrame():60帧/秒</li>\n</ul>\n<blockquote>\n<p>和异步一起谈到的是非阻塞。非阻塞强调了Node的高速度。举个例子，异步MySql数据库驱动程序做一个查询可能要一个小时，但是负责发送查询请求的那个函数却能以微秒级速度返回。这对于那些需要快速处理海量需求的场景来说就很棒。</p>\n</blockquote>\n<h2>事件</h2>\n<h3>PubSub模式</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">PubSub <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">handlers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\nPubSub<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">on</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>eventType <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nPubSub<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">emit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eventType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> handlerArgs <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">[</span>eventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>handlerArgs<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Promise/Deferred对象</h2>\n<ul>\n<li>jQuery中的Promise/Deferred:Promise接收三种回调形式：done、fail、和progress。执行Promise对象时，运行的是done回调；拒绝Promise对象时，运行的是fail回调；对处于挂起状态的Deferred对象调用notify时，运行的是progress回调。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> nanowrimoing <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">Deferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> wordGoal <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span>\nnanowrimoing<span class=\"token punctuation\">.</span><span class=\"token function\">progress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">wordCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> percentComplete <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>wordCount <span class=\"token operator\">/</span> wordGoal <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#indicator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span>percentComplete <span class=\"token operator\">+</span> <span class=\"token string\">'% complete'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nnanowrimoing<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#indicator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Good job!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//对数字变化进行响应</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'document'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keypress'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> wordCount <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">s+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>wordCount <span class=\"token operator\">>=</span> wordGoal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nanowrimoing<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    nanowrimoing<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>wordCount<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>准确的说，Deferred是Promise的超集，他比Promise多了一项关键特性：它可以直接使用resolve（执行）和reject（拒绝）来直接触发Deferred对象。纯Promise实例只允许添加多个调用，而且必须由其他什么东西来触发这些调用。</p>\n</blockquote>\n<p>可以通过Deferred对象的promise()方法来生成一个Promise对象，需要注意的是生成的Promise对象只是原Deferred对象一个没有方法的副本。回调绑定在Deferred或者其下辖的Promise对象并无区别。\n每个Deferred对象都含有一个Promise对象，而每个Promise对象都代表一个Deferred对象。有了Deferred对象，就可以控制其状态，而有了纯Promise对象那个，只能读取其状态及附加回调。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> prompDeferred <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">Deferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> prompPromise <span class=\"token operator\">=</span> prompDeferred<span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>理想情况下，所有的异步操作都应该返回Promise对象，但是大多数JavaScript API（浏览器或者Node)都是基于回调函数，而不是Promise对象。在基于回调函数的API中使用Promise对象最直接的方法就是生成一个Deferred对象并传递其触发器函数作为API的回调函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fileReading <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">Deferred</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fileReading<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        fileReading<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>worker对象的多线程</h2>\n<p>多线程技术会有状态共享的难题，但是多线程又能充分利用多颗CPU内核。可以将worker理解为：应用程序的主线程对worker说，去，开一个单独的线程来运行这段代码。worker可以给主线程发送消息（反之亦可），其表现形式是事件队列中运行的回调。简而言之，与不同线程进行交互的方式在于JavaScript中进行I/O操作一模一样。</p>\n<blockquote>\n<p>在操作系统层面：线程和进程有着巨大的区别，同一个进程内的多个线程可以分享状态，而彼此独立的进程之间则不能。</p>\n</blockquote>\n<h3>网页版的worker对象（HTML5）</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//主脚本</span>\n<span class=\"token keyword\">var</span> worder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'boknows.js'</span><span class=\"token punctuation\">)</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//向worker发送数据</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'football'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//boknows.js</span>\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//向主线程发送数据</span>\n    self<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>网页版的worker目标是在不损害DOM响应能力的前提下处理复杂的计算。可以用在解码视频，加密通信，解析网页式编辑器中的文本。\n通常情况下，worker对象会把自己的计算结果发送给主线程，由主线程去更新页面，为什么不直接更新页面呢？这里主要是为了保护JavaScript异步抽象概念。如果worker对象可以改变页面的标记语言，那么最终下场就会和java一样—必须将DOM操控代码封装成互斥量和信号量来避免竞态条件。</p>\n<h3>Node版的worker：cluster</h3>\n<p>Node版的worker对象有cluster.fork()把运行自己的同一个脚本再次加载成一个独立的进程（可以通过cluster.isMaster来检测自己是主进程还是worker对象）,目的在于Node服务器要留出计算资源以保障其主要任务：处理请求。网页版本worker对象会加载一个独立的脚本。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> cluster <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cluster'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cluster<span class=\"token punctuation\">.</span>isMaster<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//分化出worker对象</span>\n    <span class=\"token keyword\">var</span> coreCount <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'os'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cpus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> coreCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cluster<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//绑定death事件</span>\n    cluster<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'death'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">worker</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Worker'</span> <span class=\"token operator\">+</span> worker<span class=\"token punctuation\">.</span>pid <span class=\"token operator\">+</span> <span class=\"token string\">'has died'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//立即死去</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>异步脚本加载</h2>\n<h3>script标签</h3>\n<ul>\n<li>放在head里：如果在head标签里放了大脚本会滞压所有页面的渲染工作，使得用户在脚本加载完毕之前一直处于‘白屏死机‘状态。、</li>\n<li>放在body标签末尾：如果放的是大脚本，会让用户看到毫无生命力的静态页面，原本应该进行客户端渲染的地方却散步者不起作用的空间和空空如也的方框。另外就算不是大教本，这种方式使得浏览器在加载完整个文档之前无法加载这些脚本，这对于那些通过慢速连接传送的大型文档来说是一个瓶颈。</li>\n</ul>\n<p>所以这里要对不同性质的脚本分而治之，那些负责让页面更好看，更好用的脚本应该立即加载，而那些可以待会再加载的脚本可以稍后再加载（async/defer）</p>\n<h4>脚本的三种加载方式</h4>\n<h5>同步加载（阻塞型）</h5>\n<p>脚本的获取和执行是同步的。在此过程中个页面被阻塞，停止解析。但这样如果js中有输出document内容、修改dom、重定向等行为，就会造成页面堵塞。所以一般建议把<code class=\"language-text\">&lt;script></code>标签放在<code class=\"language-text\">&lt;body></code>结尾处，这样尽可能减少页面阻塞。</p>\n<h5>延迟加载（defer）</h5>\n<p>脚本的获取是异步的，执行时同步的。脚本加载不阻塞页面解析，脚本在获取完之后并不立即执行，而是等到DOMready之后才开始执行。延迟加载就是为了解决这个问题，将JS切分成许多模块，页面初始化时只加载需要立即执行的JS，然后其它JS的加载延迟到第一次需要用到的时候再加载，类似图片的延迟加载。</p>\n<h5>异步脚本（async）</h5>\n<p>脚本的获取是异步的，执行是同步的。和defer的不同点在于脚本获取之后会立即执行，这就会造成脚本的执行顺序和页面上脚本的排放顺序不一样，可能会造成脚本依赖问题</p>\n<p><img src=\"https://i.loli.net/2017/11/23/5a16d71516884.jpg\" alt=\"script.jpg\"></p>","frontmatter":{"title":"你真的了解JavaScript中的异步吗","date":"November 22, 2017","description":"异步是JavaScript中的一个重要概念，本文将对js中的异步编程做一个简单的介绍。"}},"previous":{"fields":{"slug":"/async-programming/"},"frontmatter":{"title":"异步编程"}},"next":{"fields":{"slug":"/memory-in-nodejs/"},"frontmatter":{"title":"Node中的内存控制"}}},"pageContext":{"id":"1cdd448b-c258-5c72-94cf-f09c259c904f","previousPostId":"c7228dbe-9d9e-562e-a5c1-33e58632a5d4","nextPostId":"3a111e06-c0e1-50eb-953b-67ee91718946"}},"staticQueryHashes":["2841359383","3257411868"]}