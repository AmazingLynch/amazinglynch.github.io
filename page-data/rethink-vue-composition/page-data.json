{"componentChunkName":"component---src-templates-blog-post-js","path":"/rethink-vue-composition/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"79ca5199-ef96-5240-95b5-308984ad1f80","excerpt":"对 vue3的composition api 进行了一些反思和总结，总结了一些经验和实践，特此记录。 逻辑抽离与关注点分离 Vue2 使用 options api，根据 类型将逻辑分成了 , , ,  几个部分，在vue…","html":"<p>对 vue3的composition api 进行了一些反思和总结，总结了一些经验和实践，特此记录。<!--more--></p>\n<h2>逻辑抽离与关注点分离</h2>\n<p>Vue2 使用 options api，根据 类型将逻辑分成了 <code class=\"language-text\">data</code>, <code class=\"language-text\">computed</code>, <code class=\"language-text\">watch</code>, <code class=\"language-text\">methods</code> 几个部分，在vue官网中对这种方式进行了反思，这种根据类型 组织代码的方式在 逻辑比较复杂的时候会变得很难理解，经常会为了一个逻辑不得不翻看大段代码。composition api 就是为了解决这么一个问题，将 一个 逻辑关注点(logic concern)组织到一个 composition api中，在一个 composition api中可以有 <code class=\"language-text\">data</code>, <code class=\"language-text\">computed</code>, <code class=\"language-text\">watch</code>, <code class=\"language-text\">methods</code>。可以参考<a href=\"https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api\">文档</a></p>\n<h3>组合</h3>\n<p>composition api 归根结底还是一个函数，一个composition api 只做一件事，一个复杂的逻辑可以使用多个composition api组合而成。这样可以使得逻辑更加独立，提高复用性，体现专注点分离。</p>\n<p>比如 <a href=\"https://vueuse.org/\">vueuse</a> 中 的 <a href=\"https://vueuse.org/core/useDark/\">useDark</a> 实现了 响应式的 dark mode 以及持久化</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDark<span class=\"token punctuation\">,</span> useToggle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vueuse/core'</span>\n\n<span class=\"token keyword\">const</span> isDark <span class=\"token operator\">=</span> <span class=\"token function\">useDark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> toggleDark <span class=\"token operator\">=</span> <span class=\"token function\">useToggle</span><span class=\"token punctuation\">(</span>isDark<span class=\"token punctuation\">)</span></code></pre></div>\n<p>useDark 实际上内部使用了 <code class=\"language-text\">usePreferredDark</code> 和 <code class=\"language-text\">useStorage</code> ，前者是使用媒体查询来确定是否为dark模式，后者则是实现了数据的持久化。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useDark</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> UseDarkOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    selector <span class=\"token operator\">=</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// css selector for target element applying to</span>\n    attribute <span class=\"token operator\">=</span> <span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// HTML attribute applying the target element</span>\n    valueDark <span class=\"token operator\">=</span> <span class=\"token string\">'dark'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// value applying to the target element when isDark = true</span>\n    valueLight <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// value applying to the target element when isDark = false</span>\n    window <span class=\"token operator\">=</span> defaultWindow<span class=\"token punctuation\">,</span>\n    storage <span class=\"token operator\">=</span> defaultWindow<span class=\"token operator\">?.</span>localStorage<span class=\"token punctuation\">,</span> <span class=\"token comment\">// storage object, </span>\n    storageKey <span class=\"token operator\">=</span> <span class=\"token string\">'vueuse-color-scheme'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// key to persist the data</span>\n    listenToStorageChanges <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options\n\n  <span class=\"token keyword\">const</span> preferredDark <span class=\"token operator\">=</span> <span class=\"token function\">usePreferredDark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> window <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> storageKey <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ColorSchemes<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token generic-function\"><span class=\"token function\">useStorage</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ColorSchemes<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>storageKey<span class=\"token punctuation\">,</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> storage<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> window<span class=\"token punctuation\">,</span> listenToStorageChanges <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> isDark <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">computed</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'auto'</span>\n        <span class=\"token operator\">?</span> preferredDark<span class=\"token punctuation\">.</span>value\n        <span class=\"token operator\">:</span> store<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'dark'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">===</span> preferredDark<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        store<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'auto'</span>\n      <span class=\"token keyword\">else</span>\n        store<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> v <span class=\"token operator\">?</span> <span class=\"token string\">'dark'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'light'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> onChanged <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>onChanged <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> window<span class=\"token operator\">?.</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attribute <span class=\"token operator\">===</span> <span class=\"token string\">'class'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      el<span class=\"token operator\">?.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span>valueDark<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valueLight<span class=\"token punctuation\">)</span>\n        el<span class=\"token operator\">?.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span>valueLight<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> el<span class=\"token operator\">?.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">,</span> v <span class=\"token operator\">?</span> valueDark <span class=\"token operator\">:</span> valueLight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>isDark<span class=\"token punctuation\">,</span> onChanged<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> flush<span class=\"token operator\">:</span> <span class=\"token string\">'post'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">tryOnMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onChanged</span><span class=\"token punctuation\">(</span>isDark<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> isDark\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>可以看到，使用了 <code class=\"language-text\">usePreferredDark</code> 获取到 初始值（按照设计，如果在storage里读不到内容，就会使用 system preferences）。然后使用了 <code class=\"language-text\">useStorage</code> 来从 storage里读取指定key 的值。整个函数返回的是一个 computed value, 在修改它的时候会给target 设置属性。</p>\n<p>接下来看下 <code class=\"language-text\">usePreferredDark</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">usePreferredDark</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ConfigurableWindow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useMediaQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(prefers-color-scheme: dark)'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，这是是调用了 <code class=\"language-text\">useMediaQuery</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Reactive Media Query.\n *\n * @link https://vueuse.org/useMediaQuery\n * @param query\n * @param options\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useMediaQuery</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> ConfigurableWindow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> window <span class=\"token operator\">=</span> defaultWindow <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> mediaQuery <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> matches <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>mediaQuery<span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> MediaQueryListEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    matches<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>matches\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'addEventListener'</span> <span class=\"token keyword\">in</span> mediaQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mediaQuery<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// @ts-expect-error - fallback for Safari &lt; 14 and older browsers</span>\n    mediaQuery<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">tryOnUnmounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'removeEventListener'</span> <span class=\"token keyword\">in</span> mediaQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mediaQuery<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// @ts-expect-error - fallback for Safari &lt; 14 and older browsers</span>\n      mediaQuery<span class=\"token punctuation\">.</span><span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> matches\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 <code class=\"language-text\">useMediaQuery</code> 的实现也很简单，是使用 <code class=\"language-text\">window.matchMedia</code>获取初始值，然后使用事件来处理变化实现响应式的。这也是 将 普通变量转化为响应式变量最常见的一种模式</p>\n<p>接下来看下 <code class=\"language-text\">useStorage</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Reactive LocalStorage/SessionStorage.\n *\n * @link https://vueuse.org/useStorage\n * @param key\n * @param defaultValue\n * @param storage\n * @param options\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useStorage</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token operator\">|</span><span class=\"token builtin\">number</span><span class=\"token operator\">|</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">|</span>object<span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span></span></span> <span class=\"token punctuation\">(</span>\n  key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  defaultValue<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  storage<span class=\"token operator\">:</span> StorageLike <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> defaultWindow<span class=\"token operator\">?.</span>localStorage<span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> StorageOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    flush <span class=\"token operator\">=</span> <span class=\"token string\">'pre'</span><span class=\"token punctuation\">,</span>\n    deep <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    listenToStorageChanges <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    window <span class=\"token operator\">=</span> defaultWindow<span class=\"token punctuation\">,</span>\n    eventFilter<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options\n\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> defaultValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token string\">'any'</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> defaultValue <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span>\n      <span class=\"token operator\">?</span> <span class=\"token string\">'boolean'</span>\n      <span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> defaultValue <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span>\n        <span class=\"token operator\">?</span> <span class=\"token string\">'string'</span>\n        <span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> defaultValue <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span>\n          <span class=\"token operator\">?</span> <span class=\"token string\">'object'</span>\n          <span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token string\">'object'</span>\n            <span class=\"token operator\">:</span> <span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span>\n              <span class=\"token operator\">?</span> <span class=\"token string\">'number'</span>\n              <span class=\"token operator\">:</span> <span class=\"token string\">'any'</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>storage<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> rawValue <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rawValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> defaultValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rawValue <span class=\"token operator\">=</span> Serializers<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span>\n        storage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> rawValue<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      data<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> Serializers<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">,</span> defaultValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window <span class=\"token operator\">&amp;&amp;</span> listenToStorageChanges<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">useEventListener</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">'storage'</span><span class=\"token punctuation\">,</span> read<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">watchWithFilter</span><span class=\"token punctuation\">(</span>\n    data<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>storage<span class=\"token punctuation\">)</span> <span class=\"token comment\">// SSR</span>\n        <span class=\"token keyword\">return</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n          storage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span>\n          storage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> Serializers<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      flush<span class=\"token punctuation\">,</span>\n      deep<span class=\"token punctuation\">,</span>\n      eventFilter<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> data\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Serializers</code> 定义了不同js类型的序列化与反序列化的方法， 这里的模式是一样的，使用 read读区默认值，使用事件监听变化。</p>\n<h3>组织</h3>\n<p>composition api 是一个函数，有输入，输出，从 options api转过来的开发者一定会有这样的一个疑问？到底要怎么样拆分呢？有一些变量需要多个逻辑块共用，这种情况应该怎么处理呢？</p>\n<p>这里，引用 antfu在 vue conf 的一个结论: <strong>在setup 中，我们建立输入和输出的连接</strong>。这句话要多理解。</p>\n<h2>函数的参数</h2>\n<p>Composition api 归根结底是函数，函数是可以接收参数的，有时候这个参数是不会变的，有时候是需要考虑参数的变化的。</p>\n<h3>不考虑参数变化</h3>\n<p>如果不考虑参数变化的话，一般传入的是 初始值或者一些配置化的参数（比如useBreakpoints）。</p>\n<p>比如前面提到过的 <code class=\"language-text\">useStorage</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useStorage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vueuse/core'</span>\n\n<span class=\"token comment\">// bind object</span>\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useStorage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-store'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> hello<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span> greeting<span class=\"token operator\">:</span> <span class=\"token string\">'Hello'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// bind boolean</span>\n<span class=\"token keyword\">const</span> flag <span class=\"token operator\">=</span> <span class=\"token function\">useStorage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-flag'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns Ref&lt;boolean></span>\n\n<span class=\"token comment\">// bind number</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useStorage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-count'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns Ref&lt;number></span>\n\n<span class=\"token comment\">// bind string with SessionStorage</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">useStorage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'some-string-id'</span><span class=\"token punctuation\">,</span> sessionStorage<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns Ref&lt;string></span>\n\n<span class=\"token comment\">// delete data from storage</span>\nstate<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></code></pre></div>\n<p>这种情况下一般会返回一个响应式的变量</p>\n<h3>考虑参数变化</h3>\n<p>有时候，传给composition api 的参数是变化的，这就要求composition api 内部能够处理这种变化。总结一下有以下几个场景</p>\n<h4>传递一个<code class=\"language-text\">ref</code></h4>\n<p>在已经有一个ref 变量的情况下，直接将ref 变量传递给 composition api, 可以直接修改外部变。这里以 <code class=\"language-text\">useTitle</code>为例。<code class=\"language-text\">useTitle</code> 可以接收一个字符串 或者一个ref 作为参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Reactive document title.\n *\n * @link https://vueuse.org/useTitle\n * @param newTitle\n * @param options\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useTitle</span><span class=\"token punctuation\">(</span>\n  newTitle<span class=\"token operator\">:</span> MaybeRef<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> document <span class=\"token operator\">=</span> defaultDocument <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ConfigurableDocument <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>newTitle <span class=\"token operator\">??</span> document<span class=\"token operator\">?.</span>title <span class=\"token operator\">??</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n    title<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> t <span class=\"token operator\">!==</span> o <span class=\"token operator\">&amp;&amp;</span> document<span class=\"token punctuation\">)</span>\n        document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> t\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> immediate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> title\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 这里的参数类型是 <code class=\"language-text\">MaybeRef&lt;string | null | undefined></code> ，<code class=\"language-text\">MaybeRef</code> 的声明如下</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MybeRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> ComputedRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></code></pre></div>\n<p>在 <code class=\"language-text\">useTitle</code> 中，会根据 函数参数定义一个 新的 Ref。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>newTitle <span class=\"token operator\">??</span> document<span class=\"token operator\">?.</span>title <span class=\"token operator\">??</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这行代码 内容非常丰富，由于 newTitle可能为null，如果为null的情况下，就会从 <code class=\"language-text\">document.title</code> 上取。如果 newTitle 不是null，如果newTitle是 <code class=\"language-text\">string</code> 的话，就会创建一个 初始值为 newTitle 的<code class=\"language-text\">ref</code>，如果newTitle 是 <code class=\"language-text\">Ref&lt;string></code>的话，title 与 newTitle 是一样的。</p>\n<p>这得益于 <code class=\"language-text\">ref</code> 的实现，如果传入的参数是一个 <code class=\"language-text\">Ref</code> 的话，就会直接返回。这一点在源码中可以看出</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span> shallow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRef</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> rawValue\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RefImpl</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">,</span> shallow<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>传递一个函数</h4>\n<p>在一些简单的情况下，可以通过传递一个函数来实现动态参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/user/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>实现上</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>getUrl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> isPending <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tisPending<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\tdata<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\t\terror<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>_data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\tdata<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> _data\n\t\t\t\tisPending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\terror<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> err\n\t\t\t\tisPending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tdata<span class=\"token punctuation\">,</span>\n\t\terror<span class=\"token punctuation\">,</span>\n\t\tisPending\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n但是这种只适合于少量参数的情况，实际上 vueuse的 <span class=\"token punctuation\">[</span>useFetch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>vueuse<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>core<span class=\"token operator\">/</span>usefetch<span class=\"token operator\">/</span><span class=\"token punctuation\">)</span>还是使用的 传递ref 变量的形式。\n\n​<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`typescript\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://my-api.com/user/1'</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> refetch<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>函数的返回值</h2>\n<h4>返回响应式变量</h4>\n<p>前文举例的大多数都是这种格式，此处不再举例。</p>\n<h4>返回创建响应式变量的方法</h4>\n<p>典型的如 <code class=\"language-text\">useBreakpoints</code></p>\n<p>使用方式如下</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useBreakpoints <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vueuse/core'</span>\n\n<span class=\"token keyword\">const</span> breakpoints <span class=\"token operator\">=</span> <span class=\"token function\">useBreakpoints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  tablet<span class=\"token operator\">:</span> <span class=\"token number\">640</span><span class=\"token punctuation\">,</span>\n  laptop<span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n  desktop<span class=\"token operator\">:</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> laptop <span class=\"token operator\">=</span> breakpoints<span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laptop'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desktop'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// reactive</span></code></pre></div>\n<p>这里，<code class=\"language-text\">useBreakpoints</code>其实只是一个普通的函数，利用闭包 返回了 一些 工具方法，这些工具方法会得到 响应式变量。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Reactively viewport breakpoints\n *\n * @link https://vueuse.org/useBreakpoints\n * @param options\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useBreakpoints</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>breakpoints<span class=\"token operator\">:</span> Breakpoints<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> ConfigurableWindow <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> delta<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> breakpoints<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delta <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n      v <span class=\"token operator\">=</span> <span class=\"token function\">increaseWithUnit</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> v <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span>\n      v <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span>\n\n    <span class=\"token keyword\">return</span> v\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> window <span class=\"token operator\">=</span> defaultWindow <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>matches\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">greater</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">useMediaQuery</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(min-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">smaller</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">useMediaQuery</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(max-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">between</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">useMediaQuery</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(min-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) and (max-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">isGreater</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(min-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">isSmaller</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(max-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">isInBetween</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(min-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) and (max-width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>即返回响应式变量，又返回工具方法</h4>\n<p>典型的比如 <a href=\"https://vueuse.org/core/useFetch/\">useFetch</a></p>\n<p>请求数据不仅需要url，还要指定请求方法，还需要制定request 的content-type，这些参数如果以函数参数的形式传入，会让api变得臃肿不堪。vueuse使用了链式调用的方式来设置各个参数，看起来非常优雅。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Request with default config</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isFetching<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Request will be sent with GET method and data will be parsed as JSON</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Request will be sent with POST method and data will be parsed as text</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Or set the method using the options</span>\n\n<span class=\"token comment\">// Request will be sent with GET method and data will be parsed as blob</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> refetch<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">useFetch</code> 的实现也不难</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useFetch</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> MaybeRef<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UseFetchReturn<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> supportsAbort <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> AbortController <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n\n  <span class=\"token keyword\">let</span> fetchOptions<span class=\"token operator\">:</span> RequestInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> options<span class=\"token operator\">:</span> UseFetchOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> immediate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> refetch<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 默认配置</span>\n  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span> <span class=\"token keyword\">as</span> DataType<span class=\"token punctuation\">,</span>\n    payload<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span>\n    payloadType<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span> <span class=\"token keyword\">as</span> PayloadType<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token comment\">// 处理多个参数</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFetchOptions</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>options<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n      fetchOptions <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFetchOptions</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>options<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    fetch <span class=\"token operator\">=</span> defaultWindow<span class=\"token operator\">?.</span>fetch<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options\n\n  <span class=\"token comment\">// 定义响应式变量</span>\n  <span class=\"token keyword\">const</span> isFinished <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> isFetching <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> aborted <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> statusCode <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">shallowRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Response <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">shallowRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 取消相关</span>\n  <span class=\"token keyword\">const</span> canAbort <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> supportsAbort <span class=\"token operator\">&amp;&amp;</span> isFetching<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">let</span> controller<span class=\"token operator\">:</span> AbortController <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">abort</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>supportsAbort <span class=\"token operator\">&amp;&amp;</span> controller<span class=\"token punctuation\">)</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 发出请求的方法</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">execute</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    isFetching<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    isFinished<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    error<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    statusCode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    aborted<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    controller <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>supportsAbort<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      controller<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onabort</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> aborted<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      fetchOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>fetchOptions<span class=\"token punctuation\">,</span>\n        signal<span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> defaultFetchOptions<span class=\"token operator\">:</span> RequestInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> defaultFetchOptions<span class=\"token punctuation\">.</span>headers <span class=\"token keyword\">as</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>payloadType <span class=\"token operator\">===</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        defaultFetchOptions<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span>\n        headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/json'</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        defaultFetchOptions<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>payload <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span>\n        headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>payloadType <span class=\"token operator\">===</span> <span class=\"token string\">'formData'</span>\n          <span class=\"token operator\">?</span> <span class=\"token string\">'multipart/form-data'</span>\n          <span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> isCanceled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">const</span> context<span class=\"token operator\">:</span> BeforeFetchContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> url<span class=\"token operator\">:</span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> fetchOptions<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">cancel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> isCanceled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>beforeFetch<span class=\"token punctuation\">)</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> options<span class=\"token punctuation\">.</span><span class=\"token function\">beforeFetch</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isCanceled <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>fetch<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n        context<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>defaultFetchOptions<span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">...</span>context<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">,</span>\n          headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>defaultFetchOptions<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">...</span>context<span class=\"token punctuation\">.</span>options<span class=\"token operator\">?.</span>headers<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span>fetchResponse<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        \t<span class=\"token comment\">// 修改响应式变量</span>\n          response<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> fetchResponse\n          statusCode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> fetchResponse<span class=\"token punctuation\">.</span>status\n\n          <span class=\"token keyword\">await</span> fetchResponse<span class=\"token punctuation\">[</span>config<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> text <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span>\n\n          <span class=\"token comment\">// see: https://www.tjvantoll.com/2015/09/13/fetch-and-errors/</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fetchResponse<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>fetchResponse<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span>\n\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>fetchResponse<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fetchError<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          error<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> fetchError<span class=\"token punctuation\">.</span>message <span class=\"token operator\">||</span> fetchError<span class=\"token punctuation\">.</span>name\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          isFinished<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n          isFetching<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 处理函数参数ref的变化</span>\n  <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n      <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>refetch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>refetch<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> deep<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> base<span class=\"token operator\">:</span> UseFetchReturnBase<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    isFinished<span class=\"token punctuation\">,</span>\n    statusCode<span class=\"token punctuation\">,</span>\n    response<span class=\"token punctuation\">,</span>\n    error<span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n    isFetching<span class=\"token punctuation\">,</span>\n    canAbort<span class=\"token punctuation\">,</span>\n    aborted<span class=\"token punctuation\">,</span>\n    abort<span class=\"token punctuation\">,</span>\n    execute<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 将数据和链式调用的方法一并放回</span>\n  <span class=\"token keyword\">const</span> shell<span class=\"token operator\">:</span> UseFetchReturn<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>base<span class=\"token punctuation\">,</span>\n\n    get<span class=\"token operator\">:</span> <span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    put<span class=\"token operator\">:</span> <span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'put'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    post<span class=\"token operator\">:</span> <span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">delete</span><span class=\"token operator\">:</span> <span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    json<span class=\"token operator\">:</span> <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    text<span class=\"token operator\">:</span> <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    blob<span class=\"token operator\">:</span> <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    arrayBuffer<span class=\"token operator\">:</span> <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arrayBuffer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    formData<span class=\"token operator\">:</span> <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formData'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setMethod</span><span class=\"token punctuation\">(</span>method<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>payload<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">,</span> payloadType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> PayloadType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>initialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">=</span> method\n        config<span class=\"token punctuation\">.</span>payload <span class=\"token operator\">=</span> payload\n        config<span class=\"token punctuation\">.</span>payloadType <span class=\"token operator\">=</span> payloadType <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> payload <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'text'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'json'</span>\n        <span class=\"token keyword\">return</span> shell <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> DataType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>initialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        config<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token keyword\">type</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">return</span></span> base <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 将请求放入宏任务队列，比链式调用后执行</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>immediate<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>execute<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> shell\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>返回<code class=\"language-text\">cleanup</code> 函数</h4>\n<p>典型地如 <code class=\"language-text\">useEventListener</code> 就返回了解除绑定的函数, 一般用在 使用事件绑定的函数中。</p>\n<p>以 <code class=\"language-text\">onClickOutside</code>为例</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useEventListener</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> target<span class=\"token operator\">:</span> MaybeRef<span class=\"token operator\">&lt;</span>EventTarget<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token keyword\">let</span> event<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token keyword\">let</span> listener<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n  <span class=\"token keyword\">let</span> options<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> args\n    target <span class=\"token operator\">=</span> defaultWindow\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> args\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>target<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> noop\n\n  <span class=\"token keyword\">let</span> cleanup <span class=\"token operator\">=</span> noop\n\n  <span class=\"token keyword\">const</span> stopWatch <span class=\"token operator\">=</span> <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>el<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\n      el<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n\n      <span class=\"token function-variable function\">cleanup</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        el<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n        cleanup <span class=\"token operator\">=</span> noop\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> immediate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> flush<span class=\"token operator\">:</span> <span class=\"token string\">'post'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">stopWatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">tryOnUnmounted</span><span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> stop\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>本文从函数的结构上分析了一下 composition api, 当然composition api还有一些固定的模式可以学习，可以查看下一篇文章。</p>","frontmatter":{"title":"Rethink vue composition api","date":"June 14, 2021","description":"对于composition api的一些反思"}},"previous":{"fields":{"slug":"/dynamic-params-in-composition-api/"},"frontmatter":{"title":"composition api 的参数传递"}},"next":{"fields":{"slug":"/patterns-in-composition-api/"},"frontmatter":{"title":"Vue Composition Api中常见的几种模式"}}},"pageContext":{"id":"79ca5199-ef96-5240-95b5-308984ad1f80","previousPostId":"f0b4a57e-1a36-5d78-a906-ab37f6d1ce6a","nextPostId":"2f028ecb-d072-5f78-ac51-e547e6dc3190"}},"staticQueryHashes":["2841359383","965855181"]}