{"componentChunkName":"component---src-templates-blog-post-js","path":"/watch-in-vue3/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"547be2ec-e3ad-5c1c-9f67-8b50dd1fbb93","excerpt":"近日，在写一个Vue3相关的东西，在使用watch的时候，遇到了一些问题，在查看文档已经翻看源码之后，对watch的实现和机制有了更深的理解，此处做一个记录。 背景是，想在vue3中想把给dom绑定事件抽离成一个 composition api，代码如下 实现非常简单, 传进来一个dom…","html":"<p>近日，在写一个Vue3相关的东西，在使用watch的时候，遇到了一些问题，在查看文档已经翻看源码之后，对watch的实现和机制有了更深的理解，此处做一个记录。</p>\n<!--more-->\n<p>背景是，想在vue3中想把给dom绑定事件抽离成一个 composition api，代码如下</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useEventListener</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> Element <span class=\"token operator\">|</span> window<span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> listener<span class=\"token operator\">:</span> EventListener<span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AddEventListenerOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\ttarget<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\ttarget<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\t\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">onUnmounted</span><span class=\"token punctuation\">(</span>remove<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> stop\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>实现非常简单, 传进来一个dom， 给他绑定事件，然后在onUnmounted的时候把事件卸载了。</p>\n<p>使用时需要把真实dom传递给函数，在vue3中需要在onMounted的时候才能获取到真实dom。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> root<span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span>HTMLElement <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">useEventListener</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\troot\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样就显得很麻烦。</p>\n<p>能不能让useEventListner的el参数支持一下Ref<HTMLElement>， vue支持template ref， 可以使用watch监听ref值的变化（当然也可以根据el的取值类型，决定是否使用声明周期来绑定）。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MaybeRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> ComputedRef<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useEventListener</span><span class=\"token punctuation\">(</span>el<span class=\"token operator\">:</span> MaybeRef<span class=\"token operator\">&lt;</span>EventTarget<span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> listener<span class=\"token operator\">:</span> EventListener<span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AddEventListenerOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n\t<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">cleanup</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">const</span> stopWatch <span class=\"token operator\">=</span> <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>el<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n\n      el<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n\n      <span class=\"token function-variable function\">cleanup</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        el<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n        cleanup <span class=\"token operator\">=</span> noop\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> immediate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">stopWatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">onUnmounted</span><span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>template ref 赋值的时候，会触发watch，在watch的回调中可以给dom绑上事件。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>contentRef<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ref <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> contentRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">useEvnetListener</span><span class=\"token punctuation\">(</span>titleRef<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\tcontentRef\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>上面的代码中，当contentRef被赋值的时候，触发watch，在watch的时候会给dom绑定事件。这一切都挺合理的。</p>\n<p>然而发现，如果一个ref 是绑定在一个 带有v-if的元素上时，切换v-if的值，就会发现，事件没有绑定上去。代码如下</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>show<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>contentRef<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toggle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>change<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> show <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">const</span> contentRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tshow<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>show<span class=\"token punctuation\">.</span>value\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">useEventListener</span><span class=\"token punctuation\">(</span>contentRef<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\tshow<span class=\"token punctuation\">,</span>\n\t\t\tcontentRef<span class=\"token punctuation\">,</span>\n\t\t\ttoggle\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>事件没绑定上去，是不是因为watch 没有监测到呢？于是测试了一下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> show <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">const</span> contentRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tshow<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>show<span class=\"token punctuation\">.</span>value\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>contentRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\tshow<span class=\"token punctuation\">,</span>\n\t\t\tcontentRef<span class=\"token punctuation\">,</span>\n\t\t\ttoggle\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>预计结果如下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">null</span> <span class=\"token comment\">// 第一次</span>\n<span class=\"token comment\">// 切换为显示</span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>content<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token comment\">// 切换为隐藏</span>\n<span class=\"token keyword\">null</span></code></pre></div>\n<p>但是实际情况却不一样，结果如下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">null</span> <span class=\"token comment\">// 第一次</span>\n<span class=\"token comment\">// 切换为显示</span>\n<span class=\"token comment\">// 没有任何打印结果</span>\n<span class=\"token comment\">// 切换为隐藏</span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>content<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n<span class=\"token comment\">// 切换为显示</span>\n<span class=\"token keyword\">null</span>\n<span class=\"token comment\">// 切换为隐藏</span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>content<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span></code></pre></div>\n<p>可以看到实际结果看起来晚了一个“周期”</p>\n<p>这着实让人费解？于是看了下实现</p>\n<p>这里先看下watch的实现吧，以下代码均为与上面用例相关的核心逻辑</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doWatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> immediate<span class=\"token punctuation\">,</span> deep<span class=\"token punctuation\">,</span> flush <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> instance</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 实际getter会根据source的类型有不同的取值</span>\n\t<span class=\"token keyword\">let</span> getter\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function-variable function\">getter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> source\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">let</span> oldValue <span class=\"token operator\">=</span> <span class=\"token constant\">INITIAL_WATCHER_VALUE</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">job</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> newValue <span class=\"token operator\">=</span> <span class=\"token function\">runner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">callWithAsyncErrorHandling</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">WATCH_CALLBACK</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n          newValue<span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// pass undefined as the old value when it's changed for the first time</span>\n          oldValue <span class=\"token operator\">===</span> <span class=\"token constant\">INITIAL_WATCHER_VALUE</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> oldValue<span class=\"token punctuation\">,</span>\n          onInvalidate\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        oldValue <span class=\"token operator\">=</span> newValue\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">let</span> scheduler\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flush <span class=\"token operator\">===</span> <span class=\"token string\">'sync'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    scheduler <span class=\"token operator\">=</span> job\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flush <span class=\"token operator\">===</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">scheduler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">queuePostRenderEffect</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> instance <span class=\"token operator\">&amp;&amp;</span> instance<span class=\"token punctuation\">.</span>suspense<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// default: 'pre'</span>\n    <span class=\"token function-variable function\">scheduler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance <span class=\"token operator\">||</span> instance<span class=\"token punctuation\">.</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">queuePreFlushCb</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// with 'pre' option, the first call must happen before</span>\n        <span class=\"token comment\">// the component is mounted so it is called synchronously.</span>\n        <span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">const</span> runner <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span>getter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">lazy</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    onTrack<span class=\"token punctuation\">,</span>\n    onTrigger<span class=\"token punctuation\">,</span>\n    scheduler\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token comment\">// initial run</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>immediate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      oldValue <span class=\"token operator\">=</span> <span class=\"token function\">runner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到watch的核心就是一个 带有scheduler的effect。当effect依赖的变量发生变化时，scheduler会接管依赖变化之后的逻辑。</p>\n<p>在这个job中会根据flush的值将回调放入不同的队列中去，由于没有指定flush，这里会进入default的逻辑，也就是在未挂载的情况下会直接同步执行job，在已经挂载了的情况下会将回调放到preFlushQueue中。</p>\n<p>那ref是什么时候更新的呢，无论是初次渲染还是更新渲染都会调用patch， 在patch的过程中会设置ref。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> prodEffectOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">scheduler</span><span class=\"token operator\">:</span> queueJob<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">allowRecurse</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\ninstance<span class=\"token punctuation\">.</span>update <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">patch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> prodEffectOptions<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里仍然是一个自定义scheduler的effect，在更新的时候，会调用queueJob。</p>\n<p>vue的调度队列有三个</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> pendingPreFlushCbs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> pendingPostFlushCbs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">queueJob</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">job</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span>\n      <span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>\n        job<span class=\"token punctuation\">,</span>\n        isFlushing <span class=\"token operator\">&amp;&amp;</span> job<span class=\"token punctuation\">.</span>allowRecurse <span class=\"token operator\">?</span> flushIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> flushIndex\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    job <span class=\"token operator\">!==</span> currentPreFlushParentJob\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> pos <span class=\"token operator\">=</span> <span class=\"token function\">findInsertionIndex</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">queueFlush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>就是将任务加入到queue中，然后刷新queue。</p>\n<p>用promise.then把刷新队列任务加入微任务中。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">queueFlush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isFlushing <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isFlushPending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isFlushPending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    currentFlushPromise <span class=\"token operator\">=</span> resolvedPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>flushJobs<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>flushJobs清理所有的queue</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">flushJobs</span><span class=\"token punctuation\">(</span>seen<span class=\"token operator\">?</span><span class=\"token operator\">:</span> CountMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  isFlushPending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  isFlushing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    seen <span class=\"token operator\">=</span> seen <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">flushPreFlushCbs</span><span class=\"token punctuation\">(</span>seen<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Sort queue before flush.</span>\n  <span class=\"token comment\">// This ensures that:</span>\n  <span class=\"token comment\">// 1. Components are updated from parent to child. (because parent is always</span>\n  <span class=\"token comment\">//    created before the child so its render effect will have smaller</span>\n  <span class=\"token comment\">//    priority number)</span>\n  <span class=\"token comment\">// 2. If a component is unmounted during a parent component's update,</span>\n  <span class=\"token comment\">//    its update can be skipped.</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>flushIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> flushIndex <span class=\"token operator\">&lt;</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> flushIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> job <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">[</span>flushIndex<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">checkRecursiveUpdates</span><span class=\"token punctuation\">(</span>seen<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">callWithErrorHandling</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> ErrorCodes<span class=\"token punctuation\">.</span><span class=\"token constant\">SCHEDULER</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    flushIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token function\">flushPostFlushCbs</span><span class=\"token punctuation\">(</span>seen<span class=\"token punctuation\">)</span>\n\n    isFlushing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    currentFlushPromise <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token comment\">// some postFlushCb queued jobs!</span>\n    <span class=\"token comment\">// keep flushing until it drains.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> pendingPostFlushCbs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">flushJobs</span><span class=\"token punctuation\">(</span>seen<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>从上面的代码中可以看到，queue的执行顺序是：</p>\n<ol>\n<li>清理pendingPreFlushQueue</li>\n<li>清理queue</li>\n<li>清理 pendingPostFlushQueue</li>\n</ol>\n<p>到这里，我们就把所有的线路连起来了。可以来分析一下 watch template ref 的整体流程。</p>\n<p>先来看下没有v-if的情况。</p>\n<ol>\n<li>watch immediate, 打印null</li>\n<li>将渲染任务加入到queue中。在微任务的执行时机将所有的任务队列清空，先清理pendingPreFlushQueue,  然后清理queue，在这个过程中会调用patch将vnode 渲染为dom，同时会设置ref的值，当设置了contentRef的时候，触发了watch的更新，也就是1中的scheduler，此时实例还没有渲染完成，所以同步的方式打印出dom。</li>\n</ol>\n<p>再来思考一下带有v-if的清空</p>\n<ol>\n<li>watch immediate, 打印null</li>\n<li>将渲染任务加入到queue中。在微任务的执行时机将所有的任务队列清空，先清理pendingPreFlushQueue,  然后清理queue，在这个过程中会调用patch将vnode 渲染为dom，由于show为false，所以ref的值没有发生变化。</li>\n<li>用户点击将show 变为true，此时会将渲染任务加到queue中，在微任务的执行时机将所有的任务队列清空，先清理pendingPreFlushQueue,  然后清理queue，在这个过程中会调用patch更新dom，由于show为true，所以ref的值是会被设置的，在设置之后，会触发watch effect的scheduler，此时实例已经mounted了，所以会将回调任务放入到 pendingPreFlushQueue中（但此时已经清理过了)，再清空pendingPostFlushQueue。</li>\n<li>将show 变为false，此时会将渲染任务加到queue中，在微任务的执行时机将所有的任务队列清空，先清理pendingPreFlushQueue，此时pendingPreFlushQueue中有步骤2中watch effect scheduler推进来的回调任务，此时watch 的回调函数被执行，打印了dom。  然后清理queue，在这个过程中会调用patch更新dom，由于show为false，所以ref的值会被设置为空，在设置之后，会触发watch effect的scheduler，由于实例已经mounted了，所以会将回调任务放入到 pendingPreFlushQueue中（但此时已经清理过了)。再清空pendingPostFlushQueue。</li>\n</ol>\n<p>所以看起来，如果有v-if 的清空下，ref 监听会慢一拍。</p>\n<p>那如何修复这个问题呢？其实看完上面的分析，应该就能知道了，那就是给watch 加上<code class=\"language-text\">flush: 'post'，</code>这样就能保证能在每次dom更新（设置ref）之后再调用回调。</p>\n<p>其实如果用老一些的vue版本（比如vue3.0.0）的话，不写 <code class=\"language-text\">flush: 'post'</code> 也没有问题，这是因为 vue早期版本watch 的flush默认是post, 在这种情况下，watch的dom ref 是没有问题的，但是之后因为一些其他问题，具体可以看到[issue](<a href=\"https://github.com/vuejs/vue-next/issues/1706#issuecomment-666258948%5C\">https://github.com/vuejs/vue-next/issues/1706#issuecomment-666258948\\</a>) 和<a href=\"https://github.com/vuejs/vue-next/commit/49bb44756fda0a7019c69f2fa6b880d9e41125aa\">commit</a>。</p>","frontmatter":{"title":"Vue3中的watch执行时机","date":"March 07, 2021","description":"watch的回调到底是在什么时候执行的"}},"previous":{"fields":{"slug":"/css-in-js-introduction/"},"frontmatter":{"title":"css-in-js 介绍"}},"next":{"fields":{"slug":"/component-update-in-vue3/"},"frontmatter":{"title":"Vue3中的组件更新"}}},"pageContext":{"id":"547be2ec-e3ad-5c1c-9f67-8b50dd1fbb93","previousPostId":"9a812952-3766-57e5-bdae-6c1b1e877d9a","nextPostId":"d8786538-ef0d-575a-9865-db1ddff367ea"}},"staticQueryHashes":["2841359383","3257411868"]}