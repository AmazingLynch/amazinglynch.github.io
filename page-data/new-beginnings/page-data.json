{"componentChunkName":"component---src-templates-blog-post-js","path":"/new-beginnings/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"f10a8367-8231-5197-9a79-56e0120947ed","excerpt":"React 和 Vue 都使用vdom 来描述ui，这使得基于他们来实现跨平台就显得十分简单。比如React 使用react-dom将ui渲染到 dom上，使用react-native 将 ui渲染到 android / iOS 这样的原生平台上。Vue2的实现中没有将平台相关的逻辑抽离出来，而Vue…","html":"<p>React 和 Vue 都使用vdom 来描述ui，这使得基于他们来实现跨平台就显得十分简单。比如React 使用react-dom将ui渲染到 dom上，使用react-native 将 ui渲染到 android / iOS 这样的原生平台上。<!-- more -->Vue2的实现中没有将平台相关的逻辑抽离出来，而Vue3则将平台无关的代码与平台相关的代码彻底分割开了，可以通过自定义渲染器将Vue3 渲染到任意平台。</p>\n<p>Vue的渲染器 设计，可以看以前的<a href=\"https://colgin.github.io/2020/11/14/vue3-renderer/#more\">文章</a></p>\n<p>React 的渲染器是怎么设计的呢？我们知道 React通过 reconciler 来 决定如何更新host tree，reconciler 决定了是重新生成dom还是在现有内容上做一些修改。</p>\n<p>react-reconciler 有两个工作模式</p>\n<ul>\n<li>mutation mode: 所有的 host instance 都是可以被修改的。react-dom就是这样的</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> view <span class=\"token operator\">=</span> <span class=\"token function\">createView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">updateView</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>persistent mode: 整个host tree都是 immutable的，更新就是重建一棵树</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">view <span class=\"token operator\">=</span> <span class=\"token function\">createView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nview <span class=\"token operator\">=</span> <span class=\"token function\">cloneView</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>一个渲染器包含了两部分内容。</p>\n<ul>\n<li>built-in component: dom 平台的 div, h1, react-native平台的 View, Text</li>\n<li>host config: 与host 相关的一些api，比如创建host instance等</li>\n</ul>\n<p>此处我们仅仅讨论 渲染器的 host config部分。</p>\n<p>在接口上，一个React渲染器只需要实现一个 供 Reconciler 调用的对象接口。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> ReactDOMRenderer <span class=\"token operator\">=</span> <span class=\"token function\">Reconciler</span><span class=\"token punctuation\">(</span>ReactDOMHostConfig<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这个 ReactDOMHostConfig 就是一系列 与平台相关的 基础接口。在这里<a href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js\">react</a>中可以看到完整的。</p>\n<p>比如下面这个例子就实现了一个简单的dom 渲染器</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> ReactReconciler <span class=\"token keyword\">from</span> <span class=\"token string\">'react-reconciler'</span>\n\n<span class=\"token function\">ReactReconciler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// hostConfig</span>\n\t<span class=\"token literal-property property\">supportsMutation</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// mutation mode</span>\n\t\n\t<span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> rootContainerInstance<span class=\"token punctuation\">,</span> hostContext<span class=\"token punctuation\">,</span> internalInstanceHandle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 这里的type就是原生dom了，组件的处理已经在react 被处理完了</span>\n\t\t<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// 简单处理</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token string\">'alt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'className'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'href'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'target'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> el<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// react 是平台无关的，这个返回值不是给react使用的，而是给hostConfig其他函数用的</span>\n\t\t<span class=\"token keyword\">return</span> el\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">createTextInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">,</span> rootContianerInstance<span class=\"token punctuation\">,</span> hostContext<span class=\"token punctuation\">,</span> internalInstanceHandle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token function\">apendChildToContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">appendInitialChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">removeChildFromContainer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">insertInContainerBefore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> before</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">inserBefore</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> before<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> before</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">inserBefore</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> before<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">// called in render phase</span>\n\t<span class=\"token function\">prepareUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> oldProps<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> rootContainerInstance<span class=\"token punctuation\">,</span> currentHostContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> payload\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldProps<span class=\"token punctuation\">.</span>bgColor <span class=\"token operator\">!==</span> newProps<span class=\"token punctuation\">.</span>bgColor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tpayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">newBgColor</span><span class=\"token operator\">:</span> newProps<span class=\"token punctuation\">.</span>bgColor <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 返回一个diff 结果，这个结果react 并不关心，是给下一个函数使用的</span>\n\t\t<span class=\"token keyword\">return</span> payload\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">// called in commit phase</span>\n\t<span class=\"token function\">commitUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance<span class=\"token punctuation\">,</span> updatePayload<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> oldProps<span class=\"token punctuation\">,</span> newProps<span class=\"token punctuation\">,</span> rootContainerInstance<span class=\"token punctuation\">,</span> currentHostContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>updatePayload<span class=\"token punctuation\">.</span>newBgColor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tinstance<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> updatePayload<span class=\"token punctuation\">.</span>newBgColor\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> ReactDomMini <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">comp<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// disabled concurrent mode and hydration</span>\n\t\t<span class=\"token keyword\">let</span> container <span class=\"token operator\">=</span> reconciler<span class=\"token punctuation\">.</span><span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\t\treconciler<span class=\"token punctuation\">.</span><span class=\"token function\">updateContainer</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">,</span> contaienr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上代码参考自 <a href=\"youtube.com/watch?v=CGpMlWVcHok\">Building a Custom React Renderer | Sophie Alpert</a></p>\n<p>其实可以看到React 和 Vue3的渲染器api设计有一些不同，react是将参数丢给 reconciler，由 reconciler来实现调度。而Vue3则是没有 reconciler这一层，直接由hostConfig 生成 一套通用的 api，vue runtime 调用这一套通用的api实现渲染。</p>\n<p>参考</p>\n<ul>\n<li><a href=\"youtube.com/watch?v=CGpMlWVcHok\">Building a Custom React Renderer | Sophie Alpert</a></li>\n<li><a href=\"https://agent-hunt.medium.com/hello-world-custom-react-renderer-9a95b7cd04bc\">Hello World Custom React Renderer</a></li>\n<li><a href=\"ttps://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMHostConfig.js\">react-dom</a></li>\n<li><a href=\"https://saul-mirone.github.io/zh-hans/the-essence-of-react-component/\">React组件的本质</a></li>\n</ul>","frontmatter":{"title":"renderer","date":"June 12, 2021","description":"介绍一下vue 和 react 的renderer设计"}},"previous":{"fields":{"slug":"/broken-ideas/"},"frontmatter":{"title":"一些有意思的点滴"}},"next":{"fields":{"slug":"/renderer/"},"frontmatter":{"title":"renderer"}}},"pageContext":{"id":"f10a8367-8231-5197-9a79-56e0120947ed","previousPostId":"d849f754-3110-55ed-a7f6-c314896754e5","nextPostId":"d58b74a4-4bf7-5734-8eec-f4b18825a725"}},"staticQueryHashes":["2841359383","3257411868"]}