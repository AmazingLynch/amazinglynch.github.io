{"componentChunkName":"component---src-templates-blog-post-js","path":"/broken-ideas/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"d849f754-3110-55ed-a7f6-c314896754e5","excerpt":"esbuild esbuild 的watch模式实现是一个优化版的轮训。不用os的 fs是因为 portability(这里存疑？) 具体是怎么优化的呢？ Watch mode in esbuild is implemented using polling instead of OS-specific file…","html":"<h2>esbuild</h2>\n<p>esbuild 的watch模式实现是一个优化版的轮训。不用os的 fs是因为 portability(这里存疑？)</p>\n<p>具体是怎么优化的呢？</p>\n<p>Watch mode in esbuild is implemented using polling instead of OS-specific file system APIs for portability. The polling system is designed to use relatively little CPU vs. a more traditional polling system that scans the whole directory tree at once. The file system is still scanned regularly but each scan only checks a random subset of your files, which means a change to a file will be picked up soon after the change is made but not necessarily instantly.</p>\n<p>With the current heuristics, large projects should be completely scanned around every 2 seconds so in the worst case it could take up to 2 seconds for a change to be noticed. However, after a change has been noticed the change’s path goes on a short list of recently changed paths which are checked on every scan, so further changes to recently changed files should be noticed almost instantly.</p>\n<p>每次扫描都只扫描一部分文件，发现变化的文件，之后这个文件的更新 就能被立刻注意到。</p>\n<p>有意思～</p>","frontmatter":{"title":"一些有意思的点滴","date":"June 04, 2021","description":"遇到有意思的事情，就记录下来吧～"}},"previous":{"fields":{"slug":"/type-challenges/"},"frontmatter":{"title":"type-challenges"}},"next":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"renderer"}}},"pageContext":{"id":"d849f754-3110-55ed-a7f6-c314896754e5","previousPostId":"409b357f-30cf-5de4-b49b-fab8d1c1101e","nextPostId":"f10a8367-8231-5197-9a79-56e0120947ed"}},"staticQueryHashes":["2841359383","965855181"]}