{"componentChunkName":"component---src-templates-blog-post-js","path":"/component-update-in-vue3/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"d8786538-ef0d-575a-9865-db1ddff367ea","excerpt":"Vue与React有一个很大的区别在于组件更新的策略 ，Vue能够根据组件定义自行判断需不需要执行组件的更新而React在不进行任何优化的前提是，是无脑进行更新。如果开发者需要控制更新时机，可以通过自行的定义shouldComponentUpdate, React.memo…","html":"<p>Vue与React有一个很大的区别在于组件更新的策略 ，Vue能够根据组件定义自行判断需不需要执行组件的更新而React在不进行任何优化的前提是，是无脑进行更新。如果开发者需要控制更新时机，可以通过自行的定义shouldComponentUpdate, React.memo等方式来让组件在必要的时候进行更新。可以说React 本身做的更少，将更多的优化空间交给了开发者，而Vue 本身就实现了比较优秀的更新策略。</p>\n<p>这篇文章，我们将深入Vue3源码探索。</p>\n<p>在父组件更新的时候，会递归执行patch，如果遇到组件会执行updateComponent。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n1<span class=\"token operator\">:</span> VNode<span class=\"token punctuation\">,</span> n2<span class=\"token operator\">:</span> VNode<span class=\"token punctuation\">,</span> optimized<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">.</span>component <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">.</span>component<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldUpdateComponent</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> optimized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        __FEATURE_SUSPENSE__ <span class=\"token operator\">&amp;&amp;</span>\n        instance<span class=\"token punctuation\">.</span>asyncDep <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token operator\">!</span>instance<span class=\"token punctuation\">.</span>asyncResolved\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// async &amp; still pending - just update props and slots</span>\n        <span class=\"token comment\">// since the component's reactive effect for render isn't set-up yet</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">pushWarningContext</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">updateComponentPreRender</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> optimized<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">popWarningContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// normal update</span>\n        instance<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> n2\n        <span class=\"token comment\">// in case the child component is also queued, remove it to avoid</span>\n        <span class=\"token comment\">// double updating the same child component in the same flush.</span>\n        <span class=\"token function\">invalidateJob</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// instance.update is the reactive effect runner.</span>\n        instance<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// no update needed. just copy over properties</span>\n      n2<span class=\"token punctuation\">.</span>component <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">.</span>component\n      n2<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">.</span>el\n      instance<span class=\"token punctuation\">.</span>vnode <span class=\"token operator\">=</span> n2\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里n1，n2是组件VNode。可以看到通过 <code class=\"language-text\">shouldComponentUpdate</code> 方法来确定是否需要更新组件，如果不需要更新的话，直接将el（dom）和 instance 的关系绑定到新的VNode就行，如果需要更新的话，就会去执行 <code class=\"language-text\">instance.update</code> 方法，在这个方法中，会重新执行组件的render方法，生成新的 <code class=\"language-text\">subtree</code> 。</p>\n<p>这里，可以简单看下 <code class=\"language-text\">instance.update </code>的定义，当然这不是本文的重点。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> prodEffectOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  scheduler<span class=\"token operator\">:</span> queueJob<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// #1801, #2043 component render effects should allow recursive updates</span>\n  allowRecurse<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> setupRenderEffect<span class=\"token operator\">:</span> <span class=\"token function-variable function\">SetupRenderEffectFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  instance<span class=\"token punctuation\">,</span>\n  initialVNode<span class=\"token punctuation\">,</span>\n  container<span class=\"token punctuation\">,</span>\n  anchor<span class=\"token punctuation\">,</span>\n  parentSuspense<span class=\"token punctuation\">,</span>\n  isSVG<span class=\"token punctuation\">,</span>\n  optimized\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create reactive effect for rendering</span>\n  instance<span class=\"token punctuation\">.</span>update <span class=\"token operator\">=</span> <span class=\"token function\">effect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">componentEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token punctuation\">.</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> vnodeHook<span class=\"token operator\">:</span> VNodeHook <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> el<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> initialVNode\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> bm<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> parent <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> instance\n\n      <span class=\"token comment\">// beforeMount hook</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">invokeArrayFns</span><span class=\"token punctuation\">(</span>bm<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// onVnodeBeforeMount</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>vnodeHook <span class=\"token operator\">=</span> props <span class=\"token operator\">&amp;&amp;</span> props<span class=\"token punctuation\">.</span>onVnodeBeforeMount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">invokeVNodeHook</span><span class=\"token punctuation\">(</span>vnodeHook<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> initialVNode<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> subTree <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>subTree <span class=\"token operator\">=</span> <span class=\"token function\">renderComponentRoot</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el <span class=\"token operator\">&amp;&amp;</span> hydrateNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// dydrate</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>\n          <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n          subTree<span class=\"token punctuation\">,</span>\n          container<span class=\"token punctuation\">,</span>\n          anchor<span class=\"token punctuation\">,</span>\n          instance<span class=\"token punctuation\">,</span>\n          parentSuspense<span class=\"token punctuation\">,</span>\n          isSVG\n        <span class=\"token punctuation\">)</span>\n        initialVNode<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> subTree<span class=\"token punctuation\">.</span>el\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// mounted hook</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">queuePostRenderEffect</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> parentSuspense<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// onVnodeMounted</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>vnodeHook <span class=\"token operator\">=</span> props <span class=\"token operator\">&amp;&amp;</span> props<span class=\"token punctuation\">.</span>onVnodeMounted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> scopedInitialVNode <span class=\"token operator\">=</span> initialVNode\n        <span class=\"token function\">queuePostRenderEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">invokeVNodeHook</span><span class=\"token punctuation\">(</span>vnodeHook<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> scopedInitialVNode<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> parentSuspense<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// activated hook for keep-alive roots.</span>\n      <span class=\"token comment\">// #1742 activated hook must be accessed after first render</span>\n      <span class=\"token comment\">// since the hook may be injected by a child keep-alive</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> instance\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        a <span class=\"token operator\">&amp;&amp;</span>\n        initialVNode<span class=\"token punctuation\">.</span>shapeFlag <span class=\"token operator\">&amp;</span> ShapeFlags<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPONENT_SHOULD_KEEP_ALIVE</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">queuePostRenderEffect</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> parentSuspense<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      instance<span class=\"token punctuation\">.</span>isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n      <span class=\"token comment\">// #2458: deference mount-only object parameters to prevent memleaks</span>\n      initialVNode <span class=\"token operator\">=</span> container <span class=\"token operator\">=</span> anchor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// updateComponent</span>\n      <span class=\"token comment\">// This is triggered by mutation of component's own state (next: null)</span>\n      <span class=\"token comment\">// OR parent calling processComponent (next: VNode)</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> next<span class=\"token punctuation\">,</span> bu<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> vnode <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> instance\n      <span class=\"token keyword\">let</span> originNext <span class=\"token operator\">=</span> next\n      <span class=\"token keyword\">let</span> vnodeHook<span class=\"token operator\">:</span> VNodeHook <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        next<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>el\n        <span class=\"token function\">updateComponentPreRender</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">,</span> optimized<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        next <span class=\"token operator\">=</span> vnode\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// beforeUpdate hook</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bu<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">invokeArrayFns</span><span class=\"token punctuation\">(</span>bu<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// onVnodeBeforeUpdate</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>vnodeHook <span class=\"token operator\">=</span> next<span class=\"token punctuation\">.</span>props <span class=\"token operator\">&amp;&amp;</span> next<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>onVnodeBeforeUpdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">invokeVNodeHook</span><span class=\"token punctuation\">(</span>vnodeHook<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> nextTree <span class=\"token operator\">=</span> <span class=\"token function\">renderComponentRoot</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> prevTree <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>subTree\n      instance<span class=\"token punctuation\">.</span>subTree <span class=\"token operator\">=</span> nextTree\n\n      <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>\n        prevTree<span class=\"token punctuation\">,</span>\n        nextTree<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// parent may have changed if it's in a teleport</span>\n        <span class=\"token function\">hostParentNode</span><span class=\"token punctuation\">(</span>prevTree<span class=\"token punctuation\">.</span>el<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// anchor may have changed if it's in a fragment</span>\n        <span class=\"token function\">getNextHostNode</span><span class=\"token punctuation\">(</span>prevTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        instance<span class=\"token punctuation\">,</span>\n        parentSuspense<span class=\"token punctuation\">,</span>\n        isSVG\n      <span class=\"token punctuation\">)</span>\n      next<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> nextTree<span class=\"token punctuation\">.</span>el\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>originNext <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// self-triggered update. In case of HOC, update parent component</span>\n        <span class=\"token comment\">// vnode el. HOC is indicated by parent instance's subTree pointing</span>\n        <span class=\"token comment\">// to child component's vnode</span>\n        <span class=\"token function\">updateHOCHostEl</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> nextTree<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// updated hook</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">queuePostRenderEffect</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> parentSuspense<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// onVnodeUpdated</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>vnodeHook <span class=\"token operator\">=</span> next<span class=\"token punctuation\">.</span>props <span class=\"token operator\">&amp;&amp;</span> next<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>onVnodeUpdated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">queuePostRenderEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">invokeVNodeHook</span><span class=\"token punctuation\">(</span>vnodeHook<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> next<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> parentSuspense<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> prodEffectOptions<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>外部props发生变化，会将新的组件VNode赋值给实例的next属性，然后进入 <code class=\"language-text\">instance.update </code> 函数， <code class=\"language-text\">next</code> 属性是否有值是区分外部props变化导致组件渲染还是组件内部状态变化导致的渲染的 重要条件。之后，会重新渲染实例，拿到subtree （组件内部的VNode），然后进行patch。</p>\n<p>此时，我们再回到 <code class=\"language-text\">updateComponent</code>函数中 <code class=\"language-text\">shouldUpdateComponent</code> 中，可以看到Vue 中递归向下更新的时候，是如何确定一个组件是否需要更新。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">shouldUpdateComponent</span><span class=\"token punctuation\">(</span>\n  prevVNode<span class=\"token operator\">:</span> VNode<span class=\"token punctuation\">,</span>\n  nextVNode<span class=\"token operator\">:</span> VNode<span class=\"token punctuation\">,</span>\n  optimized<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> prevProps<span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> prevChildren<span class=\"token punctuation\">,</span> component <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> prevVNode\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> nextProps<span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> nextChildren<span class=\"token punctuation\">,</span> patchFlag <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> nextVNode\n  <span class=\"token keyword\">const</span> emits <span class=\"token operator\">=</span> component<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>emitsOptions\n\n  <span class=\"token comment\">// Parent component's render function was hot-updated. Since this may have</span>\n  <span class=\"token comment\">// caused the child component's slots content to have changed, we need to</span>\n  <span class=\"token comment\">// force the child to update as well.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__DEV__ <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>prevChildren <span class=\"token operator\">||</span> nextChildren<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> isHmrUpdating<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// force child update for runtime directive or transition on component vnode.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextVNode<span class=\"token punctuation\">.</span>dirs <span class=\"token operator\">||</span> nextVNode<span class=\"token punctuation\">.</span>transition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>optimized <span class=\"token operator\">&amp;&amp;</span> patchFlag <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>patchFlag <span class=\"token operator\">&amp;</span> PatchFlags<span class=\"token punctuation\">.</span><span class=\"token constant\">DYNAMIC_SLOTS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// slot content that references values that might have changed,</span>\n      <span class=\"token comment\">// e.g. in a v-for</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>patchFlag <span class=\"token operator\">&amp;</span> PatchFlags<span class=\"token punctuation\">.</span><span class=\"token constant\">FULL_PROPS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>nextProps\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// presence of this flag indicates props are always non-null</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">hasPropsChanged</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> nextProps<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> emits<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>patchFlag <span class=\"token operator\">&amp;</span> PatchFlags<span class=\"token punctuation\">.</span><span class=\"token constant\">PROPS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> dynamicProps <span class=\"token operator\">=</span> nextVNode<span class=\"token punctuation\">.</span>dynamicProps<span class=\"token operator\">!</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dynamicProps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> dynamicProps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          nextProps<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> prevProps<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token operator\">!</span><span class=\"token function\">isEmitListener</span><span class=\"token punctuation\">(</span>emits<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this path is only taken by manually written render functions</span>\n    <span class=\"token comment\">// so presence of any children leads to a forced update</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevChildren <span class=\"token operator\">||</span> nextChildren<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextChildren <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>nextChildren <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>$stable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps <span class=\"token operator\">===</span> nextProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>nextProps\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">hasPropsChanged</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">,</span> emits<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">hasPropsChanged</span><span class=\"token punctuation\">(</span>\n  prevProps<span class=\"token operator\">:</span> Data<span class=\"token punctuation\">,</span>\n  nextProps<span class=\"token operator\">:</span> Data<span class=\"token punctuation\">,</span>\n  emitsOptions<span class=\"token operator\">:</span> ComponentInternalInstance<span class=\"token punctuation\">[</span><span class=\"token string\">'emitsOptions'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> nextKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextKeys<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nextKeys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> nextKeys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      nextProps<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> prevProps<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n      <span class=\"token operator\">!</span><span class=\"token function\">isEmitListener</span><span class=\"token punctuation\">(</span>emitsOptions<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里 <code class=\"language-text\">patchFlag</code> 是 对VNode 的描述，用来表示VNode 哪一部分会发生变化。</p>\n<p>在上文中，如果VNode上有指令或者 transition，会进行更新。</p>\n<p>如果有动态插槽，会进行更新，因为插槽里可能引用了父组件的数据。</p>\n<p>如果VNode是 <code class=\"language-text\">FULL_PROPS</code> 时，下面几种情况都是 <code class=\"language-text\">FULL_PROPS</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-bind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">:[foo]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-bind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cls<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>会对比前后的props，决定是否需要更新。</p>\n<p>如果VNode是 <code class=\"language-text\">PROPS</code> ，这是最常规的类型，可以在 <code class=\"language-text\">dynamicProps</code> 中 找到 可能发生变化的props，对这些prop 挨个进行比较，如果不一样，就更新。</p>\n<p>上面的比较是针对使用模板的情况下，因为使用模板，compiler 可以根据模板给VNode提供诸如 patchFlags, dynamicProps这种编译时信息，以减少后期的diff 成本。而如果是用户手写Render 函数，这种信息是一般是没有的。这种情况下，就只能对前后props一个一个进行比较了，如果任何一个发生变化，就更新，如果都没有发生变化则不更新。</p>","frontmatter":{"title":"Vue3中的组件更新","date":"March 07, 2021","description":"没有类似React的shouldComponentUpdate钩子，Vue是如何做到自动更新的？"}},"previous":{"fields":{"slug":"/watch-in-vue3/"},"frontmatter":{"title":"Vue3中的watch执行时机"}},"next":{"fields":{"slug":"/promise-in-another-way/"},"frontmatter":{"title":"封装Promise，让他更好用一些"}}},"pageContext":{"id":"d8786538-ef0d-575a-9865-db1ddff367ea","previousPostId":"547be2ec-e3ad-5c1c-9f67-8b50dd1fbb93","nextPostId":"0e0f7f60-a48a-537d-8db7-3bb2d6db1678"}},"staticQueryHashes":["2841359383","965855181"]}