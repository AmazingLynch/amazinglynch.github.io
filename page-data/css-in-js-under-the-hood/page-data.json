{"componentChunkName":"component---src-templates-blog-post-js","path":"/css-in-js-under-the-hood/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"667c84ac-2257-5d85-80da-b60e5674c258","excerpt":"css-in-js是一个 css方案，在react中使用者非常多。喜欢他的人对其称赞不已，讨厌他的人对其嗤之以鼻。关于css-in-js这个技术方案的历史发展和优缺点在前文 已经有分析，本文不做过多讲解，本文将以styled-components探讨一下css-in-js 实现的原理。 用法 在style…","html":"<p>css-in-js是一个 css方案，在react中使用者非常多。喜欢他的人对其称赞不已，讨厌他的人对其嗤之以鼻。关于css-in-js这个技术方案的历史发展和优缺点在<a href=\"https://colgin.github.io/2021/01/25/css-in-js/\">前文</a> 已经有分析，本文不做过多讲解，本文将以styled-components探讨一下css-in-js 实现的原理。<!--more--></p>\n<h2>用法</h2>\n<p>在<a href=\"https://styled-components.com/\">style-components官网</a> 可以看到用法</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Button <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>a<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  /* This renders the buttons above... Edit me! */\n  display: inline-block;\n  border-radius: 3px;\n  padding: 0.5rem 0;\n  margin: 0.5rem 1rem;\n  width: 11rem;\n  background: transparent;\n  color: white;\n  border: 2px solid white;\n\n  /* The GitHub button is a primary button\n   * edit this to target it specifically! */\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>primary <span class=\"token operator\">&amp;&amp;</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    background: white;\n    color: black;\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span>\n      <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/styled-components/styled-components<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>noopener<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">primary</span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      GitHub\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">as</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>Link<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/docs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Documentation\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>可以看到，通过调用 <code class=\"language-text\">styled.a</code>返回的就是一个组件。后面的参数是用 “ 符号包裹的。这是 [tagged templates](<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates\">Tagged templates</a>)。其实就相当于函数调用。</p>\n<h2>基础</h2>\n<h3>将函数参数解析为style字符串</h3>\n<p>通过MDN实例，可以看出，函数的第一个参数是一个数组，是整个参数被<code class=\"language-text\">${}</code> 分割的字符串。因此可以将函数这样定义。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>expressions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> expressions<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    acc <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>exp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们来试验一下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">evaluate<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Good </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span> <span class=\"token operator\">?</span> <span class=\"token string\">'afternoon'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'morning'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// 随机返回 'Good morning'或者'Good afternoon'</span></code></pre></div>\n<p>上面这个例子中，evaluate 可以接受动态js 语句。在 style-component中 表达式 也可以是一个一个函数，函数是参数从哪里来呢？其实要知道 style-component返回的是一个组件，在React中，一个接收props返回 vdom的 函数就可以是一个组件。因此，我们将上面的evaluate函数进行一些改写</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>expressions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> expressions<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      acc <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">evaluateExp</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">evaluateExp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exp<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exp <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">exp</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> exp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>返回一个组件</h3>\n<p>在这个实现中，返回值是一个函数，但是这个函数只是返回了一个拼接字符串，并没有渲染任何内容。</p>\n<p>让我们再次回到styled-component的使用例子，我们一般都是</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> RedLink <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>a<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\tcolor: red\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>渲染的实际内容是一个 红色的 a标签， 因此我们可以对上文的函数进行改写</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createElement <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">styled</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">strs<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>expressions</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> cssText <span class=\"token operator\">=</span> expressions<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      acc <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">evaluateExp</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span>  cssText\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">evaluateExp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exp<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exp <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">exp</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> exp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> allElements <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'h1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'h2'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span>\n\nallElements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  styled<span class=\"token punctuation\">[</span>ele<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>到这里为止，我们已经实现了了一个最简陋，最基础的styled-component实现了。接下来我们要对一些细节进行处理</p>\n<h2>补充一些细节</h2>\n<h3>使用 css dom替换行内css</h3>\n<p>上面的代码中，我们将生成的style以行内style的形式注入。这种方式不利于样式的复用。我们可以考虑根据这些css 生成一个 className，然后将这一条规则插入到style标签中。</p>\n<p>如何根据css生成一个className呢？我们希望相同的css可以生成一样的hash，这样就可以复用了了。可以使用<a href=\"https://www.wikiwand.com/en/MurmurHash\">MurmurHash</a>来实现，他是一个高效的hash算法，同样的输入，必定有同样的输出，很符合我们的要求。但是…等等，cssText是由用户输入的，我们只做了拼接。cssText 是由一条一条规则组成的，有时候用户输入的不一样，但是其实是一样的，比如</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">styled<span class=\"token punctuation\">.</span>a<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\tcolor: red;\n\tfont-size: 24;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\nstyled<span class=\"token punctuation\">.</span>a<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\t\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>…未完待续</p>","frontmatter":{"title":"css-in-js-under-the-hood","date":"July 12, 2021","description":"css-in-js 底层到底是如何工作的呢？"}},"previous":{"fields":{"slug":"/get-width-of-element/"},"frontmatter":{"title":"动态获取元素的宽度"}},"next":{"fields":{"slug":"/watching-issues/"},"frontmatter":{"title":"watching-issues.md"}}},"pageContext":{"id":"667c84ac-2257-5d85-80da-b60e5674c258","previousPostId":"ed4e66ba-92d0-5f27-ada8-daad90e65018","nextPostId":"0e81dcf5-8771-57cd-80da-565849e0ef69"}},"staticQueryHashes":["2841359383","3257411868"]}