{"componentChunkName":"component---src-templates-blog-post-js","path":"/ssh/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"683e9335-de3c-5966-8c0d-c46a9240407b","excerpt":"我们经常使用ssh来下载github/gitlab 仓库或者实现免密登录远程服务器。这篇文章会介绍一些关于ssh的细节。 非对称加密 使用非对称加密算法（比如RSA算法）可以生成一对具有数学关联的密钥，也就是公钥和私钥。公钥可以用来加密数据，只有与其对应的私钥可以解秘数据。而且公钥不能推出私钥。 Alice 和 Bob…","html":"<p>我们经常使用ssh来下载github/gitlab 仓库或者实现免密登录远程服务器。这篇文章会介绍一些关于ssh的细节。<!--more--></p>\n<h2>非对称加密</h2>\n<p>使用非对称加密算法（比如RSA算法）可以生成一对具有数学关联的密钥，也就是公钥和私钥。公钥可以用来加密数据，只有与其对应的私钥可以解秘数据。而且公钥不能推出私钥。</p>\n<p>Alice 和 Bob要发送消息，那就首先两人都生成 各自的 密钥对。两人都将自己的公钥告知对方。当Alice 发送信息给 Bob时，Alice 会使用 Bob的公钥对数据加密，然后将加密的文件发送给Bob，Bob则可以使用自己的私钥将文件解密。由于公钥和私钥的特性，只有Bob可以揭秘Alice发送的信息，即使是Alice也无法揭秘，因为她没有Bob的私钥。所以Alice和Bob钥保存好自己私钥。</p>\n<p>非对称加密在 SSL,SSH, PGP, GPG中均有应用</p>\n<h2>ssh</h2>\n<p>通过 <code class=\"language-text\">ssh</code> 登录服务器，比如 <code class=\"language-text\">ssh root@11.22.33.44</code> 即可以<code class=\"language-text\">root</code>用户登录ip为 <code class=\"language-text\">11.22.33.44</code>服务器。这时候，会要求我们输入密码。然而如果我们有很多服务器，每个服务器密码都不一样，岂不是很麻烦，而且同一个服务器密码也可能会换。这时候我们就会使用到ssh 免密登录。要想做到免密登录，就要在本机上先生成密钥对。</p>\n<ol>\n<li>使用 <code class=\"language-text\">ssh-keygen</code>生成密钥对</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen</code></pre></div>\n<p>不带任何参数，一路回车将会生成一组密钥对在 <code class=\"language-text\">~/.ssh/</code>目录下。</p>\n<p>当然也可以给 <code class=\"language-text\">ssh-keygen</code>指定一些参数,<code class=\"language-text\">-t</code>指定算法，<code class=\"language-text\">-C</code>添加注释</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -t ed25519 -C <span class=\"token string\">\"your_email@example.com\"</span></code></pre></div>\n<p><code class=\"language-text\">ssh-keygen</code> 默认生成的密钥对名是 <code class=\"language-text\">id_rsa</code>，当然也可以自己指定。待<code class=\"language-text\">ssh-keygen</code>执行完成之后，可以看到 <code class=\"language-text\">id_rsa</code>he <code class=\"language-text\">id_rsa.pub</code>两个文件，这两个文件分别是这个密钥对的私钥和公钥。</p>\n<ol start=\"2\">\n<li>\n<p>将 <code class=\"language-text\">id_rsa.pub</code>文件内容复制到目标服务器<code class=\"language-text\">~/.ssh/authorized_keys</code>文件中</p>\n<p>注意，这里要放到你要登录的用户的用户目录下，比如你想以root用户登录，那就要添加到 <code class=\"language-text\">/root/.ssh/authorized_keys</code>中，如果是以 jack用户登录，就要添加到 <code class=\"language-text\">/Users/jack/.ssh/authozied_keys</code> 中。</p>\n<p>可以现在本机使用 <code class=\"language-text\">cat</code>命令查看 公钥，将内容复制到粘贴板上，再登录服务器，将公钥粘贴到 authozied_keys文件中（如果没有的话，就需要手动创建）</p>\n<p>也可以使用 <code class=\"language-text\">ssh-copy-id -i ~/.ssh/id_rsa.pub root@11.22.33.44</code>将公钥内容写到目标服务器的.ssh目录下</p>\n</li>\n<li>\n<p>在本机使用 <code class=\"language-text\">ssh root@11.22.33.44</code>登录，就不需要密码了</p>\n</li>\n</ol>\n<p>有时候本机会有几个密钥对，而<code class=\"language-text\">ssh root@11.22.33.44</code> 默认会使用<code class=\"language-text\">id_rsa</code>这个密钥对。如果你设置在服务器上authorized_keys上的公钥不是<code class=\"language-text\">id_rsa.pub</code>的话，会发现免密登录失效了。这时候就需要我们通过 <code class=\"language-text\">-i</code>参数指定密钥来进行ssh登录，假如前面的步骤我们生成的密钥对是 <code class=\"language-text\">test</code>和<code class=\"language-text\">test.pub</code>，我们已经将<code class=\"language-text\">test.pub</code>粘贴到服务器的<code class=\"language-text\">.ssh</code>目录下了，此时 可以通过<code class=\"language-text\">ssh -i ~/.ssh/test root@11.22.33.44</code> 指定使用 test密钥进行加密发送。</p>\n<p>然而这样每次都要指定也很麻烦，可以参考在本机<code class=\"language-text\">~/.ssh/config</code>配置ssh 登录</p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">Host tengxunyun\nHostName 11.22.33.44\nUser root\nIdentityFile ~/.ssh/ecs_rsa</code></pre></div>\n<p>这样之后就可以直接<code class=\"language-text\">ssh tengxunyun</code> 登录服务器了。是不是一下子方便了很多呢？</p>\n<p>除了上面提到的这些配置登录信息的字段外，还可以配置ssh保持连接，防止断掉</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Host *\nServerAliveInterval 30\nTCPKeepAlive yes\nServerAliveCountMax 6\nCompression yes</code></pre></div>\n<p>更多配置可以通过<code class=\"language-text\">man ssh config</code>查阅。</p>\n<h3>sshd</h3>\n<p>sshd是服务器端ssh的守护进程，可以做一些ssh登录配置，其配置文件在<code class=\"language-text\">/etc/ssh/sshd_config</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 禁用密码登录\nPasswordAuthentication no\nChallengeResponseAuthentication no\n\n# 调整ssh连接保持时间\nClientAliveCountMax 300\nClientAliveInterval 0</code></pre></div>\n<h2>参考</h2>\n<ol>\n<li><a href=\"https://www.bilibili.com/video/BV134411r7Kt\">四分钟搞明白非对称加密</a></li>\n<li><a href=\"https://deepzz.com/post/how-to-setup-ssh-config.html\">SSH Config 那些你所知道和不知道的事</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1y4411q7PW\">ssh免密登的原理</a></li>\n<li><a href=\"https://www.jianshu.com/p/e87bb207977c\">sshd_config配置详解</a></li>\n<li><a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">github doc</a></li>\n</ol>","frontmatter":{"title":"ssh介绍","date":"February 01, 2022","description":"哪怕是最常见的技术，也可以多了解一些"}},"previous":{"fields":{"slug":"/watching-issues/"},"frontmatter":{"title":"watching-issues.md"}},"next":{"fields":{"slug":"/module-field-in-package-json/"},"frontmatter":{"title":"package.json中的module字段"}}},"pageContext":{"id":"683e9335-de3c-5966-8c0d-c46a9240407b","previousPostId":"0e81dcf5-8771-57cd-80da-565849e0ef69","nextPostId":"e57eacc6-237e-5034-8e2b-ecf1b641fa63"}},"staticQueryHashes":["2841359383","965855181"]}