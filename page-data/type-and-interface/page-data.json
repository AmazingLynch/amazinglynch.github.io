{"componentChunkName":"component---src-templates-blog-post-js","path":"/type-and-interface/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"21286534-f2a3-55be-a668-687ee1046ae0","excerpt":"最近遇到一个问题，使用 interface 和 type 得到了截然不同的结果，代码简化如下 在上面例子中定义了一个  函数，函数有一个参数类型是 ,  是ts内置的类型， 的类型定义等价于 接下来分别使用 type 和 interface…","html":"<p>最近遇到一个问题，使用 interface 和 type 得到了截然不同的结果，代码简化如下</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Arg</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span>PropertyKey<span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PayloadM<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\ttype<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n\tdata<span class=\"token operator\">:</span> <span class=\"token constant\">D</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyTypeM</span> <span class=\"token operator\">=</span> PayloadM<span class=\"token operator\">&lt;</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> m<span class=\"token operator\">:</span> MyTypeM <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ok</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PayloadN<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n\tdata<span class=\"token operator\">:</span> <span class=\"token constant\">D</span>\n\ttype<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyTypeN</span> <span class=\"token operator\">=</span> PayloadN<span class=\"token operator\">&lt;</span><span class=\"token string\">'xyz'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> n<span class=\"token operator\">:</span> MyTypeN <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'xyz'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// error ??</span>\n<span class=\"token comment\">// Argument of type 'MyTypeN' is not assignable to parameter of type 'Arg'.</span>\n<span class=\"token comment\">// Index signature for type 'string' is missing in type 'PayloadN&lt;\"xyz\", { name: number; // }>'.</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在上面例子中定义了一个 <code class=\"language-text\">foo</code> 函数，函数有一个参数类型是 <code class=\"language-text\">Arg</code>, <code class=\"language-text\">PropertyKey</code> 是ts内置的类型，<code class=\"language-text\">Arg</code> 的类型定义等价于</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Arg</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">[</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> unkonwn<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">[</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">[</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来分别使用 type 和 interface 定义了两个泛型类型，<code class=\"language-text\">PayloadM</code>, <code class=\"language-text\">PayloadN</code>, 然后 定义了两个变量 <code class=\"language-text\">m</code>, <code class=\"language-text\">n</code>,分别为 <code class=\"language-text\">PayloadM</code>, <code class=\"language-text\">PayloadN</code>类型，然后将 <code class=\"language-text\">m</code>, <code class=\"language-text\">n</code> 两个变量传递给<code class=\"language-text\">foo</code>函数，<code class=\"language-text\">foo(m)</code> 是没有问题的，但是<code class=\"language-text\">foo(n)</code> 确报错了。</p>\n<p>为什么会出现这种错误呢？我们先来看 <code class=\"language-text\">foo</code> 函数的参数<code class=\"language-text\">d</code>其实没有定义有什么属性，所以</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ok</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ok</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而 <code class=\"language-text\">PayloadM</code> 和 <code class=\"language-text\">PayloadN</code> 都是明确了类型有且只有 <code class=\"language-text\">type</code> 和 <code class=\"language-text\">data</code> 两个属性</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> m<span class=\"token operator\">:</span> MyTypeM <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// error property data is requires in MyTypeM</span>\n<span class=\"token keyword\">const</span> m<span class=\"token operator\">:</span> MyTypeM <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> other<span class=\"token operator\">:</span> <span class=\"token string\">'xx'</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// error 'other' doesn't exist in MyTypeM</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> n<span class=\"token operator\">:</span> MyTypeN <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'xyz'</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// error property data is requires in MyTypeN</span>\n<span class=\"token keyword\">const</span> n<span class=\"token operator\">:</span> MyTypeN <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'xyz'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> other<span class=\"token operator\">:</span> <span class=\"token string\">'xx'</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// error 'other' doesn't exist in MyTypeN</span></code></pre></div>\n<p>而将 <code class=\"language-text\">m</code>, <code class=\"language-text\">n</code> 传递给 <code class=\"language-text\">foo</code> 的时候，其实是将一个 具体的 类型赋值给一个宽泛的类型。ts 中的 interface 有一个特点就是，不可以将具体的类型赋值给更宽泛的类型(A specific interface cannot be saved into a more generic interface)。而 ts 中的 type 是允许将更具体的类型赋值给更宽泛的类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MoreGenric</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">[</span>k<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MoreSpecific</span> <span class=\"token punctuation\">{</span>\n\tfoo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\tbar<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> generic<span class=\"token operator\">:</span> MoreGenric <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> abc<span class=\"token operator\">:</span> <span class=\"token number\">333</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> specific<span class=\"token operator\">:</span> MoreSpecific <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> bar<span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// error Type 'MoreSpecific' is not assignable to type 'MoreGenric'.</span>\n<span class=\"token comment\">// Index signature for type 'string' is missing in type 'MoreSpecific'.</span>\ngeneric <span class=\"token operator\">=</span> specific</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MoreGenric</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">[</span>k<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MoreSpecific</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tfoo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\tbar<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> generic<span class=\"token operator\">:</span> MoreGenric <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> abc<span class=\"token operator\">:</span> <span class=\"token number\">333</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> specific<span class=\"token operator\">:</span> MoreSpecific <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> bar<span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">}</span>\ngeneric <span class=\"token operator\">=</span> specific <span class=\"token comment\">// ok</span></code></pre></div>\n<p>通过 type 类型，可以将更具体类型赋值给更宽泛的类型，上面的例子中 <code class=\"language-text\">MoreGeneric</code>使用type 定义的，用 interface 定义也是一样的结果。</p>\n<p>我们再次回到最开始的场景，也就是说，可以用 type 不要 interface 来让代码不报错。那如果硬是要使用interface 类型呢（有时候变量类型不是开发能够修改的），可以使用扩展运算符</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyTypeN</span> <span class=\"token operator\">=</span> PayloadN<span class=\"token operator\">&lt;</span><span class=\"token string\">'xyz'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> n<span class=\"token operator\">:</span> MyTypeN <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'xyz'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>通过使用扩展运算符，可以强制让 ts 将 <code class=\"language-text\">{...n}</code> 识别为可以索引的。这种方式有些 hack。可以看<a href=\"https://github.com/microsoft/TypeScript/issues/15300\">issue</a>。</p>\n<p>根据报错，我们还可以通过让 <code class=\"language-text\">PayloadN</code> 通过 interface extends  的方式让其变得可索引</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Arg</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span>PropertyKey<span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PayloadN<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Arg</span> <span class=\"token punctuation\">{</span>\n\tdata<span class=\"token operator\">:</span> <span class=\"token constant\">D</span>\n\ttype<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyTypeN</span> <span class=\"token operator\">=</span> PayloadN<span class=\"token operator\">&lt;</span><span class=\"token string\">'xyz'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> n<span class=\"token operator\">:</span> MyTypeN <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'xyz'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ok</span></code></pre></div>\n<p>参考</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/60697214/how-to-fix-index-signature-is-missing-in-type-error\">How to fix “Index signature is missing in type” error?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/73372799/index-signature-for-type-string-is-missing-in-type\">Index signature for type ‘string’ is missing in type</a></li>\n</ul>","frontmatter":{"title":"typescript中的type和interface","date":"August 27, 2022","description":"他们是等价的吗？"}},"previous":{"fields":{"slug":"/bundler/"},"frontmatter":{"title":"基于rollup/webpack的上层打包工具"}},"next":null},"pageContext":{"id":"21286534-f2a3-55be-a668-687ee1046ae0","previousPostId":"1b59455d-ccf2-55e6-91de-49a481803951","nextPostId":null}},"staticQueryHashes":["2841359383","965855181"]}