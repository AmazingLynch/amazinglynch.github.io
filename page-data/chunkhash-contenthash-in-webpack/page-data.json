{"componentChunkName":"component---src-templates-blog-post-js","path":"/chunkhash-contenthash-in-webpack/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"696bcfad-93ab-54b1-b08e-a73c77c8d2e3","excerpt":"在webpack配置中输出的配置中，提供了几个占位符号，其中contenthash与chunkhash是令人比较费解的两个。 bundle, module, chunk module module 是最好理解的，我们通常会把webpack 描述为 module bundler。在webpack…","html":"<p>在webpack配置中输出的配置中，提供了几个占位符号，其中contenthash与chunkhash是令人比较费解的两个。</p>\n<!-- more -->\n<h2>bundle, module, chunk</h2>\n<h3>module</h3>\n<p>module 是最好理解的，我们通常会把webpack 描述为 <strong>module bundler</strong>。在webpack中，一切资源都是模块，其实webpack本身智能处理js module，但是通过loader，可以处理不同类型的module，比较常见的比如css，图片，字体。</p>\n<p><img src=\"https://i.loli.net/2020/07/23/P9kn6mBFYI4feqH.png\" alt=\"https://i.loli.net/2020/07/23/P9kn6mBFYI4feqH.png\"></p>\n<p>可以看到左边这个就是不同类型的module。</p>\n<p>在webpack官网针对module 还有专门的介绍，简而言之，通过各种语法对各种资源的引用让webpack能够建立起一个依赖树。比如</p>\n<ul>\n<li>ES2015 import</li>\n<li>CommonJS <code class=\"language-text\">require()</code>语法</li>\n<li>AMD <code class=\"language-text\">define</code> , <code class=\"language-text\">require</code>语法</li>\n<li>css/less/scss 中的 <code class=\"language-text\">@import</code></li>\n<li>css 中的<code class=\"language-text\"> url(...)</code></li>\n<li>html中<code class=\"language-text\">img src=... ></code></li>\n</ul>\n<p>通过loader，可以支持非常多的module类型，比如使用ts-loader就可以支持ts module。回想一下，webpack 配置loader就是在module对象下配置的。</p>\n<h3>bundle</h3>\n<p>bundle 对应的是最终生成的文件，一个文件对应一个bundle</p>\n<h3>chunk</h3>\n<p>chunk是webpack 中一个不好理解，但是又非常重要的概念。是webpack 内部处理的的一个表示，chunk是module 的集合。</p>\n<p>在<a href=\"https://github.com/webpack/webpack.js.org/issues/970#issuecomment-305525560\">Concepts- Bundle vs Chunk</a>的讨论中，webpack的贡献者提出了下面的观点：</p>\n<p>chunk就是 bundle，chunk只是对依赖的一层封装。还提出了三种chunk</p>\n<ul>\n<li>entry chunk：entry chunk就是应用的入口，里面包含了webpack的启动代码，整体而言就是一个IIFE，参数是modules，就是一个一个的module。entry chunk一定是最先执行的。</li>\n<li>initial chunk：initial chunk 是同步加载的，但是不包含webpack的那些启动代码。initial chunk 一般是紧跟在 entry chunk之后加载的。initial chunk 也是一个bundle（用户侧的称呼），initial chunk 一般可以由拆包生成，比如SplitChunksPlugin, 或者 mini-css-extract-plugin。典型的代码如下:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">webpackJsonp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>\n<span class=\"token comment\">/* 0 */</span>\n<span class=\"token comment\">/* unknown exports provided */</span>\n<span class=\"token comment\">/* all exports used */</span>\n<span class=\"token comment\">/*!*********************!*\\\\\n  !*** ./utility2.js ***!\n  \\\\*********************/</span>\n<span class=\"token comment\">/***/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token string\">\"utility2\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">/* 1 */</span>\n<span class=\"token comment\">/* unknown exports provided */</span>\n<span class=\"token comment\">/* all exports used */</span>\n<span class=\"token comment\">/*!*********************!*\\\\\n  !*** ./utility3.js ***!\n  \\\\*********************/</span>\n<span class=\"token comment\">/***/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token string\">\"utility3\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/***/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Normal chunk: normal chunk 和initial chunk的区别在于，normal chunk是懒加载或者说是异步加载的。比如通过import()动态导入语法就会生成normal chunk。normal chunk。normal chunk 是异步的，没有固定的顺序。</li>\n</ul>\n<p>如果按照chunk产出的原因来分的话。大概可以分为3类</p>\n<ul>\n<li>entry</li>\n<li>SplitChunksPlugin</li>\n<li>Dynamic import</li>\n</ul>\n<p>在webpack打包结果中会说明每一个文件来自与哪个chunk</p>\n<p><img src=\"https://i.loli.net/2020/07/24/x69fHqaJjbngL13.png\" alt=\"https://i.loli.net/2020/07/24/x69fHqaJjbngL13.png\"></p>\n<h2>contenthash, chunkhash</h2>\n<p>官网上对chunkhash 的解释是 The hash of chunk content, 对contenthash的解释是 The hash of the content of a file。</p>\n<p>而且还特地标注了，如果使用ExtracTextWebpackPlugin的时候，用contenthash ，不要使用chunkhash。</p>\n<p>这是为什么呢？</p>\n<p>先搭建一下webpack 环境把。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[chunkhash:5].js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../src/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// chunks: ['vendors', 'runtime', 'main']</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[contenthash:5].css'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>源文件如下</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> abs <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./abs'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n  div<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'food'</span>\n  div<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token number\">8888</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token number\">109</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// index.css</span>\n<span class=\"token punctuation\">.</span>food <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> yellow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// abs.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">abs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> val</code></pre></div>\n<p>接下来，调整output.filename使用的占位符和MiniCssExtractPlugin使用的占位符。</p>\n<p>为了测试这俩占位符的区别，每次只会做以下任意一种修改</p>\n<ul>\n<li>A：修改index.js文件 ，console.log()的值</li>\n<li>B：修改index.css文件内容</li>\n</ul>\n<ol>\n<li>如果二者都是用chunkhash</li>\n</ol>\n<p>A, B 两种情况都会导致打包出来的文件发生变化，而且，二者文件名都是一样的（前提占位符一样）。</p>\n<p><img src=\"https://i.loli.net/2020/07/24/cUNtJHzVl4dxLD5.png\" alt=\"https://i.loli.net/2020/07/24/cUNtJHzVl4dxLD5.png\"></p>\n<ol start=\"2\">\n<li>如果二者都是用contenthash</li>\n</ol>\n<p>A: js文件发生变化，css文件没有发生变化</p>\n<p>B: js文件没有发生变化，css文件发生变化</p>\n<p>在这里的场景，由于css都被抽离成一个单独的文件，直接插入到html中，但是如果类似与动态引入的话，比如</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./example.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果example.js文件了，index.js 文件还不修改的话，必然会导致引用文件失败。因为之前的文件已经不在了。</p>\n<ol start=\"3\">\n<li>如果output.filename 是contenthash，css插件用的是chunkhash的话</li>\n</ol>\n<p>A: js 文件发生变化，css文件发生变化</p>\n<p>B: js 文件不发生变化，css文件发生变化</p>\n<p>可以看到，我们只修改了js文件，但是css文件也变了</p>\n<ol start=\"4\">\n<li>如果output.filename使用chunkhash, css插件使用contenthash的话</li>\n</ol>\n<p>A: js文件发生变化，css文件不发生变化</p>\n<p>B: js文件发生变化，css文件发生变化</p>\n<p>从缓存的角度来看，我们总是希望尽可能充分利用缓存，每次只变更我们更新过的文件。前提是更新过的文件能够作用。</p>\n<p>显然上面第四种是符合要求的，也就是output.filename使用chunkhash, css plugin使用contenthash。</p>\n<p>从这我们也可以对比得知contenthash 是只与内容相关，内容变了，hash就变了。而chunkhash是一整个chunk的内容，不仅仅是自己的内容，还有引用的别的module 的内容，任何一个变化了，都要发生变化，这就和chunk 的概念不谋而合了。</p>\n<p>参考资料</p>\n<ul>\n<li><a href=\"https://webpack.js.org/configuration/output/#outputfilename\">webpack官网</a></li>\n<li><a href=\"https://stackoverflow.com/questions/42523436/what-are-module-chunk-and-bundle-in-webpack\">stackoverflow: What are module, chunk and bundle in webpack</a></li>\n<li><a href=\"https://github.com/webpack/webpack.js.org/issues/970\">github issue: Concepts- Bundle vs Chunk</a></li>\n<li><a href=\"https://juejin.im/post/5d70ad50f265da03cf7aae91\">webpack中的bundle, module, chunk分别是什么</a></li>\n</ul>","frontmatter":{"title":"webpack 中的contenthash与chunkhash","date":"July 24, 2020","description":"webpack中的概念一定是不容易记住的，而且不好理解的，🐶🐶🐶"}},"previous":{"fields":{"slug":"/scope-slots-and-render-in-vue/"},"frontmatter":{"title":"Vue中的scope slot和render函数"}},"next":{"fields":{"slug":"/vue3-renderer/"},"frontmatter":{"title":"vue3 中渲染器api的设计"}}},"pageContext":{"id":"696bcfad-93ab-54b1-b08e-a73c77c8d2e3","previousPostId":"bf1e32d0-9a3a-5f1c-b6ea-336b5b32cd45","nextPostId":"466cbbd2-e36f-5bed-8919-d41e5d82ca2f"}},"staticQueryHashes":["2841359383","965855181"]}