{"componentChunkName":"component---src-templates-blog-post-js","path":"/graceful-restart-or-stop/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"f6ff3f26-2cbf-545c-9895-9b5479c33605","excerpt":"背景 web 项目有时候需要更新迭代或者更新项目的配置文件，这时候需要重启 web 服务，然而不能简单粗暴的关机，这样会导致当前接受到的 socket 会处理失败。优雅的关机应该是拒绝新的 socket 连接，等待正在处理的 socket 连接处理完成再退出。 优雅的关机 在 go 1.8 之后，net/http…","html":"<h2>背景</h2>\n<p>web 项目有时候需要更新迭代或者更新项目的配置文件，这时候需要重启 web 服务，然而不能简单粗暴的关机，这样会导致当前接受到的 socket 会处理失败。优雅的关机应该是拒绝新的 socket 连接，等待正在处理的 socket 连接处理完成再退出。</p>\n<h2>优雅的关机</h2>\n<p>在 go 1.8 之后，net/http 包有一个<a href=\"https://golang.org/pkg/net/http/#Server.Shutdown\">Shutdown</a>方法。这个方法能够优雅的在不中断正在处理的请求连接的情况下关掉服务。实质上是通过关掉服务上的监听，关掉空闲的连接，然后无限制地等待正在处理的连接完成再关掉服务。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// 来自官网的例子</span>\n\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"os/signal\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> srv http<span class=\"token punctuation\">.</span>Server\n\n\tidleConnsClosed <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tsigint <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> os<span class=\"token punctuation\">.</span>Signal<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\tsignal<span class=\"token punctuation\">.</span><span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span>sigint<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>Interrupt<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">&lt;-</span>sigint\n\n\t\t<span class=\"token comment\">// We received an interrupt signal, shut down.</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> srv<span class=\"token punctuation\">.</span><span class=\"token function\">Shutdown</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Error from closing listeners, or context timeout:</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP server Shutdown: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>idleConnsClosed<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> srv<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> http<span class=\"token punctuation\">.</span>ErrServerClosed <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Error starting or closing listener:</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatalf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP server ListenAndServe: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token operator\">&lt;-</span>idleConnsClosed\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到这里开启了一个 goroutine 接收操作系统的信号，一旦接收到<code class=\"language-text\">os.Interrupt</code>就调用<code class=\"language-text\">Shutdown()</code>，再把<code class=\"language-text\">idleConnsClosed</code>通道给关掉，这样外面的代码就不会阻塞了，至此，函数执行完成。</p>\n<p>上面的代码有几个可以优化点</p>\n<ol>\n<li>不需要开启新的 goroutine，直接在 main 函数里阻塞就行，这样也就不用特地使用一个通道（上例的<code class=\"language-text\">idleConnsClosed</code>）来通知外层不再阻塞</li>\n<li>Shutdown()对于正在处理的请求，会无限期地等待连接被释放然后再关停。更好的方法是设置一个时间，恰好 Shutdown()可以接收一个 context,如果 context 比 shutdown 更早完成的话，就会返回一个 context 错误。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> srv http<span class=\"token punctuation\">.</span>Server\n\n    <span class=\"token comment\">// 等待中断信号以优雅地关闭服务器（设置 5 秒的超时时间）</span>\n\tquit <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> os<span class=\"token punctuation\">.</span>Signal<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tsignal<span class=\"token punctuation\">.</span><span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span>quit<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>Interrupt<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&lt;-</span> quit <span class=\"token comment\">// 阻塞</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shutdown Server ...\"</span><span class=\"token punctuation\">)</span>\n\n\tctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithTimeout</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 在5s内关闭服务，超过5s就超时退出</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> srv<span class=\"token punctuation\">.</span><span class=\"token function\">Shutdown</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t    log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server Shutdown\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server exiting\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>知识点补充：这里都是接受了<code class=\"language-text\">os.Interrupt</code>信号，其实在<code class=\"language-text\">os.Interrupt</code>就是<code class=\"language-text\">syscall.SIGINT</code></p>\n<p>除了<code class=\"language-text\">SIGINT</code>之外，还有很多其他的信号</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// More invented values for signals</span>\n    SIGHUP  <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span>\n    SIGINT  <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token punctuation\">)</span>\n    SIGQUIT <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span>\n    SIGILL  <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x4</span><span class=\"token punctuation\">)</span>\n    SIGTRAP <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x5</span><span class=\"token punctuation\">)</span>\n    SIGABRT <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6</span><span class=\"token punctuation\">)</span>\n    SIGBUS  <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x7</span><span class=\"token punctuation\">)</span>\n    SIGFPE  <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span>\n    SIGKILL <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x9</span><span class=\"token punctuation\">)</span>\n    SIGSEGV <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xb</span><span class=\"token punctuation\">)</span>\n    SIGPIPE <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xd</span><span class=\"token punctuation\">)</span>\n    SIGALRM <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xe</span><span class=\"token punctuation\">)</span>\n    SIGTERM <span class=\"token operator\">=</span> <span class=\"token function\">Signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>可以在终端上执行<code class=\"language-text\">kill -l</code>查看系统支持的信号。我们常常通过<code class=\"language-text\">kill -9 pid</code>这种方式来强制关闭进程，本质上就是给进程发送一个<code class=\"language-text\">SIGKILL</code>信号（此信号不能被程序捕捉）。同理<code class=\"language-text\">kill -2 pid</code>就是发送<code class=\"language-text\">SIGINT</code>信号，<code class=\"language-text\">kill pid</code>默认会发送<code class=\"language-text\">SIGTERM</code>信号。有时候使用 Ctrl+C 来中止程序，其发送的是<code class=\"language-text\">SIGINT</code>信号。</p>\n<p>具体的请参考<a href=\"https://zh.wikipedia.org/wiki/Unix%E4%BF%A1%E5%8F%B7\">unix 信号</a></p>\n<p>如果是在 go1.8 之前，可以使用一些库来实现优雅关机:</p>\n<ul>\n<li><a href=\"https://github.com/braintree/manners\">manners</a></li>\n<li><a href=\"https://github.com/tylerb/graceful\">graceful</a></li>\n</ul>\n<h2>优雅的重启</h2>\n<p>可以使用<a href=\"https://github.com/fvbock/endless\">fvbock/endless</a>来替换默认的 listener 实现优雅重启。</p>\n<p>可以简单看一下 endless 源码</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">/*\nhandleSignals listens for os Signals and calls any hooked in function that the\nuser had registered with the signal.\n*/</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>srv <span class=\"token operator\">*</span>endlessServer<span class=\"token punctuation\">)</span> <span class=\"token function\">handleSignals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> sig os<span class=\"token punctuation\">.</span>Signal\n\n\tsignal<span class=\"token punctuation\">.</span><span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span>\n\t\tsrv<span class=\"token punctuation\">.</span>sigChan<span class=\"token punctuation\">,</span>\n\t\thookableSignals<span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\n\tpid <span class=\"token operator\">:=</span> syscall<span class=\"token punctuation\">.</span><span class=\"token function\">Getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\tsig <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>srv<span class=\"token punctuation\">.</span>sigChan\n\t\tsrv<span class=\"token punctuation\">.</span><span class=\"token function\">signalHooks</span><span class=\"token punctuation\">(</span>PRE_SIGNAL<span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">switch</span> sig <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> syscall<span class=\"token punctuation\">.</span>SIGHUP<span class=\"token punctuation\">:</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Received SIGHUP. forking.\"</span><span class=\"token punctuation\">)</span>\n\t\t\terr <span class=\"token operator\">:=</span> srv<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fork err:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">case</span> syscall<span class=\"token punctuation\">.</span>SIGUSR1<span class=\"token punctuation\">:</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Received SIGUSR1.\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">case</span> syscall<span class=\"token punctuation\">.</span>SIGUSR2<span class=\"token punctuation\">:</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Received SIGUSR2.\"</span><span class=\"token punctuation\">)</span>\n\t\t\tsrv<span class=\"token punctuation\">.</span><span class=\"token function\">hammerTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">case</span> syscall<span class=\"token punctuation\">.</span>SIGINT<span class=\"token punctuation\">:</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Received SIGINT.\"</span><span class=\"token punctuation\">)</span>\n\t\t\tsrv<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">case</span> syscall<span class=\"token punctuation\">.</span>SIGTERM<span class=\"token punctuation\">:</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Received SIGTERM.\"</span><span class=\"token punctuation\">)</span>\n\t\t\tsrv<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">case</span> syscall<span class=\"token punctuation\">.</span>SIGTSTP<span class=\"token punctuation\">:</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>pid<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Received SIGTSTP.\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received %v: nothing i care about...\\n\"</span><span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tsrv<span class=\"token punctuation\">.</span><span class=\"token function\">signalHooks</span><span class=\"token punctuation\">(</span>POST_SIGNAL<span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到他就是监听了很多信号</p>\n<ul>\n<li>在接收到<code class=\"language-text\">SIGHUP</code>信号时候将会出发 fork 实现重启。</li>\n<li>在接收到<code class=\"language-text\">SIGINT</code>和<code class=\"language-text\">SIGTERM</code>时会触发优雅关机</li>\n<li>在接收到<code class=\"language-text\">SIGUSR2</code>时会调用 hanmerTime</li>\n</ul>\n<p>这样的话，就可以通过发送<code class=\"language-text\">kill -1 pid</code>来实现优雅重启了。由于优雅重启使用的是 fork，fork 子进程处理新请求，待原进程处理完当前请求之后在退出。所以前后的 pid 会发生变化。</p>\n<p>除了<a href=\"https://github.com/fvbock/endless\">fvbock/endless</a>，还可使用<a href=\"https://github.com/facebookarchive/grace\">grace</a>来实现优雅关机和重启。</p>\n<p>参考资料</p>\n<ul>\n<li><a href=\"%E4%BC%98%E9%9B%85%E5%9C%B0%E9%87%8D%E5%90%AF%E6%88%96%E5%81%9C%E6%AD%A2\">Gin Web Framework</a>(<a href=\"https://gin-gonic.com/zh-cn/docs/examples/graceful-restart-or-stop/\">https://gin-gonic.com/zh-cn/docs/examples/graceful-restart-or-stop/</a>)</li>\n<li><a href=\"https://www.liwenzhou.com/posts/Go/graceful_shutdown/\">优雅地关机或重启</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/Unix%E4%BF%A1%E5%8F%B7\">wikipedia unix 信号</a></li>\n<li><a href=\"https://grisha.org/blog/2014/06/03/graceful-restart-in-golang/\">Graceful Restart in Golang</a></li>\n</ul>","frontmatter":{"title":"如何优雅关机重启","date":"April 25, 2020","description":null}},"previous":{"fields":{"slug":"/portal-in-vue/"},"frontmatter":{"title":"Vue中的Portal技术"}},"next":{"fields":{"slug":"/source-code-of-koa/"},"frontmatter":{"title":"koa源码解析"}}},"pageContext":{"id":"f6ff3f26-2cbf-545c-9895-9b5479c33605","previousPostId":"1d6f3e24-4272-5a22-a919-6fba0dec7e18","nextPostId":"38ec0cec-3f05-55b7-a255-4ed3627c6e54"}},"staticQueryHashes":["2841359383","3257411868"]}