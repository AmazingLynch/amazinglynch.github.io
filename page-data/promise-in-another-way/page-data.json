{"componentChunkName":"component---src-templates-blog-post-js","path":"/promise-in-another-way/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"0e0f7f60-a48a-537d-8db7-3bb2d6db1678","excerpt":"看到标题，很多人要说了， 不就原生支持的  嘛，还有啥好封装的？或者说你要封装还不如直接使用 async , await 不就行了。如果你是这么想的，那么请继续阅读下去。  笔者最近在设计 API…","html":"<p>看到标题，很多人要说了，<code class=\"language-text\">Promise</code> 不就原生支持的 <code class=\"language-text\">Promise</code> 嘛，还有啥好封装的？或者说你要封装<code class=\"language-text\">Promise</code>还不如直接使用 async , await 不就行了。如果你是这么想的，那么请继续阅读下去。 <!-- more --></p>\n<p>笔者最近在设计 API 的时候，遇到这么一个很常见的场景。需要通过传入一个外部函数来控制代码的执行流程，比如在文件 上传之前，调用传入的函数来检查文件是否符合要求，只有符合要求的情况才会上传，否则就会中断。这个函数可能是异步的，也可能是是同步的，只有当结果是 <code class=\"language-text\">Promise.reolve(true)</code>或者 <code class=\"language-text\">true</code>的时候，才算符合要求。不符合要求的时候要提示一下，而且文件上传错误的时候也要提示。</p>\n<p>如果使用 Promise，实现代码可能如下</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">BeforeUpload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span>\n\n<span class=\"token keyword\">const</span> before<span class=\"token operator\">:</span> <span class=\"token function-variable function\">BeforeUpload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 用户传入的函数</span>\n  <span class=\"token keyword\">const</span> beforeResult <span class=\"token operator\">=</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> beforePromise <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">typeof</span> beforeResult <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span>\n      <span class=\"token operator\">?</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>beforeResult<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> beforeResult\n\n  beforePromise\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// true</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        toaster<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件不符合要求'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// beforePromise如果直接是 reject的话，这里不好区分 upload报错还是 beforePromise校验报错。</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到由于函数执行的结果类型不一样，需要将函数执行的结果转换为 <code class=\"language-text\">Promise</code>，这里会有一点啰嗦。</p>\n<p>而且，我们需要将 校验报错和上传报错区分开，上面的写法就不是很好了。可以在上面的基础上进行一些小修改，代码如下</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> beforeResult <span class=\"token operator\">=</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> beforePromise <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">typeof</span> beforeResult <span class=\"token operator\">===</span> <span class=\"token string\">'boolean'</span>\n      <span class=\"token operator\">?</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>beforeResult<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> beforeResult\n\n  beforePromise\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">await</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          toaster<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件不符合要求'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        toaster<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件不符合要求'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      toaster<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'上传出错'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>是可以达到目的，但是代码就很割裂，文件不符合要求的提示重复出现（当然这个和前面提到的需求相关，不过不妨碍，请继续阅读）</p>\n<p>接下来我们使用 async, await 来处理，由于校验和上传二者个错误需要分开处理，这里需要两个 try..catch</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> beforeResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>beforeResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toaster<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件不符合要求'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toaster<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件上传出错'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>async, await 能够处理这种情况，但是由于需要处理两种不同类型的报错，我们需要写两个 try … catch 来辨别不同的错误（这里不知有没有更优的方案），其实这里还可以将上传错误定一一个新的错误类型，使用一个 try…catch，在 catch 中根绝 Error 类型就知道是什么原因的报错，但是这里也不太好做。</p>\n<p>async, await + try … catch 再带来优秀的代码书写体验的同时，也让代码变得非常不好看，try … catch 让代码都往里缩进了。而且 async, await 目前还是要借助 babel/regenerator 来兼容不支持 此特性的浏览器，这是有额外的运行时成本。这也是笔者不那么喜欢 async, await 的原因。当然不得不承认 async，await 处理异步逻辑确实比 <code class=\"language-text\">Promise</code>直观。</p>\n<p>那有没有什么方法能够将二者的特性兼而有之呢？在笔者的探索过程中，go 语言的错误处理让笔者眼前一亮。</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">i<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这种出现错误，就要求及时处理的 api 设计不就能够符合我们的需求吗？</p>\n<p>我们需要一个 promiseWrapper 来对一个 promise 对象进行包装，让它的结果和错误以 tuple 的形式返回。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">promiseWrapper</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里最简单的一种形式，当然我们希望这个函数不仅仅可以接受 Promise 对象，还可接受普通对象, 只需要稍加修改</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MaybePromise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token constant\">T</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> value <span class=\"token keyword\">is</span> <span class=\"token builtin\">Promise</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object Promise]'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">promiseWrapper</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> MaybePromise<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> p <span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再回到之前的问题，再用 promisewrapper 来实现一下</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>beforeResult<span class=\"token punctuation\">,</span> beforeErr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseWrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>beforeResult <span class=\"token operator\">||</span> beforeErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toaster<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件不符合要求'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> uploadErr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseWrapper</span><span class=\"token punctuation\">(</span><span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uploadErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toaster<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件上传出错'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>代码是不是简洁干净了很多呢？</p>\n<p>如果有多个异步过程并行怎么办？先使用 Promise.all 返回一个 promise 然后丢给 promiseWrapper</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>file1<span class=\"token punctuation\">,</span> file2<span class=\"token punctuation\">,</span> file3<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span>file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>beforeResult<span class=\"token punctuation\">,</span> beforeErr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseWrapper</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>before<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>beforeResult<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> beforeErr<span class=\"token punctuation\">)</span>\n    toaster<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件不符合要求'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> uploadErr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseWrapper</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>uploadFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uploadErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toaster<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件上传出错'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意：上面代码表示所有的文件校验成功才会继续上传，只是为了举例，并不一定符合生产要求。</p>\n<h2>结论</h2>\n<p>可以看到，通过我们封装的 promiseWrapper 函数，在处理异步的时候相对于 原生 try…catch 来说，还是提供了一个新的思路，至于编码风格，就萝卜青菜，各有所爱了。</p>","frontmatter":{"title":"封装Promise，让他更好用一些","date":"May 15, 2021","description":"最简单的api也能封装！"}},"previous":{"fields":{"slug":"/component-update-in-vue3/"},"frontmatter":{"title":"Vue3中的组件更新"}},"next":{"fields":{"slug":"/security-in-language/"},"frontmatter":{"title":"从stackblitz看security"}}},"pageContext":{"id":"0e0f7f60-a48a-537d-8db7-3bb2d6db1678","previousPostId":"d8786538-ef0d-575a-9865-db1ddff367ea","nextPostId":"36c96ca8-0c8c-5903-a31d-c603ce15b434"}},"staticQueryHashes":["2841359383","3257411868"]}