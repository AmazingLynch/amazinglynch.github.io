{"componentChunkName":"component---src-templates-blog-post-js","path":"/watching-issues/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"0e81dcf5-8771-57cd-80da-565849e0ef69","excerpt":"日常开发学习过程中，会遇到一些奇怪的问题。这些问题的背后要么隐藏了作者对工程项目的理解，要么由于历史原因久久搁置成为我们使用的绊脚石。 React:Add a “module” entry in package.json to export ES2015 version of React…","html":"<p>日常开发学习过程中，会遇到一些奇怪的问题。这些问题的背后要么隐藏了作者对工程项目的理解，要么由于历史原因久久搁置成为我们使用的绊脚石。<!--more--></p>\n<p><a href=\"https://github.com/facebook/react/issues/10021\">React:Add a “module” entry in package.json to export ES2015 version of React</a></p>\n<p>原因是收益很小，其实感觉还是可以做的，只不过React团队认为这个优先级不高</p>\n<p><a href=\"https://github.com/fengyuanchen/vue-qrcode/issues/44\">vue-qrcode:Treat qrcode as dependency rather than peerDependency</a></p>\n<p>如果是peerDependency，用户可以自己手动选择安装那个版本额qrcode，如果是dependency的话，用户无法决定，也无需手动安装。</p>\n<p><a href=\"https://github.com/vitejs/vite/issues/3461\">vite:Lib mode should export types</a></p>\n<p>vite本身不会提供生成类型文件的能力，如果是纯ts 项目可以使用tsup这样的工具。如果含有vue组件，可以配置typescript插件生成类型文件，需要指定<code class=\"language-text\">enforce：pre</code>(此方法由本来提出，思路参考<a href=\"https://github.com/harrytran998/rep-vite-bunlder-vue-ts/issues/1#issuecomment-845233883\">issue</a>), 或者使用<a href=\"https://github.com/qmhc/vite-plugin-dts\">vite-dts-plugin</a></p>\n<p><a href=\"https://github.com/sindresorhus/ama/issues/446\">sindresorhus:Why don’t you add ES5 transpiled code to your modules for browsers?</a></p>\n<p>探讨库作者要不要提供转译好的代码，转译到es5还是es6？</p>\n<p><a href=\"https://github.com/microsoft/TypeScript/issues/43329\">Add flag to not transpile dynamic import() when module is CommonJS</a>\nNode 12+ 已经支持 dynamic import 语句，这也是 node 中使用纯 esm 模块的唯一方式，但是这个语句，tsc 会将其编译为 <code class=\"language-text\">require</code> 语句。</p>\n<p><a href=\"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\">Pure ESM package</a></p>\n<p>esm 已经被 Node 原生支持了，<a href=\"https://github.com/chalk/chalk/releases/tag/v5.0.0\">Chalk 5.0</a> 已经只导出 esm 格式的文件了。</p>","frontmatter":{"title":"watching-issues.md","date":"January 31, 2022","description":"从issue中观察学习"}},"previous":{"fields":{"slug":"/css-in-js-under-the-hood/"},"frontmatter":{"title":"css-in-js-under-the-hood"}},"next":{"fields":{"slug":"/ssh/"},"frontmatter":{"title":"ssh介绍"}}},"pageContext":{"id":"0e81dcf5-8771-57cd-80da-565849e0ef69","previousPostId":"667c84ac-2257-5d85-80da-b60e5674c258","nextPostId":"683e9335-de3c-5966-8c0d-c46a9240407b"}},"staticQueryHashes":["2841359383","965855181"]}