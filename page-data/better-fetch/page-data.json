{"componentChunkName":"component---src-templates-blog-post-js","path":"/better-fetch/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"f63ec00c-d3a8-53f0-981d-942e203c0def","excerpt":"浏览器可以使用 XMLHttpRequest 和 Fetch 来发送http请求，xhr API比较繁琐，但是兼容性好。fetch api 相对于 xhr 来说是更low-level的api，基本覆盖了xhr的所有功能，本文将介绍fetch相关的生态以及对于二者的一些思考。 fetch fetch api spec…","html":"<p>浏览器可以使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">Fetch</a> 来发送http请求，xhr API比较繁琐，但是兼容性好。fetch api 相对于 xhr 来说是更low-level的api，基本覆盖了xhr的所有功能，本文将介绍fetch相关的生态以及对于二者的一些思考。</p>\n<!-- more -->\n<h2>fetch</h2>\n<p><a href=\"https://fetch.spec.whatwg.org/#fetch-api\">fetch api spec</a> 相对于 xhr 的几个优点：</p>\n<ol>\n<li>no-cors</li>\n</ol>\n<p>fetch 支持 <code class=\"language-text\">no-cors</code> 请求，使用xhr发送一个跨域请求 会因为服务端没有设置 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\">CORS headers</a> 而失败，但是fetch 支持 <code class=\"language-text\">no-cors</code> 请求</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//whatever.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'no-cors'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这和请求一张图片是类似的，但是读不到响应的内容，不过可以被其他api消费到，比如在service-worker中</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tevent<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//www.google.co.uk/images/srpr/logo11w.png'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'no-cors'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>stream</li>\n</ol>\n<p>xhr 缺乏流的api，响应是内存中的一块buffer。而fetch提供了更加底层的用来操作数据流的api，<code class=\"language-text\">response.body</code> 是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Response/body\"><code class=\"language-text\">ReadableStream</code> 类型</a>。<code class=\"language-text\">Request</code> 和 <code class=\"language-text\">Response</code>对象上的 <code class=\"language-text\">.arrayBuffer()</code>, <code class=\"language-text\">.blob()</code> ,<code class=\"language-text\">.formData</code>，<code class=\"language-text\">.json()</code>, <code class=\"language-text\">.text()</code> 其实都是 stream reader。比如以最为常见的 <code class=\"language-text\">Response.json()</code>为例</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// you got the json object</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">.json()</code>方法接收一个 <code class=\"language-text\">Response</code>流，然后将其读取完成，转化为json格式，所以 <code class=\"language-text\">.json()</code>返回的是一个 Promise对象。</p>\n<p>当然 相对于 xhr 来说，fetch 也有暂时还实现不了的功能：</p>\n<ol>\n<li>fetch api 无法监听上传进度事件</li>\n</ol>\n<p>需要注意的是，fetch api 是可以通过 <code class=\"language-text\">response.body</code> 来监听响应进度的（download progress），因为它是 <code class=\"language-text\">ReadableStream</code> 类型，具体API可以参考 <a href=\"https://streams.spec.whatwg.org/#rs-class\">ReadableStream spec</a> , ReadableStream 可以一个chunk一个chunk的接收数据，只需要将已经接收到的chunk 的长度和响应的总长度做一下运算就可以得到进度，代码如下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Step 1: start the fetch and obtain a reader</span>\n\n<span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com/repos/javascript-tutorial/en.javascript.info/commits?per_page=100'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Step 2: get total length</span>\n<span class=\"token keyword\">const</span> contentLength <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Step 3: read the data</span>\n<span class=\"token keyword\">let</span> receivedLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// received that many bytes at the moment</span>\n<span class=\"token keyword\">let</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// array of received binary chunks (comprises the body)</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>done<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tchunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\treceivedLength <span class=\"token operator\">+=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>receivedLength<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>contentLength<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Step 4: concatenate chunks into single Uint8Array</span>\n<span class=\"token keyword\">let</span> chunksAll <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>receivedLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (4.1)</span>\n<span class=\"token keyword\">let</span> position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> chunk <span class=\"token keyword\">of</span> chunks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tchunksAll<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (4.2)</span>\n\tposition <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Step 5: decode into a string</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>chunksAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// We're done!</span>\n<span class=\"token keyword\">let</span> commits <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>commits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>请求的上传进度 fetch 目前是不支持的，如果有场景需要使用到这个功能，要用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/progress_event\">XMLHttpRequest progress事件</a>。</p>\n<h2>不是那么好用的fetch</h2>\n<p>fetch api 比 xhr 简单易用，但是也有一些需要注意的细节，比如可能会这么写</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// got data here</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>根据<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/fetch\">fetch文档</a>描述， 当遇到网络错误时，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/fetch\"><code class=\"language-text\">fetch()</code></a> 返回的 promise 会被 reject，并传回 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code class=\"language-text\">TypeError</code></a>，虽然这也可能因为权限或其它问题导致。成功的 fetch() 检查不仅要包括 promise 被 resolve，还要包括 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Response/ok\"><code class=\"language-text\">Response.ok</code></a> 属性为 true。HTTP 404 状态并不被认为是网络错误。</p>\n<p>也就是说上面的代码如果遇到接口 <code class=\"language-text\">400</code>, <code class=\"language-text\">500</code> 也会走到 <code class=\"language-text\">res.json()</code> ，这有点不合理。因此需要额外处理一下请求错误</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/some'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not found\"</span><span class=\"token punctuation\">)</span>\n\t\t    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unauthorized\"</span><span class=\"token punctuation\">)</span>\n\t\t    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">418</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a teapot !\"</span><span class=\"token punctuation\">)</span>\n\t\t    <span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Other error\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// got data here</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>基于fetch的封装</h2>\n<p>由于直接使用fetch 比较不好用，所以社区中又很多基于fetch封装的工具，这里介绍几个，<a href=\"https://github.com/sindresorhus/ky\">ky</a>, <a href=\"https://github.com/elbywan/wretch\">wretch</a>。</p>\n<p><a href=\"https://github.com/sindresorhus/ky\">ky</a> 的api 和 axios比较接近，支持拦截器，不过ky本身定位场景是现代的浏览器端，如果原生不支持<code class=\"language-text\">fetch</code>，需要自己手动引入 fetch polyfill，如果需要在同构场景使用（代码需要跑在浏览器端和node端），需要使用 <a href=\"https://github.com/sindresorhus/ky-universal\">ky-universal</a>。ky 的实现也很简单，有兴趣的读者可以自行查看。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> ky <span class=\"token keyword\">from</span> <span class=\"token string\">'ky'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ky<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>json<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>foo<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/elbywan/wretch\">wretch</a> 提供了链式api，通过插件提供扩展功能，代码也很少。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">wretch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/some\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">notFound</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">unauthorized</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">418</span><span class=\"token punctuation\">,</span> error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">res</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* uncaught errors */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Cross origin authenticated requests on an external API</span>\n<span class=\"token keyword\">const</span> externalApi <span class=\"token operator\">=</span> <span class=\"token function\">wretch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://external.api\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Base url</span>\n  <span class=\"token comment\">// Authorization header</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Cors fetch options</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">options</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> credentials<span class=\"token operator\">:</span> <span class=\"token string\">\"include\"</span><span class=\"token punctuation\">,</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">\"cors\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// Handle 403 errors</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span><span class=\"token function\">forbidden</span><span class=\"token punctuation\">(</span>handle403<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Fetch a resource</span>\n<span class=\"token keyword\">const</span> resource <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> externalApi\n  <span class=\"token comment\">// Add a custom header for this request</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"If-Unmodified-Since\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Wed, 21 Oct 2015 07:28:00 GMT\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/resource/1\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>handleResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Post a resource</span>\nexternalApi\n  <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/resource\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"Shiny new\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"resource object\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>handleNewResourceResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>思考</h2>\n<p>站在2023年这个时间节点，许多人都觉得，直接用<a href=\"https://github.com/axios/axios\">axios</a>就好了，确实，再过去几年，axios凭借着它简单易用的api以及可同在同构应用中使用，已经成为了许多项目的必备。axios在经过八年多不算很频繁地迭代，终于在 2022年10月份<a href=\"https://github.com/axios/axios/releases/tag/v1.0.0\">发布了v.1.0.0</a> 。axios依然在浏览器端仍然使用 XMLHttpRequest api的习惯。然而在这八年的时间里，fetch api已经得到了越来越多浏览器的支持，甚至可以说 现代浏览器都支持fetch，见<a href=\"https://caniuse.com/fetch\">caniuse</a>。aixos很多功能在 fetch 中都有更加精简的实现，这也是基于fetch封装的库会比axios小很多的原因。</p>\n<p>另外一个需要注意的点在于，在边缘计算、serverless如火如荼的今天，很多 edge runtime 都会实现 fetch 而不会实现 XMLHttpRequest，因为 fetch 是属于 web 标准 api，而 XMLHttpRequest 是属于 browser api。而edge runtime本质来说是一个服务端环境。</p>\n<p>Node在 v17.5 也<a href=\"https://github.com/nodejs/node/pull/41749\">支持了fetch</a>。<a href=\"https://edge-runtime.vercel.sh/features/available-apis\">vercel edge runtime支持了一整套 fetch 的 api</a> 。cloudflare worker runtime 使用了V8 引擎，同时也实现了包括 fetch 在内的很多现代浏览器的API，见<a href=\"https://developers.cloudflare.com/workers/runtime-apis/\">runtime apis</a>。deno 作为一个js runtime也同样实现了fetch 这种标砖的web api，见<a href=\"https://deno.land/manual@v1.30.2/examples/fetch_data\">deno fetch</a>。这也就意味着在这些实现了 fetch api的runtime中，你可以使用fetch，而XMLHttpRequest以及基于XMLHttpRequest封装的库就不能使用了。想象一下，如果在一个同构项目中或者一个需要跑在 deno runtime或者cloudflare workder环境中的代码中，使用一个基于fetch的库会比使用基于XMLHttpRequest的库体验更丝滑。</p>\n<p>参考</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35549547/fetch-api-vs-xmlhttprequest\">Fetch API vs XMLHttpRequest</a></li>\n<li><a href=\"https://jakearchibald.com/2015/thats-so-fetch/#no-cors-and-opaque-responses\">That’s so fetch</a></li>\n<li><a href=\"https://fetch.spec.whatwg.org/#fetch-api\">fetch api spec</a></li>\n<li><a href=\"https://javascript.info/fetch-progress\">fetch download progress</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Y6IUB5DxGN4\">You might be using <code class=\"language-text\">fetch</code> in JavaScript wrong</a></li>\n<li><a href=\"https://github.com/sindresorhus/ky\">ky</a></li>\n<li><a href=\"https://github.com/axios/axios\">axios</a></li>\n<li><a href=\"https://github.com/elbywan/wretch\">wretch</a></li>\n<li><a href=\"https://stateful.com/blog/node-fetch\">fetch() In Node.js Core: Why You Should Care</a></li>\n</ul>","frontmatter":{"title":"更好用的fetch","date":"February 04, 2023","description":"你的新项目或许更应该使用fetch？"}},"previous":{"fields":{"slug":"/pnpm-monorepo/"},"frontmatter":{"title":"pnpm与monorepo"}},"next":null},"pageContext":{"id":"f63ec00c-d3a8-53f0-981d-942e203c0def","previousPostId":"bbfbebdd-310b-55d6-8403-8df686922a28","nextPostId":null}},"staticQueryHashes":["2841359383","965855181"]}