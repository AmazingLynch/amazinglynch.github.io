{"componentChunkName":"component---src-templates-blog-post-js","path":"/dynamic-params-in-composition-api/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"f0b4a57e-1a36-5d78-a906-ab37f6d1ce6a","excerpt":"Composition api 提供了新的逻辑抽象的方式，在代码的组织，抽离方面对于开发者要求更高了，本文将探讨，如果将参数传递给 Composition api.  背景 以一个请求数据的composition api为例。 使用时，比如这里，我们使用 useFetch…","html":"<p>Composition api 提供了新的逻辑抽象的方式，在代码的组织，抽离方面对于开发者要求更高了，本文将探讨，如果将参数传递给 Composition api. <!-- more --></p>\n<h2>背景</h2>\n<p>以一个请求数据的composition api为例。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> isPending <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>_data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\tdata<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> _data\n\t\t\tisPending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\terror<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> err\n\t\t\tisPending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tdata<span class=\"token punctuation\">,</span>\n\t\terror<span class=\"token punctuation\">,</span>\n\t\tisPending\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用时，比如这里，我们使用 useFetch来获取用户信息</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> isPending <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user/ryan'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>但是，如果，用户名是动态的，比如，来自props，或者其他变量呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> isPending <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/user/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这样只会调用请求一次，之后 <code class=\"language-text\">props.name</code> 变化之后，并不会重新拉接口。</p>\n<p>可以将参数设置为一个函数</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>getUrl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> isPending <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tisPending<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\tdata<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\t\terror<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>_data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\tdata<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> _data\n\t\t\t\tisPending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\terror<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> err\n\t\t\t\tisPending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> immediate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tdata<span class=\"token punctuation\">,</span>\n\t\terror<span class=\"token punctuation\">,</span>\n\t\tisPending\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用时</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/user/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这样就能在<code class=\"language-text\">props.name</code> 改变时，自动请求了。</p>\n<p>有没有简单一些的方法呢？可以使用 <code class=\"language-text\">watchEffect</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useFetch</span><span class=\"token punctuation\">(</span>getUrl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> isPending <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tisPending<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\tdata<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\t\terror<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\t\t<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>res <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>_data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\tdata<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> _data\n\t\t\t\tisPending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\terror<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> err\n\t\t\t\tisPending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\tdata<span class=\"token punctuation\">,</span>\n\t\terror<span class=\"token punctuation\">,</span>\n\t\tisPending\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">watchEffect</code> 会自动收集effect中的依赖，并且 <code class=\"language-text\">watchEffect</code> 执行时，effect 必会执行一次（效果与 watch 的 immediate: true 一样)。在上面的实现中，在<code class=\"language-text\">watchEffect</code>中 会调用 getUrl 函数，在这个函数中，会访问 <code class=\"language-text\">props.name</code>, 由于 <code class=\"language-text\">props</code> 时 <code class=\"language-text\">shallowReactive</code> 的，所以会被收集依赖，当 <code class=\"language-text\">props.name</code> 改变时，effect 会执行一次。这样就能轻松实现 <code class=\"language-text\">props.name</code> 改变时自动请求的需求了。</p>","frontmatter":{"title":"composition api 的参数传递","date":"June 13, 2021","description":"vue composition api 的参数传递有什么讲究？"}},"previous":{"fields":{"slug":"/renderer/"},"frontmatter":{"title":"renderer"}},"next":{"fields":{"slug":"/rethink-vue-composition/"},"frontmatter":{"title":"Rethink vue composition api"}}},"pageContext":{"id":"f0b4a57e-1a36-5d78-a906-ab37f6d1ce6a","previousPostId":"d58b74a4-4bf7-5734-8eec-f4b18825a725","nextPostId":"79ca5199-ef96-5240-95b5-308984ad1f80"}},"staticQueryHashes":["2841359383","3257411868"]}