{"componentChunkName":"component---src-templates-blog-post-js","path":"/building-web-application/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"d072998f-1434-56ad-a10e-4c8f6b38388b","excerpt":"构建 web 应用 前面几章介绍了一些 Node 的基本知识，这里开始介绍如何用 Node 去构建一个 web 应用。包括请求的解析，数据上传，路由解析，中间件的知识，这些知识是 Node 中 HTTP…","html":"<h1>构建 web 应用</h1>\n<p>前面几章介绍了一些 Node 的基本知识，这里开始介绍如何用 Node 去构建一个 web 应用。包括请求的解析，数据上传，路由解析，中间件的知识，这些知识是 Node 中 HTTP 模块提供的最基础的功能，同时也是如今众多框架的基础。</p>\n<!--more-->\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\nhttp\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>真实的业务场景还需要大量的工作，但是所有的一切都基于 request 事件处理函数展开,把最终结果返回一个上面的函数作为参数即可。在具体业务开始前，需要为业务预处理一些细节，这些细节将会挂载上 req 或者 res 对象上，供业务代码使用</p>\n<h2>基础功能</h2>\n<h3>请求方法</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"POST\"</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>'\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>'\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"PUT\"</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>'\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"GET\"</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>'\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>路径解析</h3>\n<p>HTTP_Parser 会将请求路径解析为 req.url。</p>\n<blockquote>\n<p>需要注意的是客户端代理（浏览器）会将地址解析成报文将路径和查询部分放在报文的第一行。hash 部分会被丢弃，不会存在于报文的任何地方。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//静态文件服务器</span>\n<span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> pathname <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pathname\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROOT</span><span class=\"token punctuation\">,</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'找不到相关文件'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>查询字符串</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> querystring <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'querystring'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> query <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">/*\n    也可以通过url.parse()的第二个参数parseQueryString &lt;boolean> 如果为 true，则 query 属性总会通过 querystring 模块的 parse() 方法生成一个对象。 如果为 false，则返回的 URL 对象上的 query 属性会是一个未解析、未解码的字符串。 默认为 false。\n    var query = url.parse(req.url,true)\n    */</span>\n    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Cookie</h3>\n<p>HTTP 是一个无状态的歇协议，而真实的业务场景确是需要一定的状态的，否则无法区分用户之间的身份。\nCookie 的处理分为以下几步</p>\n<ol>\n<li>服务器向客户端发送 Cookie</li>\n<li>浏览器将 Cookie 保存</li>\n<li>之后每次浏览器都会讲 Cookie 发现服务器</li>\n</ol>\n<p>cookie 被 HTTP_Parser 解析到 req.header 上，可以通过 req.headers.cookie 访问(key=value;key=value),一般来说在业务逻辑代码执行前，要将转化好的 Cookie 对象挂载到 req 对象上，让之后的业务代码可以直接访问</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span>cookies <span class=\"token operator\">=</span> <span class=\"token function\">parseCookie</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>服务器通过 Set-Cookie 字段来写 Cookie。写一个完整的 cookie 字段格式如下\n<em>Set-Cookie:name=value;Path=/;Expires=Sun,23-Apr-23 22.02.33 GMT;Domain=.domain.com</em>\n其中 name=value 是必须的，其他诸多选项用来控制之后浏览器向服务器发送 cookie 的行为的</p>\n<div class=\"gatsby-highlight\" data-language=\"javascipt\"><pre class=\"language-javascipt\"><code class=\"language-javascipt\">var serialize = function(name,value,option) {\n    var pairs = [name + &#39;=&#39; + encode(val)];\n    opt = opt || {}\n    if(opt.maxAge) pairs.push(&#39;Max-Age=&#39; + option.maxage)\n    if(opt.domain) pairs.push(&#39;Domain=&#39; + option.domain)\n    if(opt.path) pairs.push(&#39;Path=&#39; + option.path)\n    if(opt.expires) pairs.push(&#39;Expires=&#39; + option.opt.expires.toUTCString())\n    if(opt.httpOnly) pairs.push(&#39;HttpOnly&#39;)\n    if(opt.secure) pairs.push(&#39;Secure&#39;)\n    return pairs.join(&#39;;&#39;)\n}\nvar handle = function(req,res) {\n    if(!req.cookies.isVisit) {\n        res.setHeader(&#39;Set-Cookie&#39;,serialize(&#39;isVisit&#39;,&#39;1&#39;))\n        res.writeHead(200)\n        res.end(&#39;欢迎你第一次来&#39;)\n    } else {\n        res.writeHead(200)\n        res.end(&#39;欢迎你再次到来&#39;)\n    }\n}</code></pre></div>\n<p>前端脚本也可以修改 Cookie，Cookie 在没有过期的时候，之后会随着 http 请求发送给服务器，如果 Cookie 太多，会造成浪费。另外如果将 Cookie 的域设置在根节点，几乎所有的子节点都会带上这些 Cookie。而一些静态文件用不着，所以可以为静态文件设置一个不同的域名。或者给 cookie 设置适当的域。</p>\n<blockquote>\n<p>为静态文件设置不同的域名还有一个好处就是可以突破浏览器下载线程数量的限制，因为域名不同，可以将下载线程数翻倍。但是多一个域名，也会多一次 DNS 查询</p>\n</blockquote>\n<h3>Session</h3>\n<p>Cookie 的问题在于容易变得体积过大，而且前后端都可以修改，数据很容易被篡改，其对敏感数据的保护是无效的。\nSession 就是为了解决上述问题而生的，Session 数据只保留在服务器端，客户端无法修改，数据安全，而且也无须在协议中每次传递。但是如何将每个客户和服务器中的数据对应起来呢？\nsession 生成后，只要用户继续访问，服务器就会更新 session 的最后访问时间，并维护该 session，用户没访问服务器一次，无论是否该读写 session，服务器都认为用户的 session 活跃了一次。</p>\n<h4>基于 Cookie 来实现用户和数据的映射</h4>\n<p>依赖于 Cookie,口令放在 cookie 中。session 有效期通常很短，普遍设置为 20 分钟，如果 20 分钟内客户端和浏览器没有交互，服务器就把数据删除\n口令由服务器自动生成。同一机器的两个浏览器窗口 访问服务器时，会生成两个不同的 session。但是由浏览器窗口内的链接，脚本打开的新窗口，这类子窗口会共享父窗口的 cookie，因此会共享一个 session。以下代码中的 key 值是一个约定的 session 口令，可以随意约定，connect 默认采用 connect_id，有的则使用 session_id。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//生成session</span>\n<span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//key就是Cookie中session的口令，可以约定</span>\n<span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> <span class=\"token string\">'session_id'</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">EXPIRES</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">generate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    session<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    session<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">expire</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">EXPIRES</span>\n    <span class=\"token punctuation\">}</span>\n    sessions<span class=\"token punctuation\">[</span>session<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> session\n    <span class=\"token keyword\">return</span> session\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//请求到来时，检查cooke中的口令和服务器端的数据</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        req<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> sessions<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span>expire <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//更新超时时间</span>\n                session<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span>expire <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">EXPIRES</span><span class=\"token punctuation\">;</span>\n                req<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> session\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//超时了，删除旧的数据，并重新生成</span>\n                <span class=\"token keyword\">delete</span> session<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n                req<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//如果session过期或口令不对，重新生成session</span>\n            req<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//响应给客户端时设置新的值，hack响应对象的writeHead()方法，在其内部注入Cookie逻辑</span>\n<span class=\"token keyword\">var</span> writeHead <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>writeHead\nres<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">writeHead</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> cookies <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Set-Cookie'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Set-Cookie'</span><span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    cookies <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>cookies<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> cookies<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>cookies<span class=\"token punctuation\">,</span>session<span class=\"token punctuation\">]</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Set-Cookie'</span><span class=\"token punctuation\">,</span>cookies<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">writeHead</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>isVisit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>isVisit <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'欢迎你第一次来'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'再次欢迎你'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>通过查询字符串实现浏览器和服务器端数据的对应</h4>\n<p>检查请求的查询字符串，如果没有值，会先生成新的带值得 url</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getURL</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_url<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>_url<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    obj<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//形成跳转，让客户端重新发起请求</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">redirct</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Location'</span><span class=\"token punctuation\">,</span>url<span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">302</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getURL</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>session<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> sessions<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span>expire <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//更新超时时间</span>\n                session<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span>expire <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">EXPIRES</span><span class=\"token punctuation\">;</span>\n                req<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> session\n                <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//超时了，删除旧的数据，并重新生成</span>\n                <span class=\"token keyword\">delete</span> session<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span>  req<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getURL</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>session<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//如果session过期或口令不对，重新生成session</span>\n            <span class=\"token keyword\">var</span> session <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getURL</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>session<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上诉这种方案没有第一种方案好，因为这种使用查询字符串的方式，如果你复制了 url 给别人，别人就拥有和你一样的身份了。</p>\n<h3>缓存</h3>\n<ul>\n<li>添加 Expires 和 Cache-Control 到报文头</li>\n<li>配置 Etags</li>\n<li>让 Ajax 缓存\n通常来说，POST、DELETE、PUT 这类行为性的请求操作不做缓存，大多数缓存只应用在 GET 请求中。![缓存][1]</li>\n</ul>\n<p>关于是否可用查询。浏览器如果不能确认这份本地文件可以直接使用，会想服务器发送一次条件请求。有两种方式，时间戳和 ETag</p>\n<ul>\n<li>时间戳：浏览器会在普通的 get 请求报文中，附带 If-Modified-Since 字段。<em>If-Modified-Since:Sun,03 Feb 2013 06:01:22 GMT</em>。服务器如果没有新的版本就会响应 304，如果有新版本就发送新版本。并将 Last-Modified 字段更新。问题在于这种方式只能精确到秒，而且文件时间戳改变了，内容却不定改动。（使用 touch 命令）</li>\n<li>ETag：服务端生成，服务端可以决定他的生成规则。一般是内容的散列值。请求响应头是 If-None-Match/ETag 字段。<em>If-None-Match:“82-1524485454000”</em>,<em>ETag:“82-1524485454000”</em></li>\n</ul>\n<p>上诉两种方式都需要重新请求服务器，可以使用 Expires 或者 Cache-Control 字段让浏览器进行缓存，一定条件下可以不用再向服务器请求。Expires 会有浏览器和服务器不同步的问题，如服务器提前过期。而 Cache-Control 可以有效避免这个问题。</p>\n<p>使用 Expires 和 Cache-Control 字段又叫强缓存，意思就是如果命中缓存将不需要再和服务器进行交互，而使用 Etags 或者 If-Modifie-Since 则是弱缓存，需要和浏览器再进行一次交互（条件请求）的叫做协商缓存。强缓存的优先级要高于协商缓存。在强缓存没有命中的情况下才会进行协商缓存（缓存的时间到期了，并不意味着资源资源内容发生改变）</p>\n<h3>清除缓存</h3>\n<p>当服务器意外更新了资源，又无法通知客户端更新。由于浏览器是根据 URL 进行缓存，一般解决方案是每次发布，路径中跟随 web 应用的版本号或者文件内容的 hash 值。</p>\n<h3>Basic 认证</h3>\n<p>Basic 认证是 HTTP 中非常简单的认证方式，因为简单（近乎于明文，一般只有 https 才会使用），所以不是很安全，不过仍然非常常用。\n当一个客户端向一个需要认证的 HTTP 服务器进行数据请求时，如果之前没有认证过，HTTP 服务器会返回 401 状态码，要求客户端输入用户名和密码。用户输入用户名和密码后，用户名和密码会经过 BASE64 加密附加到请求信息中再次请求 HTTP 服务器，HTTP 服务器会根据请求头携带的认证信息，决定是否认证成功及做出相应的响应。<em>Authorization:Basic dXNlcjpwYXNz</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span>password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span>username <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>'base64<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">funtion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> auth <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">var</span> parts <span class=\"token operator\">=</span> auth<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> part<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token comment\">//Basic</span>\n    <span class=\"token keyword\">var</span> encoded <span class=\"token operator\">=</span> part<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">var</span> decoded <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">,</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> decoded<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> pass <span class=\"token operator\">=</span> decoded<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">checkUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>pass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WWW-Authenticate'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Basic realm=\"Secure Area\"'</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>数据上传</h2>\n<p>如果请求中还带有 Transfer-Encoding 或 Content-Length 即可判断请求中带有内容</p>\n<blockquote>\n<p>HTTP_Parser 解析完请求头之后触发’request’事件，如果有请求体的话，报文内容会通过 data 事件从触发，我们需要以流的方式处理</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">hasBody</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transfer-encoding'</span> <span class=\"token keyword\">in</span> req<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">||</span> <span class=\"token string\">'content-length'</span> <span class=\"token keyword\">in</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">hasBody</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> buffers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            buffers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            req<span class=\"token punctuation\">.</span>rawBody <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>buffers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>表单数据</h3>\n<p>请求头 Content-Type:application/x-www-form-urlencoded。报文体内容 foo=bar&#x26;&#x26;baz=val</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'content-type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>rawBody<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">todo</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>JSON 数据</h3>\n<p>请求头 Content-Type:application/json。例如:<em>Content-Type:application/json;charset=utf-8</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">mime</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'content-type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mime</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      req<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>rawBody<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid JSON'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">todo</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>XML 数据</h3>\n<p>请求头 Content-Type:application/xml。需要借助库来实现 XML 数据的解析</p>\n<h3>文件上传</h3>\n<p>请求头 Content-Type:multipart/form-data。例如<em>Content-Type:multipart/form-data;boundary=AaB03x\nContent-Length:58812</em>。其中 boundary 是随机生成的一段字符串，指定每部分内容的分界符。报文体的内容通过”··“分割,Content-Length 表示报文体长度。以流的方式处理。</p>\n<h3>数据上传的安全问题</h3>\n<p>在解析表单数据，JSON，XML 都是先接收保存数据，然后在解析的。这种方案在数据量大，高并发的情况下容易发生内存耗完的情况。一般有两个解决方案</p>\n<ul>\n<li>限制上传文件内容大小，超过限制，停止接收，返回 400</li>\n<li>通过流式解析，将数据流导向到磁盘中，Node 只保留文件路径等小数据</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> <span class=\"token number\">1024</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> received <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'content-length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'content-length'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token comment\">//内容超过长度限制，返回413</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">&amp;&amp;</span> len <span class=\"token operator\">></span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">413</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//limit,针对没有Content-Length字段的请求</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        received <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">.</span>length\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>received <span class=\"token operator\">></span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            req<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>路由解析</h2>\n<h3>文件路径型</h3>\n<p>url 路径和网站目录一直，无须转换，非常直观。通过 url 直接请求静态源文件，通过 url 找到对应脚本，web 服务器根据文件后缀去好脚本解析器，并传入 http 上下文，执行脚本，发出响应。</p>\n<h3>MVC</h3>\n<p>用户请求的 URL 和具体脚本所在路径没有任何关系\n![MVC][2]</p>\n<ul>\n<li>控制器（Controller）,一组行为的集合</li>\n<li>模型（Model），数据相关的操作和封装</li>\n<li>视图（View），视图渲染\n工作模式如下</li>\n</ul>\n<ol>\n<li>路径解析，根据 URL 寻找到对应控制器</li>\n<li>行为调用相关模型</li>\n<li>数据操作结束后，调用视图和相关数据进行页面渲染，输出到客户端</li>\n</ol>\n<p>URL 如何映射到 MVC 有几种方法：手工映射（正则匹配，参数解析），自然映射</p>\n<h4>手工映射</h4>\n<p>需要一个路由文件来讲 URL 映射到对应控制器</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//一个处理设置用户信息的控制器</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//to do something</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//一个将url映射到控制器的函数</span>\n<span class=\"token keyword\">var</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">use</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span>action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    routes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> pathname <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pathname\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> routes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> route <span class=\"token operator\">=</span> routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pathname <span class=\"token operator\">===</span> route<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> action <span class=\"token operator\">=</span> route<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token function\">acrion</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">handle404</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/setting'</span><span class=\"token punctuation\">,</span>exports<span class=\"token punctuation\">.</span>setting<span class=\"token punctuation\">)</span></code></pre></div>\n<p>而正则匹配就是以正则表达式的形式去匹配路由。参数解析主要是针对 url 中带有参数的情况，如*/profile/:usename*,将 url 中的字段解析成 username 放到 req.params 中。</p>\n<h4>自然映射</h4>\n<p>路由按照一种约定的方式自然而然地实现了路由，而无须去维护路由。路径形式例如*/controller/action/param1/param2/param3*</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> pathname <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pathname\n    <span class=\"token keyword\">var</span> paths <span class=\"token operator\">=</span> pathname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> controller <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">'index'</span>\n    <span class=\"token keyword\">var</span> action <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">'index'</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> module\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        module <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controller/'</span> <span class=\"token operator\">+</span> controller<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handle500</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> module<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">method</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handle500</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>RESTful</h3>\n<p>REST:Representational State Transfer,表现层状态转移。符合 REST 设计叫做 RESTful。设计哲学在于将服务器提供的内容实体看做一个资源，并变现在 URL 上，对这个资源的操作体现在 HTTP 请求上（POST,DELETE,PUT,GET 增删改查，之前是 GET，POST 方法传入在 URL 上传递 action）。对于资源的具体变现形态也不同于过去一样表现在 URL 的后缀上，而是有请求报头的 Accept 字段和服务器支持情况来决定。如<em>Accept:application/json,application/xml</em>。服务器可以根据这个字段做出响应，并且在响应报文中的 Content-Type 字段中告知。总之就是通过 URL 设计资源、请求方法定义资源操作，通过 Accept 决定资源的表现形式。</p>\n<h2>中间件</h2>\n<p>使用中间件来隔离基础设施与业务逻辑中间的细节，让开发者能够关注在业务的开发上。由于 Node 异步运行机制的问题，需要一种机制来实现，在当前中间件处理完成后，通知下一个中间件执行。（例如尾触发）</p>\n<p>![中间件][3]</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//querystring解析中间件</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">querystring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  req<span class=\"token punctuation\">.</span>query <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//cookie解析中间件</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cookie</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> cookie <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>heders<span class=\"token punctuation\">.</span>cookie\n  <span class=\"token keyword\">var</span> cookies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> pair <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span>\n      cookies<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  req<span class=\"token punctuation\">.</span>cookies <span class=\"token operator\">=</span> cookies\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以使用 app.use()来将中间件都存进 stack 数组中保存，等待匹配后触发执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'all'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">use</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> handle\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> path <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        handle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//第一个参数作为路径</span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token function\">pathRegexp</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">//将中间件存进stack数组</span>\n            <span class=\"token literal-property property\">stack</span><span class=\"token operator\">:</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        handle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token function\">pathRegexp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token literal-property property\">stack</span><span class=\"token operator\">:</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    routes<span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//匹配函数</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">match</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pathname<span class=\"token punctuation\">,</span>routes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> stacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> routes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> route <span class=\"token operator\">=</span> routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> route<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>regexp\n        <span class=\"token keyword\">var</span> matched <span class=\"token operator\">=</span> reg<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>matched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            stacks <span class=\"token operator\">=</span> stacks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> stacks\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> pathname <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pathname\n    <span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//获取all()方法里的中间件</span>\n    <span class=\"token keyword\">var</span> stacks <span class=\"token operator\">=</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">,</span>routes<span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnPropery</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//根据请求方法，获取相关中间件</span>\n        stacks<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">,</span>routes<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stacks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>stacks<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handle404</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>异常处理</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> stack</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">handle500</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//从stack数组中取出中间件并执行</span>\n    <span class=\"token keyword\">var</span> middleware <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>页面渲染</h2>\n<h3>内容响应</h3>\n<p>响应报头<em>Content-Encoding</em>、<em>Content-Length</em>、<em>Content-Type</em>。浏览器会根据响应头的 Content-Type 采用不同的而处理方式。Content-Type 的值也叫 MIME（Multipurpose Internet Mail Extensions）值。不同的文件类型有不同的 MIME 值。\n附件下载：无论响应内容什么样的 MIME 值，都不需要客户端打开它，只需要弹出并下载它即可。可以使用<em>Content-Disposition</em>字段。这个字段影响的行为是客户端会根据这个值判断是应该将报文数据当做即时浏览的内容（inline），还是可以下载的附件（attachment）。\n<em>Content-Disposition:attachment;filename=“filename.txt”</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">res<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sendfile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filepath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> stat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> stream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> mime<span class=\"token punctuation\">.</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">,</span> stat<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'attachment'</span> <span class=\"token operator\">+</span> filename <span class=\"token operator\">+</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>模板</h3>\n<p>模板实现的其实就是字符串的拼接</p>","frontmatter":{"title":"构建web应用","date":"December 02, 2017","description":"使用Node.js 来构建应用是一件非常简单的事，本文在前文的基础上介绍如何在Node环境下构建一个web应用"}},"previous":{"fields":{"slug":"/net-in-nodejs/"},"frontmatter":{"title":"Node中的网络编程"}},"next":{"fields":{"slug":"/more-about-promise/"},"frontmatter":{"title":"Promise一些细节"}}},"pageContext":{"id":"d072998f-1434-56ad-a10e-4c8f6b38388b","previousPostId":"12efc59f-c0f4-5781-9375-527ebb7448c3","nextPostId":"2873ffea-44be-5d43-b9bf-7823dd22edf4"}},"staticQueryHashes":["2841359383","965855181"]}