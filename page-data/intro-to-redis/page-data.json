{"componentChunkName":"component---src-templates-blog-post-js","path":"/intro-to-redis/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"ce3ad1d0-268e-5244-8083-63cf990e5dc7","excerpt":"Redis是一个支持网络，可基于内存亦可持久化的日志型、key-value数据存储系统。支持string，list，set，zset(有序集合)，hash。而且操作都是原子性的（要么成功执行，要么完全不执行）。redis数据都是缓存在内存中的，和memcached的区别在于redis…","html":"<p>Redis是一个支持网络，可基于内存亦可持久化的日志型、key-value数据存储系统。支持string，list，set，zset(有序集合)，hash。而且操作都是原子性的（要么成功执行，要么完全不执行）。redis数据都是缓存在内存中的，和memcached的区别在于redis会周期性的把更新的数据写入磁盘或者把修改操作西写入追加的记录文件。实现master-slave（主从）同步。</p>\n<!--more-->\n<h2>Redis命令</h2>\n<h3>redis-server:启动服务器</h3>\n<p>如果配置好了环境变量，可以直接运行<em>redis-server.exe redis.windows.conf</em>开启服务，其中<em>redis.windows.conf</em>是配置文件，省略则按照默认配置开启。\n如果没有配置好环境变量则需要在redis目录下执行该命令。</p>\n<h3>redis-cli:启动客户端</h3>\n<p>如果配置好了环境变量，可以直接运行命令<em>redis-cli</em>或者<em>redis-cli -h host -p port -a password</em>启动redis客户端。启动完成之后可以在客户端执行<em>PING</em>命令检测redis服务是否启动（如果启动成功会出现PONG）</p>\n<h3>Redis键管理</h3>\n<p>Redis使用key-value的形式存储数据。Redis对键有各种设置，比如设置过期时间啊，修改键名称啊等等\n详情请查看<a href=\"http://www.redis.cn/commands.html#generic\">redis键命令</a>。</p>\n<h3>Redis字符串</h3>\n<ul>\n<li>设置指定key的值：<em>SET key value</em> => SET name jack</li>\n<li>查询指定key的值：<em>GET key</em> => GET name</li>\n</ul>\n<p>当然还有很多命令用于处理更加复杂的去设置值为字符串的键值对，比如同时设置多个key-value对，获取指定key所储存的字符串的长度。对key中储存的数字增一等。\n详情请查看<a href=\"http://www.redis.cn/commands.html#string\">redis string命令</a></p>\n<h3>Redis 哈希（hash）</h3>\n<p>Redis hash是一个string类型的field和value的映射表，hash特别适合存储对象</p>\n<ul>\n<li>同时将多个field-value对设置到哈希表key中：<em>HMSET key field1 value1 [field2 value2]</em> => HMSET info name jack age 22</li>\n<li>将哈希表key中的字符field的值设为value：<em>HSET key field value</em>* => HSET info name coco</li>\n<li>获取存储在哈希表中指定key的所有字段和值：<em>HGETALL key</em> => HGETALL info</li>\n<li>获取存储在哈希表中指定字段的值：<em>HGET key field</em> => HGET info name\n还有其他一些命令可以对hash表进行更加复杂的操作，比如获取哈希表中字段的数量，为哈希表key中的指定字段的整数值加上增量。\n详情请查看<a href=\"http://www.redis.cn/commands.html#hash\">redis 哈希命令</a></li>\n</ul>\n<h3>Redis列表（list）</h3>\n<p>Redis列表是简单的字符串列表，按照插入顺序排序。可以添加到一个元素到列表头（左边）或者尾部（右边）</p>\n<ul>\n<li>将一个或多个值插入到列表头部：<em>LPUSH key value1 [value2 value3]</em> => LPUSH friend coco</li>\n<li>将一个值插入到已存在的列表头部：<em>LPUSHX key value</em> => LPUSHX friend jack</li>\n<li>获取列表指定范围内的元素：<em>LRANGE key start end</em>=> LRANGE friend 0 10\n还有其他命令可以通过索引获取列表中的元素，获取列表长度，在指定位置插入等待\n详情请查看<a href=\"http://www.redis.cn/commands.html#list\">redis 列表命令</a></li>\n</ul>\n<h3>Redis集合（set）</h3>\n<p>Redis的集合是String类型的无序集合，集合成员是唯一的，不能重复。Redis中集合是通过hash表实现的。</p>\n<ul>\n<li>向集合添加一个或多个成员：<em>SADD key member1 [member2]</em> => SADD phone huawei</li>\n<li>返回集合中的所有成员：<em>SMEMBERS key</em> => SMEMBERS phone\n还有其他命令可以实现更复杂的操作，比如返回成员数，移除一个成员\n详情请查看<a href=\"http://www.redis.cn/commands.html#set\">redis 集合命令</a></li>\n</ul>\n<h3>Redis 有序集合（sorted set）</h3>\n<p>不允许重复的成员，和set不同的是每个元素都会关联一个double类型的分数。redis通过分数为集合中的成员进行从大到小的排序，有序集合的成员是唯一的。但是分数却可以重复。有序集合也是通过哈希表实现的。</p>\n<ul>\n<li>向有序集合添加一个或多个成员，或者更新已存在成员的分数：<em>ZADD key score member [score member2]</em> => ZADD computer 1 thinkpad</li>\n<li>通过索引区间返回有序集合指定区间的成员：<em>ZRANGE key start end</em> => ZRANGE computer 0 3\n还有其他命令可以移除一个或多个成员，获取有序集合的成员数等。\n详情请查看<a href=\"http://www.redis.cn/commands.html#sorted_set\">redis 有序集合</a></li>\n</ul>\n<h3>Redis HyperLogLog</h3>\n<p>Redis HyperLogLog是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。\n基数就是不重复元素</p>\n<ul>\n<li>添加指定元素到 HyperLogLog 中：<em>PFADD key element [element]</em> => PFADD exam math</li>\n<li>返回给定HyperLogLog的基数估算值：<em>PFCOUNT key</em>\n详情请查看<a href=\"http://www.redis.cn/commands.html#hyperloglog\">redis HyperLogLog</a></li>\n</ul>\n<h3>Redis发布订阅（Pub/Sub）</h3>\n<p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。Redis 客户端可以订阅任意数量的频道。</p>\n<ul>\n<li>订阅一个或多个频道的信息：<em>PSUBSCRIBE channel [channel]</em></li>\n<li>将信息发送到指定的频道；<em>PUBLISH channel message</em>\n还有一些命令可以用于根据模式去订阅，以及退订\n详情请查看<a href=\"http://www.redis.cn/commands.html#pubsub\">redis pub/sub</a></li>\n</ul>\n<h3>Redis 事务（transactions）</h3>\n<p>Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p>\n<ul>\n<li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>\n<li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。\n一个事务从开始到执行会经历以下三个阶段：</li>\n</ul>\n<ol>\n<li>开始事务。</li>\n<li>命令入队。</li>\n<li>执行事务。</li>\n</ol>\n<ul>\n<li>标记一个事务块的开始：<em>MULTI</em></li>\n<li>执行所有事务块：<em>EXEC</em></li>\n<li>监视一个（或多个）key,如果事务执行之前之歌key被其他命令所改动，那么事务就被打断。\n详情请查看<a href=\"http://www.redis.cn/commands.html#transactions\">redis 事务</a></li>\n</ul>\n<h3>Redis脚本</h3>\n<p>Redis脚本使用Lua解释器来执行脚本。（Redis内嵌了Lua环境）</p>\n<ul>\n<li>执行Lua脚本：<em>EVAL script numkeys key [key…] arg [arg…]</em>\n详情请查看<a href=\"http://www.redis.cn/commands.html#scripting\">redis 脚本</a></li>\n</ul>\n<h3>Redis 连接</h3>\n<p>用于连接Redis服务</p>\n<ul>\n<li>查看服务是否运行：<em>PING</em></li>\n<li>验证密码是否正确：<em>AUTH password</em></li>\n<li>关闭当前连接： <em>QUIT</em></li>\n<li>切换到指定数据库：<em>SELECT index</em>\n详情请查看<a href=\"http://www.redis.cn/commands.html#connection\">redis 连接</a></li>\n</ul>\n<h3>Redis服务器</h3>\n<p>查看redis服务信息，管理redis服务</p>\n<ul>\n<li>获取redis服务器各种信息和统计值：<em>INFO [section]</em>\n详情请查看<a href=\"http://www.redis.cn/commands.html#server\">redis 服务器</a></li>\n</ul>","frontmatter":{"title":"Redis 初体验","date":"December 06, 2017","description":"初学者的角度看Redis"}},"previous":{"fields":{"slug":"/more-about-promise/"},"frontmatter":{"title":"Promise一些细节"}},"next":{"fields":{"slug":"/browser-field-in-package-json/"},"frontmatter":{"title":"package.json中的browser字段"}}},"pageContext":{"id":"ce3ad1d0-268e-5244-8083-63cf990e5dc7","previousPostId":"2873ffea-44be-5d43-b9bf-7823dd22edf4","nextPostId":"01820604-64cb-5f0f-ad82-59824f45e361"}},"staticQueryHashes":["2841359383","965855181"]}