{"componentChunkName":"component---src-templates-blog-post-js","path":"/css-in-js-introduction/","result":{"data":{"site":{"siteMetadata":{"title":"Colgin's Blog"}},"markdownRemark":{"id":"9a812952-3766-57e5-bdae-6c1b1e877d9a","excerpt":"css-in-js 是web开发中css的一个解决方案，本文将做此方案进行简要的分析。 关注点分离 关注点分离（separation of concerns…","html":"<p>css-in-js 是web开发中css的一个解决方案，本文将做此方案进行简要的分析。</p>\n<!--more-->\n<h2>关注点分离</h2>\n<p>关注点分离（separation of concerns）是对只与“特定概念、目标”（关注点）相关联的软件组成部分进行“标识、封装和操纵”的能力，即标识、封装和操纵关注点的能力。是处理复杂性的一个原则。由于关注点混杂在一起会导致复杂性大大增加，所以能够把不同的关注点分离开来，分别处理就是处理复杂性的一个原则，一种方法（来自<a href=\"https://zh.wikipedia.org/wiki/%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB\">wikipedia</a>）</p>\n<p>针对web开发的场景，就是将负责结构的HTML，负责样式的CSS，负责逻辑的的JS三种不同的技术进行分离。</p>\n<p>然后随着Vue，React一些框架的出现，组件的概念被提出，一个组件里往往封装了结构，样式，逻辑，其内部是耦合的。对关注点分离的理解也已经不再是根据不同类型进行分离，而是用组件将耦合的三者打包在一起，使用组件进行隔离，使得代码更容易维护和组织。Vue在这一点上尤为明显，使用SFC来书写组件。参考<a href=\"https://cn.vuejs.org/v2/guide/single-file-components.html#%E6%80%8E%E4%B9%88%E7%9C%8B%E5%BE%85%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB%EF%BC%9F\">vue中的关注点分离</a>。</p>\n<p>React本身不包含对css的处理，只是处理了结构与逻辑的关系，对于css的方案也一直在探索。</p>\n<ul>\n<li>使用style</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Display</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n\t\t\tcolor<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span>\n\t\t\tfontSize<span class=\"token operator\">:</span> <span class=\"token string\">'20px'</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这种使用内联style实现样式的方式对于css几乎没有封装，css完全没法复用，而且内联样式缺乏了许多特性，比如伪选择器，动画/渐变，media query，而且无法使用sass/less/postcss 这类css处理器，这种种限制使得style样式无法胜任复杂的web场景，只能用来做一些简单的样式。</p>\n<ul>\n<li>css module</li>\n</ul>\n<p>css  module是利用 css作为一个单元，然后将选择器附加hash，这样可以解决css的冲突问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Hello.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> moduleStyle <span class=\"token keyword\">from</span> <span class=\"token string\">'./hello.module.css'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>moduleStyle<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// hello.module.css</span>\n<span class=\"token punctuation\">.</span>red <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>结果是</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hello world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Hello</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_src_hello_module__red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>css module 利用hash可以解决react中的类名冲突问题，而且还可以配合sass/less/stylus/postcss 等处理器一起使用。</p>\n<ul>\n<li>BEM</li>\n</ul>\n<p>由于css类名作用范围是全局，BEM就是一个命名规则，通过合理的class命名来避免样式冲突的问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./hello.css'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hello-content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里得到的结果类名就是 hello, hello-title, hello-content 这些。要特别注意的是，并没有要求一定要在组件文件导入css，其实只要在任何一个会被执行到的文件中 <code class=\"language-text\">import './hello.js'</code> 都可以让样式起作用，因为样式是全局的。</p>\n<p>BEM的问题在于 命名会显得冗长，需要团队形成共识，避免冲突成为了开发者的心智负担。</p>\n<ul>\n<li>css-in-js</li>\n</ul>\n<p>css-in-js 是 是用js 来写样式，能够让css能够利用js的模块化，函数，作用域等语言特性。css-in-js的方案有很多，本文将会针对此方案进行一些介绍。</p>\n<h2>css in js</h2>\n<p>正如前文说到的，css-in-js方案有很多，比如<a href=\"https://github.com/styled-components/styled-components\">styled-component</a>, <a href=\"https://github.com/emotion-js/emotion\">emotion</a>, <a href=\"https://github.com/cssinjs/jss\">jss</a>, <a href=\"https://github.com/FormidableLabs/radium\">radium</a>。接下来将以styled-component为例，介绍一下 css-in-js的使用，优势，思路</p>\n<h3>使用</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> Title <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>h1<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\tcolor: red;\n\tfont-size: 24px;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// 使用</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Title</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\tcontent of title\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Title</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在内部，会将样式做一个hash，然后传递给标签，这些样式会被插入到cssdom中</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sc-abc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\tcontent of title\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token punctuation\">.</span>sc<span class=\"token operator\">-</span>abc <span class=\"token punctuation\">{</span>\n\tcolor<span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span>\n\tfont<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> 24px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>优势</h3>\n<ul>\n<li>独立，规则隔离：样式仅仅作用于当前组件，修改样式不会影响到任何别的地方。styled-component 其实也可以理解为仅仅处理了样式的组件。</li>\n<li>易于维护：Title组件的样式就在当前文件中，不需要去别的地方找代码，也不用担心改了会影响到其他。css-in-js 使得不需要额外 往html append样式，利于团队合作。而且如果删除一个组件的话，他的样式也会被删除，没有人担忧。</li>\n<li>利于团队合作：让css经验丰富的写好 styled-components，别人只需要调用就行了，不需要每个人都对css十分了解。</li>\n<li>性能好：在组件渲染的前，才会将css 插入到style中。在服务端渲染中，由于知道需要渲染哪些组件，所以只会将需要的css插入到style中。在客户端渲染的性能优秀表现在只在渲染组件的时候插入样式，不需要额外的网络请求。</li>\n<li>动态样式：在做复杂的样式（eg.主题）会非常方便。</li>\n</ul>\n<h3>发展历史</h3>\n<ol>\n<li><a href=\"https://github.com/cssinjs/jss\">JSS</a>: 第一个css-in-js方案</li>\n<li><a href=\"https://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html\">vjeux@facebook talk</a>: 介绍了css-in-js在facebook的应用</li>\n<li><a href=\"https://github.com/cssinjs/jss\">Radium</a>: 用js的方式写inline style，但是由于inline-style的一些限制，radium需要使用js去实现一些功能，比如监听window的resize事件来实现medium query</li>\n<li><a href=\"https://github.com/rebassjs/rebass\">Rebass</a>: 引入了css components api, 比如Box组件，css属性以props形式传递</li>\n<li><a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a>（不是严格意义上的css-in-js）</li>\n<li><a href=\"https://github.com/rtsao/csjs\">CSJS</a>: tiny,deprecated。</li>\n<li><a href=\"https://github.com/Khan/aphrodite\">Aphrodite</a>: Performance, output atomic class</li>\n<li><a href=\"https://github.com/robinweser/fela\">Fela</a>: style is a function of state</li>\n<li><a href=\"https://github.com/threepointone/glamor\">Glamor</a>: Performance, 使用CSSOM api insertRule，直接插入css 对象。比直接往style标签里写要快非常多。</li>\n<li><a href=\"https://github.com/jsxstyle/jsxstyle\">jsxstyle</a>: Pete hunt, css component like rebass</li>\n<li><a href=\"https://github.com/styled-components/styled-components\">styled-component</a>: new api, styled.h1</li>\n<li><a href=\"https://github.com/styletron/styletron\">styleton</a>: output atomic class, 优化产出的样式体积</li>\n<li><a href=\"https://github.com/vercel/styled-jsx\">styled-jsx</a>: write a style tag in your react component, and they will</li>\n<li><a href=\"https://github.com/4Catalyzer/astroturf\">astroturf</a>: first library that allow you to extract to a css file.</li>\n<li><a href=\"https://github.com/paypal/glamorous\">glamorous</a>: deprecated</li>\n<li><a href=\"https://github.com/styled-components/styled-components\">styled-components</a> v2: switch to stylus, stylus is tiny and super fast. 现在很多 css-in-js都用stylus作为parser</li>\n<li><a href=\"https://github.com/emotion-js/emotion\">Emotion</a>: Perfomance</li>\n<li><a href=\"https://github.com/callstack/linaria\">Linaria</a>: 类似与astroturf， api类似与styled-component</li>\n<li><a href=\"https://github.com/emotion-js/emotion\">Emotion</a> v10: style components api ⇒ css api</li>\n<li><a href=\"https://github.com/system-ui/theme-ui\">theme-ui</a></li>\n</ol>\n<h3>原理</h3>\n<p>无论是何种css-in-js方案，其大致的原理都是类似的，就是库本身有一个运行时，在运行时会解析用户的样式，在需要时添加前缀，并将其放入到css类中，生成哈希名，利用CSSOM创建或者更新样式。特别要注意的时这种css-in-js的方案 是有运行时成本的。</p>\n<h3>缺点</h3>\n<ul>\n<li>css-in-js 没有规范，社区一直在探索，而且有一定的学习成本</li>\n<li>新的运行时依赖</li>\n</ul>\n<h2>css的其他思路</h2>\n<p>在 <a href=\"https://2020.stateofcss.com/en-US/technologies/css-frameworks/\">2020年的css报告</a>中，tailwind于2019年一样收到热烈的追捧。tailwind提供了一种 utility class的css方案，提供了很多只有一个属性的类名。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg-white overflow-hidden <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hello world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n.bg-white {\n\t--tw-bg-opaciry: 1;\n\tbackground-color: rgba(255, 255, 255, var(--tw-bg-opacity));\n}\n.overflow-hidden {\n\toverflow: hidden;\n}\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这种atomic css的思路，使得css可以最大程度的复用，但是也会导致class的名字变长。</p>\n<p>使用<a href=\"https://github.com/tw-in-js/twind\">twind</a>可以将css-in-js与tailwind 结合起来</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> tw <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'&lt;https://cdn.skypack.dev/twind>'</span>\n\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  &lt;main class=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">h-screen bg-purple-400 flex items-center justify-center</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\">\n    &lt;h1 class=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">font-bold text(center 5xl white sm:gray-800 md:pink-700)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\">This is Twind!&lt;/h1>\n  &lt;/main>\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>结果是</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;https://cdn.skypack.dev/twind/shim><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>h-screen bg-purple-400 flex items-center justify-center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font-bold text(center 5xl white sm:gray-800 md:pink-700)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>This is Twind!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>还可以使用hash 将类名进行hash。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=W-zVPl7CGrY\">Max Stoiber-The past, present and future of CSS-in-JS</a></li>\n<li><a href=\"https://www.infoq.cn/article/95ojp6upti9vsyfsw2xz\">css-in-js 一个充满争议的技术方案</a></li>\n<li><a href=\"https://www.algolia.com/blog/product/js-is-dead-all-hail-css/\">Goodbye JavaScript: Introducing our CSS API Client</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000018114118\">在react中使用css 的七种方式</a></li>\n<li><a href=\"https://2020.stateofcss.com/en-US/technologies/css-in-js/\">css in 2020</a></li>\n<li><a href=\"https://juejin.cn/post/6844903873962835982#comment\">CSS-in-JS 你所应该知道的一切</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2017/04/css_in_js.html\">CSS in JS 简介</a></li>\n</ul>","frontmatter":{"title":"css-in-js 介绍","date":"January 25, 2021","description":"为什么css-in-js 能这么🔥呢？"}},"previous":{"fields":{"slug":"/vue3-renderer/"},"frontmatter":{"title":"vue3 中渲染器api的设计"}},"next":{"fields":{"slug":"/watch-in-vue3/"},"frontmatter":{"title":"Vue3中的watch执行时机"}}},"pageContext":{"id":"9a812952-3766-57e5-bdae-6c1b1e877d9a","previousPostId":"466cbbd2-e36f-5bed-8919-d41e5d82ca2f","nextPostId":"547be2ec-e3ad-5c1c-9f67-8b50dd1fbb93"}},"staticQueryHashes":["2841359383","3257411868"]}